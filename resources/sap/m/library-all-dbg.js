// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.m.library-all');
if ( !jQuery.sap.isDeclared('sap.m.BarRenderer') ) {

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.BarRenderer");

/**
 * @class Bar renderer. 
 * @static
 */
sap.m.BarRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.BarRenderer.render = function(rm, oControl) { 
	var i = 0;
	switch (oControl._context) {
	case 'header':
		//render header element 
		rm.write("<header");
		break;
	case 'footer':
		//render footer element 
		rm.write("<footer");
		rm.addClass("sapMFooter-CTX");
		break;
	default: 
		//render div element as default 
		rm.write("<div");
		break;
	}
	rm.writeControlData(oControl);
	rm.addClass("sapMBar");
	rm.addClass("sapMBar-CTX");
	rm.writeClasses(); 
	rm.write(">"); 

	//middle content area 
	rm.write("<div id='"); 
	rm.write(oControl.getId());
	rm.write("-BarMiddle' class='sapMBarMiddle' >");
	if (oControl.getEnableFlexBox()){
		oControl._oflexBox = oControl._oflexBox || new sap.m.HBox(oControl.getId() + "-BarPH", {alignItems: "Center"}).addStyleClass("sapMBarPH").setParent(oControl, null, true);
		aMContent = oControl.getContentMiddle();
		for(i=0; i<aMContent.length; i++){
			oControl._oflexBox.addItem(aMContent[i]);
		}
		rm.renderControl(oControl._oflexBox);
	} else {
		rm.write("<div id='" + oControl.getId() + "-BarPH' class='sapMBarPH' >"); //place holder
		var aMContent = oControl.getContentMiddle();
		for(i=0; i<aMContent.length; i++){
			rm.renderControl(aMContent[i]);
		}
		rm.write("</div>");
	}
	rm.write("</div>");
	
	//left content area
	rm.write("<div id='"); 
	rm.write(oControl.getId());
	rm.write("-BarLeft' class='sapMBarLeft' >");
	var aLContent = oControl.getContentLeft();
	for(i=0; i< aLContent.length; i++){
		rm.renderControl(aLContent[i]);
	}
	rm.write("</div>");

	//right content area		
	rm.write("<div id='"); 
	rm.write(oControl.getId());
	rm.write("-BarRight' class='sapMBarRight' >");
	var aRContent = oControl.getContentRight();
	for(i=0; i<aRContent.length; i++){
		rm.renderControl(aRContent[i]);
	}
	rm.write("</div>");
	
	switch (oControl._context) {
	case 'header':
		rm.write("</header>");
		break;
	case 'footer':
		rm.write("</footer>");
		break;
	default: 
		rm.write("</div>");
		break;
	}
	
};

}; // end of sap.m.BarRenderer
if ( !jQuery.sap.isDeclared('sap.m.BusyDialogRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.BusyDialogRenderer");

/**
 * @class BusyDialog renderer. 
 * @static
 */
sap.m.BusyDialogRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.BusyDialogRenderer.render = function(oRm, oControl){ 
	// write the HTML into the render manager
	oRm.write("<div");
	oRm.writeControlData(oControl);
	oRm.addClass("sapMBusyDialog");
	if(jQuery.device.is.iphone){
		oRm.addClass("sapMDialogHidden");
	}
	oRm.writeClasses();
	oRm.write(">");
	if(!oControl._busyIndicator)
	oControl._busyIndicator = new sap.m.BusyIndicator(oControl.getId() + 'busyInd', {customIcon: oControl.getCustomIcon(), customIconWidth: '44' + 'px', customIconheight: '44' +'px', 
													customIconRotationSpeed: oControl.getCustomIconRotationSpeed(), customIconDensityAware: oControl.getCustomIconDensityAware()}).addStyleClass('sapMBsyInd');
	
	if(oControl.getTitle()) {
		oRm.write("<h1 class=\"sapMBusyDialogTitle\">" + oControl.getTitle() + "</h1>");
	}
	
	if(oControl.getText()) {
		if(!oControl._oLabel)
			oControl._oLabel = new sap.m.Label(oControl.getId() + "-busyLabel", {text: oControl.getText()}).addStyleClass("sapMBusyDialogLabel");
	}
	if(jQuery.os.ios) {
		oRm.renderControl(oControl._oLabel);
		oRm.renderControl(oControl._busyIndicator);
	} else {
		oRm.renderControl(oControl._busyIndicator);
		oRm.renderControl(oControl._oLabel);
	}
	
	if(oControl.getShowCancelButton()){
		oRm.write("<div class='sapMBusyDialogAction'>");
		if(!oControl._oButton) {
			var sButtonText = (oControl.getCancelButtonText()) ? oControl.getCancelButtonText() : 	sap.ui.getCore().getLibraryResourceBundle("sap.m").getText("BUSYDIALOG_CANCELBUTTON_TEXT");
			;
			var sButtonStyle = (jQuery.os.ios) ? sap.m.ButtonType.Unstyled : sap.m.ButtonType.Default;
			oControl._oButton = new sap.m.Button(oControl.getId() + 'busyCancelBtn', {
				text: sButtonText,
				type: sButtonStyle,
				tap : function() {
					oControl.close();
				}
			}).addStyleClass("sapMBusyDialogCnlBtn");
		}
		oRm.renderControl(oControl._oButton);
		oRm.write("</div>");
	}
	oRm.write("</div>");
};

}; // end of sap.m.BusyDialogRenderer
if ( !jQuery.sap.isDeclared('sap.m.BusyIndicatorRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.m.BusyIndicatorRenderer");

/**
 * @class BusyIndicator renderer. 
 * @static
 */
sap.m.BusyIndicatorRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.BusyIndicatorRenderer.render = function(oRm, oControl){ 
	// return immediately if control is invisible
	if(!oControl.getVisible()) {
		return;
	}

	// write the HTML into the render manager
	var iSpinBar = (jQuery.os.ios) ? 13 :4;
	oRm.write("<div");
	oRm.writeControlData(oControl);
	oRm.writeAttribute("class","sapMBusyIndicator"); 
	oRm.write(">");
	if(oControl.getCustomIcon()){
		if(!oControl._iconImage) {
			var sWidth = oControl.getCustomIconWidth() || '44px';
			var sHeight = oControl.getCustomIconHeight() || '44px';
			oControl._iconImage = new sap.m.Image(oControl.getId() + "-icon", {src: oControl.getCustomIcon(), width: sWidth, height: sHeight, densityAware: oControl.getCustomIconDensityAware()}).addStyleClass('sapMBsyIndIcon');
		}
		oRm.renderControl(oControl._iconImage);
	}else {
		oRm.write("<div");
		oRm.writeAttribute("class","sapMSpinner"); 
		oRm.addStyle('width', oControl.getSize());
		oRm.addStyle('height', oControl.getSize());
		oRm.writeStyles();
		oRm.write(">");

		for (var i=1; i<iSpinBar; i++) {
			var sBarClass = 'sapMSpinBar' + i;
			if(!jQuery.os.ios) {
				if(i === 3) {
					var sBarClass1 = 'sapMSpinBar' + 4;
					oRm.write('<div class="'+ sBarClass + '"><div class="'+ sBarClass1 + '"></div></div>');
					break;
				}
			}
			oRm.write('<div class="'+ sBarClass + '"></div>');
		}
		oRm.write("</div>");
	}
	if (oControl.getText()) {
		if (!oControl._oLabel) {
			oControl._oLabel = new sap.m.Label(oControl.getId() + "-label", {text: oControl.getText()}).addStyleClass("sapMBsyIndLabel");
			if (oControl.getTextDirection()){
				oControl._oLabel.setTextDirection(oControl.getTextDirection());
			}
		}
		oRm.renderControl(oControl._oLabel);
	}
	
	oRm.write("</div>");
};

}; // end of sap.m.BusyIndicatorRenderer
if ( !jQuery.sap.isDeclared('sap.m.ButtonRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.ButtonRenderer");

/**
 * @class Button renderer.
 * @static
 */
sap.m.ButtonRenderer = {};


/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.m.ButtonRenderer.render = function(rm, oButton) {

	// return immediately if control is invisible
	if (!oButton.getVisible()) {
		return;
	}
	
	// get control properties
	var sType = oButton.getType();
	var sWidth = oButton.getWidth();
	var bEnabled = oButton.getEnabled();
	var bExtraContentDiv = false;
	
	// set control constants
	var sAcceptImage = "check_icon.png";
	var sRejectImage = "delete_icon.png";
	var sUpImage = "back_icon.png";
		
	// start button tag
	rm.write("<button type=\"button\"");
	rm.writeControlData(oButton);

	// button style class
	if (sType != sap.m.ButtonType.Unstyled) {
		rm.addClass("sapMBtn");
	}
	
	// check if button is disabled
	if (!bEnabled) {
		if (sType == sap.m.ButtonType.Back || sType == sap.m.ButtonType.Up) {
			rm.addClass("sapMBtn" + jQuery.sap.escapeHTML(sType) + "Disabled");
		} else {
			if (sType != sap.m.ButtonType.Unstyled) {
				rm.addClass("sapMBtnDisabled");
			}
		}
	} else {
		if (sType != "" && sType != sap.m.ButtonType.Unstyled) {
			rm.addClass("sapMBtn" + jQuery.sap.escapeHTML(sType));
		}	
	}
	
	// only for iOS buttons in bar control: if only an icon and no text is provided the button should be transparent and the active state is a background glow 
	if (oButton.getIcon() && !oButton.getText() && sType != sap.m.ButtonType.Back){
		if (!bEnabled) {
			rm.addClass("sapMBtnIconDisabled");
		} else {
			rm.addClass("sapMBtnIcon");
		}
	}
	
	// set user defined width
	if (sWidth != "" || sWidth.toLowerCase() == "auto") {
		bExtraContentDiv = false;
		rm.writeAttribute("style", "width:" + sWidth + ";");
	}

	// add all classes to button tag
	rm.writeClasses();

	// close start button tag
	rm.write(">");

	// check if additional content-DIV needs to rendered
	if (sType == sap.m.ButtonType.Accept) { 
		bExtraContentDiv = true;
	}
	if (sType == sap.m.ButtonType.Reject) {
		bExtraContentDiv = true;
	}
	if (sType == sap.m.ButtonType.Up) {
		bExtraContentDiv = true;
	}
	if (oButton.getIcon()) {
		bExtraContentDiv = true;
	}
	
	// render button content tag if image control is loaded	
	if (bExtraContentDiv) {
		rm.write("<div");
		if (sType != sap.m.ButtonType.Unstyled) {
			rm.addClass("sapMBtnContent");
			rm.writeClasses();	
		}
		rm.write(">");	
	}

	// get image path
	var imagePath = jQuery.sap.getModulePath("sap.m", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + "/img/";

	// set image for internal image control (accept)
	this.writeInternalImgHtml(rm, oButton, sType, sap.m.ButtonType.Accept, imagePath, sAcceptImage);	

	// set image for internal image control (reject)
	this.writeInternalImgHtml(rm, oButton, sType, sap.m.ButtonType.Reject, imagePath, sRejectImage);	

	// set image for internal image control (up)
	this.writeInternalImgHtml(rm, oButton, sType, sap.m.ButtonType.Up, imagePath, sUpImage);
	
	// write icon left	
	if (oButton.getIcon() && oButton.getIconFirst()) {
		this.writeImgHtml(rm, oButton);
	}
	
	// write button text	
	this.writeTextHtml(rm, oButton, bExtraContentDiv, sType);

	// write icon right	
	if (oButton.getIcon() && !oButton.getIconFirst()) {
		this.writeImgHtml(rm, oButton);
	}
	
	// close button content tag	
	if (bExtraContentDiv) {
		rm.write("</div>");
	}	
	
	// end button tag
	rm.write("</button>");
};


/**
 * HTML for button text
 */
sap.m.ButtonRenderer.writeTextHtml = function(rm, oButton, bExtraContentDiv, sType) {
	rm.write("<span");
	if (!bExtraContentDiv && sType != sap.m.ButtonType.Unstyled) {
		rm.addClass("sapMBtnContent");
		rm.writeClasses();
	}	
	rm.write(">");
	if (oButton.getText()) {
		rm.writeEscaped(oButton.getText());
	} else {	
		if (sType == sap.m.ButtonType.Back) {
			rm.write("&nbsp;");
		}
	}	
	rm.write("</span>");	
};


/**
 * HTML for image
 */
sap.m.ButtonRenderer.writeImgHtml = function(rm, oButton) {
	rm.renderControl(oButton._getImage((oButton.getId() + "-img"), oButton.getIcon()));	
};


/**
 * HTML for internal image
 */
sap.m.ButtonRenderer.writeInternalImgHtml = function(rm, oButton, sType, sCheckType, sImgPath, sImage) {
	var sHeight = "2.0em";
	var sWidth = "2.0em";
	if (sType === sap.m.ButtonType.Up) {
		sHeight = "2.0em";
		sWidth = "1.0em";
	}
	if (sType === sCheckType) {
		if(!jQuery.os.ios){
			if (oButton._imageBtn) {
				oButton._imageBtn.setSrc(sImgPath + sImage);
				oButton._imageBtn.setHeight(sHeight);
				oButton._imageBtn.setWidth(sWidth);
				rm.renderControl(oButton._imageBtn);
			} else{		
				rm.renderControl(oButton._getImageBtn((oButton.getId() + "-imgBtn"), sImgPath + sImage, sHeight, sWidth));
			}	
		}
	}		
};

}; // end of sap.m.ButtonRenderer
if ( !jQuery.sap.isDeclared('sap.m.CarouselRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */
 
jQuery.sap.declare("sap.m.CarouselRenderer");

/**
 * @class Carousel renderer. 
 * @static
 */
sap.m.CarouselRenderer = {
};




/**
 * Renders the Carousel's HTML, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.CarouselRenderer.render = function(rm, oCarousel){ 
	// Return immediately if control is invisible or if there are no pages to be rendered
	if (!oCarousel.getVisible()) {
		return;
	}

	//div for pages
	rm.write("<div");
	rm.writeControlData(oCarousel);

	rm.addStyle("width", oCarousel.getWidth());
	rm.addStyle("height", oCarousel.getHeight());
	rm.writeStyles();
	
	rm.addClass("sapMCrsl");
	// add all classes (also custom classes) to carousel tag
	rm.writeClasses();
	rm.write(">");
	
	//visual indicator
	if(oCarousel.getPageIndicatorPlacement() == sap.m.PlacementType.Top) {
		this._renderPageIndicator(rm, oCarousel);
	}
	
	//prepare the div which will contain the pages
	if(!oCarousel._oSwipeView) {
		rm.write("<div id='" + oCarousel._getContentId() + "' class='sapMCrslCont'></div>");
	}
	
	//visual indicator
	if(oCarousel.getPageIndicatorPlacement() == sap.m.PlacementType.Bottom) {
		this._renderPageIndicator(rm, oCarousel);
	}
	rm.write("</div>");	
};


/**
 * Renders the page indicator, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 * @private
 */
sap.m.CarouselRenderer._renderPageIndicator = function(rm, oCarousel){
	rm.write("<ul id='" + oCarousel._getNavId() + "' class='sapMCrslIndLst'>");
	this.renderPageIndicatorDots(rm, oCarousel);
	rm.write("</ul>");
};


/**
 * Renders the page indicator dots, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.CarouselRenderer.renderPageIndicatorDots = function(rm, oCarousel){
	rm.write("<div id='" + oCarousel._getPrevBtnId() + "' class='sapMCrslIndLstBt'/>");
	var dotCount = oCarousel.getPages().length;
	for(var i= 0; i< dotCount; i ++) {
		rm.write("<li id='" + oCarousel._getNavId() + "-dot" + i + "' class='sapMCrslIndLstIt'></li>");
	}
	rm.write("<div id='" + oCarousel._getNextBtnId() + "' class='sapMCrslIndLstBt'/>");
};


}; // end of sap.m.CarouselRenderer
if ( !jQuery.sap.isDeclared('sap.m.CheckBoxRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.CheckBoxRenderer");

/**
 * @class CheckBox renderer. 
 * @static
 */
sap.m.CheckBoxRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oCheckBox an object representation of the control that should be rendered
 */
sap.m.CheckBoxRenderer.render = function(oRm, oCheckBox){ 
	// Return immediately if control is invisible
	if (!oCheckBox.getVisible()) {
		return;
	}

	// get control properties
	var bEnabled = oCheckBox.getEnabled();
	var myTabIndex = 0;
	
	// CheckBox wrapper
	oRm.write("<div");
	oRm.addClass("sapMCb");
	oRm.writeControlData(oCheckBox); 
	oRm.writeClasses();
	oRm.write(">");		// DIV element
	
	
	// write the HTML into the render manager
	oRm.write("<div");
	
	// CheckBox style class
	oRm.addClass("sapMCbBg");
	
	if (!bEnabled) {
		oRm.addClass("sapMCbBgDis");
		myTabIndex = -1;
	}

	if (!oCheckBox.getActiveHandling()){
		oRm.addClass("sapMCbActiveStateOff");
	}
	oRm.writeClasses();
	oRm.writeAttribute("tabIndex", myTabIndex);
	oRm.write(">");		// DIV element

	oRm.write("<input type='CheckBox' tabindex='-1' id='");
	oRm.write(oCheckBox.getId() + "-CB'");
	oRm.write(" class='sapMCbMark");
	
	if (oCheckBox.getSelected()) {
		oRm.write(" sapMCbMarkChecked'");
		oRm.writeAttribute("checked", "checked");
	} else {
		oRm.write("' ");
	}
	
	if (oCheckBox.getName()) {
		oRm.writeAttributeEscaped('name', oCheckBox.getName());
	}

	if (!bEnabled) {
		oRm.write(" disabled='disabled'");
	}

	oRm.write(" /></div>");
	oRm.renderControl(oCheckBox._oLabel);
	oRm.write("</div>");
};

}; // end of sap.m.CheckBoxRenderer
if ( !jQuery.sap.isDeclared('sap.m.DialogRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.m.DialogRenderer");


/**
 * @class Dialog renderer. 
 * @static
 */
sap.m.DialogRenderer = {};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.DialogRenderer.render = function(oRm, oControl) {
	var oCore = sap.ui.getCore(),
		oLeftButton = oCore.byId(oControl.getLeftButton()),
		oRightButton = oCore.byId(oControl.getRightButton());

	// write the HTML into the render manager
	oRm.write("<div");
	oRm.writeControlData(oControl);
	oRm.addClass("sapMDialog");
	oRm.addClass("sapMDialog-CTX");
	if(jQuery.device.is.iphone){
		oRm.addClass("sapMDialogHidden sapMDialogIPhone");
	}
	oRm.writeClasses();
	oRm.write(">");

	if(jQuery.os.ios) {
		oRm.renderControl(oControl._getHeader());
	} else {
		oRm.write("<header>");
		oRm.write("<h1>");
		if(oControl._iconImage){
			oRm.renderControl(oControl._iconImage);
		}
		oRm.write("<span>");
		oRm.renderControl(oControl._headerTitle);
//		oRm.writeEscaped(oControl.getTitle());
		oRm.write("</span>");
		oRm.write("</h1>");
		oRm.write("</header>");
	}

	oRm.write("<section id='" + oControl.getId() + "-cont'>");
	oRm.write("<div id='" + oControl.getId() + "-scroll" +"' class='sapMDialogScroll'>")
	var aContent = oControl.getContent();
	for(var i = 0; i < aContent.length; i++) {
		oRm.renderControl(aContent[i]);
	}
	oRm.write("</div>");
	oRm.write("</section>");
	
	if(!jQuery.os.ios) {
		oRm.write("<footer class='sapMDialogActions'>");

		// Render actions
		if(oLeftButton){
			oRm.write("<div class='sapMDialogAction'>");
			oRm.renderControl(oLeftButton);
			oRm.write("</div>");
		}
		if(oRightButton){
			oRm.write("<div class='sapMDialogAction'>");
			oRm.renderControl(oRightButton);
			oRm.write("</div>");
		}
		
		oRm.write("</footer>");
	}
	oRm.write("</div>");
};
}; // end of sap.m.DialogRenderer
if ( !jQuery.sap.isDeclared('sap.m.FlexBoxCssPropertyMap') ) {
  jQuery.sap.declare('sap.m.FlexBoxCssPropertyMap');
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

sap.m.FlexBoxCssPropertyMap = {
	'spec0907': {
		'display': {
			'flex': {
				'display': 'box'
			},
			'inline-flex': {
				'display': 'inline-box'
			}
		},
		'flex-direction': {
			'row': {
				'box-orient': 'horizontal',
				'box-direction': 'normal'
			},
			'row-reverse': {
				'box-orient': 'horizontal',
				'box-direction': 'reverse'
			},
			'column': {
				'box-orient': 'vertical',
				'box-direction': 'normal'
			},
			'column-reverse': {
				'box-orient': 'vertical',
				'box-direction': 'reverse'
			}
		},
		'flex-wrap': {
			'no-wrap': {
				'box-lines': 'single'
			},
			'wrap': {
				'box-lines': 'multiple'
			},
			'wrap-reverse': null
		},
		'flex-flow': null,
		'order': {
			'<number>': {
				'box-ordinal-group': '<integer>'
			}
		},
		'flex-grow': {
			'<number>': {
				'box-flex': '<number>'
			}
		},
		'flex-shrink': null,
		'flex-basis': null,
		'flex': {
			'[flex-grow] | [flex-shrink] | [flex-basis]': {
				'box-flex': '[flex-grow]'
			}
		},
		'justify-content': {
			'flex-start': {
				'box-pack': 'start'
			},
			'flex-end': {
				'box-pack': 'end'
			},
			'center': {
				'box-pack': 'center'
			},
			'space-between': {
				'box-pack': 'justify'
			},
			'space-around': null
		},
		'align-items': {
			'flex-start': {
				'box-align': 'start'
			},
			'flex-end':{
				'box-align': 'end'
			},
			'center': {
				'box-align': 'center'
			},
			'baseline': {
				'box-align': 'baseline'
			},
			'stretch': {
				'box-align': 'stretch'
			}
		},
		'align-self': null,
		'align-content': null
	}
};
}; // end of sap.m.FlexBoxCssPropertyMap
if ( !jQuery.sap.isDeclared('sap.m.FlexBoxStylingHelper') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.FlexBoxStylingHelper");

/**
 * @class FlexBox styling helper
 * @static
 */
sap.m.FlexBoxStylingHelper = {};

/**
 * Goes through applicable styles and calls function to sets them on the given control.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.FlexBoxStylingHelper.setFlexBoxStyles = function(oRm, oControl) {
	var sDisplay;

	// Prepare values by converting camel-case to dash and lower-casing
	var bInline = oControl.getDisplayInline();
	var sDirection = oControl.getDirection().replace(/\W+/g, "-").replace(/([a-z\d])([A-Z])/g, "$1-$2").toLowerCase();
	var bFitContainer = oControl.getFitContainer();
	// TODO Activate wrapping when browsers support it
	//var sWrap = oControl.getWrap().replace(/\W+/g, "-").replace(/([a-z\d])([A-Z])/g, "$1-$2").toLowerCase();
	var sJustifyContent = oControl.getJustifyContent().replace(/\W+/g, "-").replace(/([a-z\d])([A-Z])/g, "$1-$2").toLowerCase();
	var sAlignItems = oControl.getAlignItems().replace(/\W+/g, "-").replace(/([a-z\d])([A-Z])/g, "$1-$2").toLowerCase();
	// TODO Enable alignContent when any browser supports it
	//var sAlignContent = oControl.getAlignContent().replace(/\W+/g, "-").replace(/([a-z\d])([A-Z])/g, "$1-$2").toLowerCase();

	if(bInline) {
		sDisplay = "inline-flex";
	} else {
		sDisplay = "flex";
	}

	// Set width and height for outermost FlexBox only if FitContainer is set
	if(bFitContainer && !(oControl.getParent() instanceof sap.m.FlexBox)) {
		oRm.addStyle("width", "auto");
		oRm.addStyle("height", "100%");
	}

	// Add flex prefix to start and end values
	if(sJustifyContent === "start" || sJustifyContent === "end") {
		sJustifyContent = "flex-" + sJustifyContent;
	}

	if(sAlignItems === "start" || sAlignItems === "end") {
		sAlignItems = "flex-" + sAlignItems;
	}

	// TODO Enable alignContent when any browser supports it
	/* if(sAlignContent === "start" || sAlignContent === "end") {
		sAlignContent = "flex-" + sAlignContent;
	}*/

	// Set values (if different from default)
	sap.m.FlexBoxStylingHelper.setStyle(oRm, oControl, "display", sDisplay);
	if(sDirection !== "row") {
		sap.m.FlexBoxStylingHelper.setStyle(oRm, oControl, "flex-direction", sDirection);
	}
	// TODO Enable wrapping when any browser supports it
	/* if(sWrap !== "nowrap") {
		sap.m.FlexBoxStylingHelper.setStyle(oRm, oControl, "flex-wrap", sWrap);
	}*/
	if(sJustifyContent !== "flex-start") {
		sap.m.FlexBoxStylingHelper.setStyle(oRm, oControl, "justify-content", sJustifyContent);
	}
	if(sAlignItems !== "stretch") {
		sap.m.FlexBoxStylingHelper.setStyle(oRm, oControl, "align-items", sAlignItems);
	}
	// TODO Enable alignContent when any browser supports it
	/* if(sAlignContent !== "stretch") {
		sap.m.FlexBoxStylingHelper.setStyle(oRm, oControl, "align-content", sAlignContent);
	}*/
};

/**
 * Goes through applicable item styles and sets them on the given control.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.m.FlexItemData} oLayoutData an object representation of the layout data
 */
sap.m.FlexBoxStylingHelper.setFlexItemStyles = function(oRm, oLayoutData) {
	var order = "";
	var growFactor = "";
	// TODO Activate shrinkFactor when browsers support it
	//var shrinkFactor = "";
	// TODO Activate baseSize when browsers support it
	//var baseSize = "";
	var alignSelf = "";

	// Set values if different from default
	order = oLayoutData.getOrder();
	if(order) {
		sap.m.FlexBoxStylingHelper.setStyle(oRm, null, "order", order);
	}

	growFactor = oLayoutData.getGrowFactor();
	if(growFactor) {
		sap.m.FlexBoxStylingHelper.setStyle(oRm, null, "flex-grow", growFactor);
	}
	/* TODO Activate shrinkFactor when browsers support it
	shrinkFactor = oLayoutData.getShrinkFactor();
	if(shrinkFactor != 1) {
		sap.m.FlexBoxStylingHelper.setStyle(oRm, null, "flex-shrink", shrinkFactor);
	}
	*/
	/* TODO Activate baseSize when browsers support it
	baseSize = oLayoutData.getBaseSize().toLowerCase();
	if(baseSize) {
		sap.m.FlexBoxStylingHelper.setStyle(oRm, null, "flex-basis", baseSize);
	}
	*/

	alignSelf = oLayoutData.getAlignSelf().toLowerCase();

	// Add flex prefix to start and end values to create CSS value
	if(alignSelf === "start" || alignSelf === "end") {
		alignSelf = "flex-" + alignSelf;
	}

	if(alignSelf && alignSelf !== "flex-start") {
		sap.m.FlexBoxStylingHelper.setStyle(oRm, null, "align-self", alignSelf);
	}
};

/**
 * Sets style (including fall-back styles) to the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 * @param sProperty name of the property
 * @param sValue value of the property
 */
sap.m.FlexBoxStylingHelper.setStyle = function(oRm, oControl, sProperty, sValue) {
	if(typeof(sValue) === "string") {
		sValue = sValue.toLowerCase();
	}
	var aVendorPrefixes = [];
	if(jQuery.browser.webkit) {
		aVendorPrefixes = ["-webkit-"];
	} else if(jQuery.browser.mozilla) {
		aVendorPrefixes = ["-moz-"];
	}

	//var aSpecKeys = ["spec0907", "spec1203"];
	var aSpecKeys = ["spec0907"];

	for(var i = 0; i < aSpecKeys.length; ++i) {
		var sSpec = aSpecKeys[i];

		// Nothing to do if property doesn't exist in this spec or is the same as standard
		if(sap.m.FlexBoxCssPropertyMap[sSpec][sProperty] === null || sap.m.FlexBoxCssPropertyMap[sSpec][sProperty] === "<idem>") {
			continue;
		}

		var mLegacyMap = null;
		if(typeof(sap.m.FlexBoxCssPropertyMap[sSpec][sProperty]) === "object") {
			if(sap.m.FlexBoxCssPropertyMap[sSpec][sProperty]["<number>"]) {
				mLegacyMap = sap.m.FlexBoxCssPropertyMap[sSpec][sProperty]["<number>"];
				for(var key in mLegacyMap) {
					mLegacyMap[key] = sValue;
				}
			} else {
				mLegacyMap = sap.m.FlexBoxCssPropertyMap[sSpec][sProperty][sValue];
			}
		} else {
			mLegacyMap = sap.m.FlexBoxCssPropertyMap[sSpec][sProperty][sValue];
		}

		// Nothing to do if value doesn't exist or is the same as standard
		if(mLegacyMap === null || mLegacyMap === "<idem>") {
			continue;
		} else if(typeof(mLegacyMap) === "object") {
			for(var sLegacyProperty in mLegacyMap) {
				// As display is a long-standing standard property the values are vendor-prefixed instead of the property name
				if(sLegacyProperty === "display") {
					// Vendor-specific styles
					for(var key in aVendorPrefixes) {
						if(aVendorPrefixes[key] + mLegacyMap[sLegacyProperty] === "-webkit-flexbox" || aVendorPrefixes[key] + mLegacyMap[sLegacyProperty] === "-webkit-inline-flexbox") continue; // Skipping display:-webkit-(inline-)flexbox to get the correct spec version in Chrome
						if(oRm) {
							oRm.addStyle(sLegacyProperty, aVendorPrefixes[key] + mLegacyMap[sLegacyProperty]);
						} else {
							jQuery(oControl).css(sLegacyProperty, aVendorPrefixes[key] + mLegacyMap[sLegacyProperty]);
						}
					}

					// Standard style
					// TODO Uncomment when non-prefixed properties are supported by any browser
					/*
					if(oRm) {
						oRm.addStyle(sLegacyProperty, mLegacyMap[sLegacyProperty]);
					} else {
						jQuery(oControl).css(sLegacyProperty, mLegacyMap[sLegacyProperty]);
					}*/
				} else {
					// Vendor-specific styles
					for(var key in aVendorPrefixes) { 
						if(oRm) {
							oRm.addStyle(aVendorPrefixes[key] + sLegacyProperty, mLegacyMap[sLegacyProperty]);
						} else {
							jQuery(oControl).css(aVendorPrefixes[key] + sLegacyProperty, mLegacyMap[sLegacyProperty]);
						}
					}

					// Standard style
					// TODO Uncomment when non-prefixed properties are supported by any browser
					/*
					if(oRm) {
						//oRm.addStyle(sLegacyProperty, mLegacyMap[sLegacyProperty]);
					} else {
						jQuery(oControl).css(sLegacyProperty, mLegacyMap[sLegacyProperty]);
					}*/
				}
			}
		}
	}

	// Current standard
	// TODO Uncomment when current standard is supported by any browser
	/*if(sProperty != "display"){
		for(var key in aVendorPrefixes) {
			if(oRm) {
				oRm.addStyle(aVendorPrefixes[key] + sProperty, sValue);
			} else {
				jQuery(oControl).css(aVendorPrefixes[key] + sProperty, sValue);
			}
		}
	}*/

	// Standard style
	// TODO Uncomment when non-prefixed properties are supported by any browser
	/*if(oRm) {
		oRm.addStyle(sProperty, sValue);
	} else {
		jQuery(oControl).css(sProperty, sValue);
	}*/
};
}; // end of sap.m.FlexBoxStylingHelper
if ( !jQuery.sap.isDeclared('sap.m.ImageRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */
 
// Provides default renderer for control sap.m.Image
jQuery.sap.declare("sap.m.ImageRenderer");

/**
 * @class Image renderer. 
 * @author D051016
 * @static
 */
sap.m.ImageRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.ImageRenderer.render = function(rm, oImage){ 
	// Return immediately if control is invisible
	if (!oImage.getVisible()) {
		return;
	}
	
	// Open the <img> tag
	rm.write("<img");

	rm.writeAttributeEscaped("src", oImage._getDensityAwareSrc());
	rm.writeControlData(oImage);
	
	rm.addClass("sapMImg");
	rm.writeClasses();
	
	//TODO need further discussion to decide if tooltip is still needed for mobile
	var tooltip = oImage.getTooltip_AsString();
	if (tooltip) {
		rm.writeAttributeEscaped("title", tooltip);
	}

	//TODO implement the ImageMap control
	var sUseMap = oImage.getUseMap();
	if (sUseMap) {
		if (!(jQuery.sap.startsWith(sUseMap, "#"))) {
			sUseMap = "#" + sUseMap;
		}
		rm.writeAttributeEscaped("useMap", sUseMap);
	}
	
	// determine tab index and write alt attribute - both depending on "decorative" state (which is overridden by the "useMap" property
	var myTabIndex = 0;
	if ((oImage.getDecorative() && (!sUseMap))) {
		myTabIndex = -1;
		rm.writeAttribute("role", "presentation");
		rm.write(" alt=''"); // accessibility requirement: write always empty alt attribute for decorative images
	} else {
		if (oImage.getAlt()) {
			rm.writeAttributeEscaped("alt", oImage.getAlt() || tooltip); // accessibility requirement: use tooltip for alt if alt is not set
		} else if (tooltip) {
			rm.writeAttributeEscaped("alt", tooltip);
		}
	}
	rm.writeAttribute("tabIndex", myTabIndex);
	
	// Dimensions

	if (oImage.getWidth() && oImage.getWidth() != '') {
		rm.addStyle("width", oImage.getWidth());
	}
	if (oImage.getHeight() && oImage.getHeight() != '') {
		rm.addStyle("height", oImage.getHeight());
	}
	rm.writeStyles();
	
	rm.write(" />"); // close the <img> element
};

}; // end of sap.m.ImageRenderer
if ( !jQuery.sap.isDeclared('sap.m.InputRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.InputRenderer");

/**
 * @class Input renderer.
 * @static
 */
sap.m.InputRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.m.InputRenderer.render = function(rm, oInput) {
	// return immediately if control is invisible
	var _placeholder = "";
	
	if (!oInput.getVisible()) {
		return;
	}

	var sType = oInput.getType();

	if(jQuery.os.ios) {
		rm.write("<input ");
	} else {
		rm.write("<div ");
	}

	rm.writeControlData(oInput);

	if (oInput.getWidth()) {
		rm.writeAttribute("style", "width:" + oInput.getWidth() + ";");
	}

	if (!jQuery.os.ios) {
		rm.addClass("sapMInput");

		if (!oInput.getEnabled()) {
			rm.addClass("sapMInputDisabled");
		}

		if (oInput.getValueState() == "Error") {
			rm.addClass("sapMInputError");
		} else if (oInput.getValueState() == "Warning") {
			rm.addClass("sapMInputWarning");
		}

		rm.writeClasses();
		rm.write(">");
		rm.write("<input id="+oInput.getId()+'-inner');
		if (oInput.getWidth()) {
			rm.writeAttribute("style", "width:" + oInput.getWidth() + ";");
		} else {
			rm.writeAttribute("style", "width: 100%;");
		}
	}
	if (!oInput.getEnabled()) {
		rm.writeAttribute ("disabled","disabled");
		if(sType == "Password"){
			// required for JAWS reader on password fields on desktop:
			rm.writeAttribute ("readonly","readonly");
		}
		rm.addClass("sapMInputDisabled");
	}


	if (oInput.getPlaceholder()) {
		_placeholder = oInput.getPlaceholder(); 
	}

	if (sType) {
		if (sType == "Date") {
			if (oInput.getPlaceholder()) {
			//TODO Warning in log: No placeholder for date!
			}
			if (oInput._datePickerAvailable){
				oInput._datepicker = true;
				rm.writeAttribute("type", "date");
			} else {
				oInput._datepicker = false;
				rm.writeAttribute("type", "text");
				if (oInput.getDateFormat()){
					_placeholder = oInput.getDateFormat(); 
				} else {
					_placeholder = "YYYY-MM-dd";
				}
				//TODO translate yyyymmdd
			}
		} else {
			rm.writeAttribute("type", sType.toLowerCase());
		}
	}

	if (_placeholder) {
		rm.writeAttributeEscaped("placeholder", _placeholder);
	}

	if (oInput.getMaxLength()) {
		rm.writeAttribute("maxLength", oInput.getMaxLength());
	}

	if (oInput.getValue()) {
		rm.writeAttributeEscaped("value", oInput._formatForRendering(oInput.getValue()));
	}

	if(!jQuery.os.ios) {
		rm.addClass("sapMInputInner");
		if (oInput.getValueState() == "Error") {
			rm.addClass("sapMInputErrorInner");
		} else if (oInput.getValueState() == "Warning") {
			rm.addClass("sapMInputWarningInner");
		}
	} else {
		rm.addClass("sapMInput");
		if (oInput.getValueState() == "Error") {
			rm.addClass("sapMInputError");
		} else if (oInput.getValueState() == "Warning") {
			rm.addClass("sapMInputWarning");
		}
	} 
	if (!oInput.getEnabled()) {
		rm.addClass("sapMInputDisabled");
	}

	rm.writeClasses();
	rm.write("></input>");

	if(!jQuery.os.ios) {
		rm.write("</div>");
	}
};


}; // end of sap.m.InputRenderer
if ( !jQuery.sap.isDeclared('sap.m.LabelRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

 
jQuery.sap.declare("sap.m.LabelRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class Label renderer. 
 * @static
 */
sap.m.LabelRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oLabel an object representation of the control that should be rendered
 */
sap.m.LabelRenderer.render = function(rm, oLabel){
	// return immediately if control is invisible
	if (!oLabel.getVisible()) {
		return;
	}

	// convenience variable
	var r = sap.m.LabelRenderer;
	var myStyles = "";
	
	// write the HTML into the render manager  
	rm.write("<label");
	rm.writeControlData(oLabel);
	
	// Styles
	rm.addClass("sapMLabel");    
	//set design to bold
	if (oLabel.getDesign() == sap.m.LabelDesign.Bold) {
		rm.addClass("sapMLabelBold");
	}
	
	if (oLabel.getLabelFor()) {
		var oFor = sap.ui.getCore().byId(oLabel.getLabelFor());
		rm.write(" for=\"");
		// for some controls the label must point to a special HTML element, not the outer one.
		if ( oFor && oFor.getIdForLabel) {
			rm.write(oFor.getIdForLabel());
		} else{
			rm.write(oLabel.getLabelFor());
		}
		rm.write("\"");
	}
	
	// Text direction
	var oTextDir = oLabel.getTextDirection();
	if (oTextDir) {
		rm.writeAttribute("dir", oTextDir);
	}
	
	// Style for width
	var sWidth = oLabel.getWidth();
	if(sWidth) {
		myStyles += "width:" + sWidth + ";";
	}
	
	// Style for text alignment
	var oTextAlign = oLabel.getTextAlign();
	if(oTextAlign) {
		myStyles += "text-align:" + r.getTextAlign(oTextAlign, oTextDir) + ";";
	}
	
	rm.writeAttribute("style", myStyles);
	rm.writeClasses();
	rm.write(">"); 
	
	// Write the label text
	if (oLabel.getText()) {
		rm.writeEscaped(oLabel.getText());
	}
	rm.write("</label>");
};

/**
 * Dummy inheritance of static methods/functions.
 * @see sap.ui.core.Renderer.getTextAlign
 * @private
 */
sap.m.LabelRenderer.getTextAlign = sap.ui.core.Renderer.getTextAlign;

}; // end of sap.m.LabelRenderer
if ( !jQuery.sap.isDeclared('sap.m.ListItemBaseRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.ListItemBaseRenderer");

/**
 * @class ListitemBase renderer.
 * @static
 */
sap.m.ListItemBaseRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *          oRenderManager the RenderManager that can be used for writing to the
 *          Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *          oControl an object representation of the control that should be
 *          rendered
 */
sap.m.ListItemBaseRenderer.render = function(rm, oLI) {
	// return immediately if control is invisible
	if (!oLI.getVisible()) {
		return;
	}

	rm.write("<li");
	rm.writeControlData(oLI);
	rm.addClass("sapMLIB");
	rm.addClass("sapMLIB-CTX");

	// LI attributes hook
	if (this.renderLIAttributes) {
		this.renderLIAttributes(rm, oLI);
	}
	

	// LI content hook
	if (this.renderLIContent) {

		// depending on the mode of the list a checkbox or radiobutton will be
		// rendered. If a switch between list modes happens, an animation will be
		// added for the selection area

		switch (oLI._mode) {
		case sap.m.ListMode.SingleSelect:
			var radioButton = oLI._getRadioButton((oLI.getId() + "-selectSingle"), oLI._listId + "_selectGroup");
			if(radioButton.getSelected())
				rm.addClass("sapMLIBSelected");
			rm.writeClasses();
			rm.write(">");
		
			rm.write("<div");
			rm.addClass("sapMLIBSelectS");
			if (oLI._oldMode === sap.m.ListMode.None) {
				rm.addClass("sapMLIBSelectAnimation");
			}
			rm.writeAttribute("id", oLI.getId() + "-mode");
			rm.writeClasses();
			rm.write(">");
			
			rm.renderControl(radioButton);
			rm.write("</div>");
			oLI._oldMode = oLI._mode;
			break;
		case sap.m.ListMode.MultiSelect:
			var checkBox = oLI._getCheckBox((oLI.getId() + "-selectMulti"));
			if(checkBox.getSelected())
				rm.addClass("sapMLIBSelected");
			
			rm.writeClasses();
			rm.write(">");
			rm.write("<div");
			rm.addClass("sapMLIBSelectM");
			if (oLI._oldMode === sap.m.ListMode.None) {
				rm.addClass("sapMLIBSelectAnimation");
			}
			rm.writeAttribute("id", oLI.getId() + "-mode");
			rm.writeClasses();
			rm.write(">");
			rm.renderControl(checkBox);
			rm.write("</div>");
			oLI._oldMode = oLI._mode;
			break;
		case sap.m.ListMode.Delete:
			rm.writeClasses();
			rm.write(">");
			rm.write("<div");
			rm.addClass("sapMLIBSelectD");
			if (oLI._oldMode === sap.m.ListMode.None ) {
				rm.addClass("sapMLIBSelectAnimation");
			}
			rm.writeAttribute("id", oLI.getId() + "-mode");
			rm.writeClasses();
			rm.write(">");
			var delIcon = oLI._getDelImage((oLI.getId() + "-imgDel"), "sapMLIBImgDel", "delete_icon.png");
			if (delIcon) {
				rm.renderControl(delIcon);
			}
			rm.write("</div>");
			oLI._oldMode = oLI._mode;		
			break;
		case sap.m.ListMode.None:
			rm.writeClasses();
			rm.write(">");
			if (oLI._oldMode && oLI._oldMode !== sap.m.ListMode.None) {
				rm.write("<div");
				rm.addClass("sapMLIBUnselectAnimation");
				rm.writeAttribute("id", oLI.getId() + "-mode");
				rm.writeClasses();
				rm.write(">");
				rm.write("</div>");
			}
			oLI._oldMode = oLI._mode;
			break;
		}

		rm.write("<div");
		rm.addClass("sapMLIBContent");

		var type = oLI.getType();
		var navIcon;
		switch (type) {
		case sap.m.ListType.Navigation:
			navIcon = oLI._getNavImage((oLI.getId() + "-imgNav"), "sapMLIBImgNav", "disclosure_indicator.png");
			break;
		case sap.m.ListType.Detail:
		case sap.m.ListType.DetailAndActive:
			navIcon = oLI._getNavImage((oLI.getId() + "-imgDet"), "sapMLIBImgDet", "detail_disclosure.png", "detail_disclosure_pressed.png");
			break;
		case sap.m.ListType.Inactive:
		case sap.m.ListType.Active:
			// there will be a margin on the right, if no navigation icon is shown
			rm.addClass("sapMLIBContentMargin");
		default:
		}
		rm.writeClasses();
		rm.write(">");
		this.renderLIContent(rm, oLI);
		rm.write("</div>");

		if (navIcon)
			rm.renderControl(navIcon);
		}
	else{
		rm.writeClasses();
		rm.write(">");
	}
	rm.write("</li>");
};

}; // end of sap.m.ListItemBaseRenderer
if ( !jQuery.sap.isDeclared('sap.m.ListRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.ListRenderer");

/**
 * @class List renderer.
 * @static
 */
sap.m.ListRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *          oRenderManager the RenderManager that can be used for writing to the
 *          Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *          oControl an object representation of the control that should be
 *          rendered
 */
sap.m.ListRenderer.render = function(rm, oControl) {
	// return immediately if control is invisible
	if (!oControl.getVisible()) {
		return;
	}

	var bInset = oControl.getInset();
	
	rm.write("<div");
	rm.addClass("sapMList");
	if(bInset){
		rm.addClass("sapMListInsetBG");
	}
	rm.writeClasses();
	rm.writeControlData(oControl);
	if (oControl.getWidth()) {
		rm.addStyle("width", oControl.getWidth());
		rm.writeStyles();
	}
	rm.write(">");

	// header
	if (oControl.getHeaderText()) {
		rm.write("<header");
		if (bInset)
			rm.addClass("sapMListHdrInset");
		else
			rm.addClass("sapMListHdr");
		rm.writeClasses();
		rm.write(">");
		rm.writeEscaped(oControl.getHeaderText());
		rm.write("</header>");
	}

	rm.write("<ul");
	// no header or footer no div
	rm.addClass("sapMListUl");

	if (bInset) {
		rm.addClass("sapMListInset");
		if (oControl.getHeaderText()) {
			rm.addClass("sapMListInsetHdr");
		}
		if (oControl.getFooterText()) {
			rm.addClass("sapMListInsetFtr");
		}
	}
	rm.writeClasses();
	rm.write(">");

	// check if selection mode has changed - remove current selection
	if (oControl._mode != sap.m.ListMode.None && oControl._mode != oControl.getMode()) {
		oControl._removeCurrentSelection();
	}
	
	//reset selection when changing interaction mode...maybe avoid rerender and therefore this won't be needed...but a switch is anyway only for testing purposes
	if (oControl._includeItemInSelection != oControl.getIncludeItemInSelection()) {
		oControl._removeCurrentSelection();
		oControl._includeItemInSelection = oControl.getIncludeItemInSelection();
	};
	
	oControl._previousSingleSelect = null;
	// set new current selection mode
	oControl._mode = oControl.getMode();

	// render child controls
	var aItems = oControl.getItems();
	for ( var i = 0; i < aItems.length; i++) {
		aItems[i]._mode = oControl.getMode();
		aItems[i]._includeItemInSelection = oControl.getIncludeItemInSelection();
		aItems[i]._select = oControl._select;
		aItems[i]._delete = oControl._delete;
		aItems[i]._listId = oControl.getId();
		rm.renderControl(aItems[i]);
	}

	rm.write("</ul>");

	// footer
	if (oControl.getFooterText()) {
		rm.write("<footer");
		if (bInset)
			rm.addClass("sapMListFtrInset");
		else
			rm.addClass("sapMListFtr");
		rm.writeClasses();
		rm.write(">");
		rm.writeEscaped(oControl.getFooterText());
		rm.write("</footer>");
	}

	rm.write("</div>");
};

}; // end of sap.m.ListRenderer
if ( !jQuery.sap.isDeclared('sap.m.NavContainerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.NavContainerRenderer");

/**
 * @class NavContainer renderer. 
 * @static
 */
sap.m.NavContainerRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.NavContainerRenderer.render = function(rm, oControl) { 
	// return immediately if control is invisible
	if (!oControl.getVisible()) {
		return;
	}
	
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapMNav");
	rm.writeClasses();
	rm.addStyle("width", oControl.getWidth());
	rm.addStyle("height", oControl.getHeight());
	rm.writeStyles();
	rm.write(">"); // div element

	var oContent = oControl.getCurrentPage();
	if (oContent) {
		rm.renderControl(oContent);
	}

	rm.write("</div>");
};

}; // end of sap.m.NavContainerRenderer
if ( !jQuery.sap.isDeclared('sap.m.PageRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.PageRenderer");

/**
 * @class Page renderer. 
 * @static
 */
sap.m.PageRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.PageRenderer.render = function(rm, oPage) {
	var hdr = null;
	if (oPage.getShowHeader()) {
		hdr = oPage._getAnyHeader();
	}
	var oSubHeader = oPage.getSubHeader();
	
	var oFooter = oPage.getFooter();
	rm.write("<div");
	rm.writeControlData(oPage);
	rm.addClass("sapMPage");
	if (oFooter){
		rm.addClass("sapMPageWithFooter"); //it is used in the PopOver to remove additional margin bottom for page with footer 
	}
	rm.writeClasses(); 
	rm.write(">");

	// render header
	if (hdr){
		rm.renderControl(hdr);
	}
	
	if (oSubHeader){
		oSubHeader._context = 'header';
		rm.renderControl(oSubHeader.addStyleClass('sapMPageSubHeader'));
	}
	// render child controls
	var bScrolling = oPage._hasScrolling();
	var sBgDesign = oPage.getBackgroundDesign();
	var sPageBgOuter = bScrolling ? "" : " class='sapMPageBg" + sBgDesign +"'";
	var sPageBgInner = bScrolling ? " sapMPageBg" + sBgDesign : "";
	rm.write("<section id='" + oPage.getId() + "-cont'" + sPageBgOuter + ">");
	if (bScrolling) {
		rm.write("<div id='" + oPage.getId() + "-scroll' class='sapMPageScroll" + sPageBgInner + "'>");
	}

	// render child controls
	var aContent = oPage.getContent();
	var l = aContent.length;
	for (var i = 0; i < l; i++) {
		rm.renderControl(aContent[i]);
	}

	if (bScrolling) {
		rm.write("</div>");
	}
	rm.write("</section>");
	
	// render footer Element
	if (oFooter) {
		oFooter._context = 'footer';
		rm.renderControl(oFooter);
	}
	rm.write("</div>");
};

}; // end of sap.m.PageRenderer
if ( !jQuery.sap.isDeclared('sap.m.PopoverRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.m.PopoverRenderer");

/**
 * @class Popover renderer. 
 * @static
 */
sap.m.PopoverRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.PopoverRenderer.render = function(rm, oControl){ 
	var sId = oControl.getId(),
		i = 0,
		contents = oControl.getContent(),
		oFooter = oControl.getFooter(),
		oHeaderControl;
		
	if(oControl.getShowHeader()){
		oHeaderControl = oControl._getAnyHeader();
	}

	//container
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapMPopover");
	if(oHeaderControl){
		rm.addClass("sapMPopoverWithBar")
	}else{
		rm.addClass("sapMPopoverWithoutBar");
	}
	if(oControl._hasNavContent()){
		rm.addClass("sapMPopoverNav");
	}
	if(oFooter){
		rm.addClass("sapMPopoverWithFooter");
	}
	
	if(oControl.getPlacement() === sap.m.PlacementType.Top){
		rm.addClass("sapMPopoverPlacedTop");
	}
	rm.writeClasses();
	rm.write(">");
	
	
	if(!jQuery.os.ios){
		//arrow
		rm.write("<span");
		rm.writeAttribute("id", sId+"-arrow");
		rm.addClass("sapMPopoverArr");
		rm.writeClasses();
		rm.write("></span>");//arrow tip
	}

	//header
	if(oHeaderControl){
		rm.renderControl(oControl._getAnyHeader());
	}//header
	
	// content container
	rm.write("<div");
	rm.writeAttribute("id",sId + "-cont");
	rm.addClass("sapMPopoverCont");
	rm.writeClasses();
//	rm.writeAttribute("tabindex","-1");
	rm.write(">");
	for(i = 0 ; i < contents.length ; i++){
		rm.renderControl(contents[i]);
	}
	
	rm.write("</div>");//content container
	
	//footer
	if (oFooter) {
		oFooter._context = 'footer';
		rm.renderControl(oFooter);
	}//footer
	
	if(jQuery.os.ios){
		//arrow
		rm.write("<span");
		rm.writeAttribute("id", sId+"-arrow");
		rm.addClass("sapMPopoverArr");
		rm.writeClasses();
		rm.write("></span>");//arrow tip
	}
	

	rm.write("</div>");// container
};

}; // end of sap.m.PopoverRenderer
if ( !jQuery.sap.isDeclared('sap.m.RadioButtonRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.RadioButtonRenderer");

/**
 * @class RadioButton renderer. 
 * @static
 */
sap.m.RadioButtonRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oRadioButton an object representation of the control that should be rendered
 */
sap.m.RadioButtonRenderer.render = function(oRm, oRadioButton){ 
	// Return immediately if control is invisible
	if (!oRadioButton.getVisible()) {
		return;
	}

	// get control properties
	var bEnabled = oRadioButton.getEnabled();
	var bReadOnly = false;
	var myTabIndex = 0;

	// Radio Button style class
	oRm.addClass("sapMRb");

	// write the HTML into the render manager
	oRm.write("<div");						// Control - DIV
    oRm.writeControlData(oRadioButton);

	// ARIA
	oRm.writeAccessibilityState(oRadioButton, {
		role: "radio",
		checked: oRadioButton.getSelected() === true,
		disabled: !bEnabled
	});

	// Add classes and properties depending on the state
	if (oRadioButton.getSelected()) {
		oRm.addClass("sapMRbSel");
	}

	if (!bEnabled) {
		bReadOnly = true;
		oRm.addClass("sapMRbDis");
		myTabIndex = -1;
	}

	oRm.writeClasses();
	oRm.writeAttribute("tabIndex", myTabIndex);
    oRm.write(">");		// DIV element
    
     oRm.write("<div class='sapMRbB'>");
    if(jQuery.os.android || jQuery.os.blackberry) {
	    oRm.write("<div");	
	    oRm.addClass("sapMRbBOut");
	    oRm.writeClasses();
	    oRm.write(">");		// DIV element
	    oRm.write("<div");	
	    oRm.addClass("sapMRbBInn");
	    oRm.writeClasses();
	    oRm.write(">");		// DIV element
    }
    
	// Write the real - potentially hidden - HTML RadioButton element
	oRm.write("<input type='radio' tabindex='-1'");
	oRm.writeAttribute("id", oRadioButton.getId() + "-RB");
	oRm.writeAttribute("name", oRadioButton.getGroupName());
	if (oRadioButton.getSelected()) {
		oRm.writeAttribute("checked", "checked");
	}
	if (!bEnabled) {
		oRm.writeAttribute("disabled", "disabled")
	}
	//oRm.writeAttributeEscaped("title", oRadioButton.getTooltip_AsString());
	if(bReadOnly) {
		oRm.writeAttribute("readonly", "readonly");
		oRm.writeAttribute("disabled", "disabled");
	}	
	oRm.write(" />");	// Close RadioButton-input-element
	if(jQuery.os.android || jQuery.os.blackberry) {
		oRm.write("</div></div>");	// Control - DIVs close
	}
	oRm.write("</div>");
	oRm.renderControl(oRadioButton._oLabel);
	oRm.write("</div>");	// Control - DIVs close
};
}; // end of sap.m.RadioButtonRenderer
if ( !jQuery.sap.isDeclared('sap.m.ScrollContainerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.ScrollContainerRenderer");

/**
 * @class ScrollContainer renderer. 
 * @static
 */
sap.m.ScrollContainerRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.ScrollContainerRenderer.render = function(oRm, oControl) { 
	// return immediately if control is invisible
	if (!oControl.getVisible()) {
		return;
	}

	oRm.write("<div");
	oRm.writeControlData(oControl);

	var width = oControl.getWidth(),
	height = oControl.getHeight();
	if (width) {
		oRm.addStyle("width", width);
	}
	if (height) {
		oRm.addStyle("height", height);
	}
	oRm.writeStyles();

	if (oControl.getVertical()) {
		if (!oControl.getHorizontal()) {
			oRm.addClass("sapMScrollContV");
		} else {
			oRm.addClass("sapMScrollContVH");
		}
	} else if (oControl.getHorizontal()) {
		oRm.addClass("sapMScrollContH");
	}

	oRm.addClass("sapMScrollCont");
	oRm.writeClasses();
	oRm.write("><div id='" + oControl.getId() + "-scroll' class='sapMScrollContScroll'>");

	// render child controls
	var aContent = oControl.getContent(), 
	l = aContent.length;
	for (var i = 0; i < l; i++) {
		oRm.renderControl(aContent[i]);
	}

	oRm.write("</div></div>");
};

}; // end of sap.m.ScrollContainerRenderer
if ( !jQuery.sap.isDeclared('sap.m.SearchFieldRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.SearchFieldRenderer");

/**
 * @class SearchField renderer. 
 * @static
 */
sap.m.SearchFieldRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.SearchFieldRenderer.render = function(oRenderManager, oSF){ 
	// render nothing if control is invisible
	if (!oSF.getVisible()) {
		return;
	}

	var rm = oRenderManager;
	var bShowMagnifier = oSF.getShowMagnifier();

	// container
	rm.write("<div");
	rm.writeControlData(oSF);
	rm.addClass("sapMSF");
	if (bShowMagnifier) { rm.addClass("sapMSFM"); }
	if(jQuery.os.android && !(jQuery.browser.chrome)){
		if(jQuery.os.fVersion < 3){
			rm.addClass("sapMSFA2"); // specific Android 2.+ rendering
		} else if (jQuery.os.fVersion <= 4){
			rm.addClass("sapMSFA4"); // specific Android 4.0* rendering
		}
	}
	rm.writeClasses();
	rm.write(">");

	// 1. magnifier icon
	if (bShowMagnifier) { rm.write('<div class="sapMSFMG"></div>'); }
	
	// 2. Input type="search"
	rm.write('<input type="search"');
	rm.writeAttribute("id", oSF.getId() + "-I");

	rm.addClass("sapMSFI");

	if (jQuery.os.ios && jQuery.os.fVersion > 5) {
			rm.addClass("sapMSFIIos6"); // specific Ios6+ rendering
	}

	if (!oSF.getEnabled()){
		// hide the reset button even if value is not empty: user cannot press it
		rm.addClass("sapMSFIDisabled");
	}
	rm.writeClasses();

	if (!oSF.getEnabled()) { rm.writeAttribute("disabled","disabled"); }
	if (bShowMagnifier) { rm.writeAttribute("results", 0); }
	if (oSF.getPlaceholder()) { rm.writeAttributeEscaped("placeholder", oSF.getPlaceholder()); }
	if (oSF.getMaxLength()) { rm.writeAttribute("maxLength", oSF.getMaxLength()); }
	if (oSF.getValue()) { rm.writeAttributeEscaped("value", oSF.getValue()); }
	if (oSF.getWidth()) { rm.writeAttribute("style", "width:" + oSF.getWidth() + ";"); }

	rm.write(">");

	
	// 3. Reset button (transparent, lies over "X" of input, reacts on touch correctly)
	rm.write("<div");
	rm.writeAttribute("id", oSF.getId() + "-reset");
	rm.addClass("sapMSFR");
	rm.writeClasses();
	rm.write("></div>");

	rm.write("</div>");

};

}; // end of sap.m.SearchFieldRenderer
if ( !jQuery.sap.isDeclared('sap.m.SegmentedButtonRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.SegmentedButtonRenderer");

/**
 * @class Segmented renderer. 
 * @static
 */
sap.m.SegmentedButtonRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.SegmentedButtonRenderer.render = function(rm, oControl){ 
	// return immediately if control is invisible
	if (!oControl.getVisible()) {
		return;
	}

	var aItems = oControl.getButtons(),
	aItemsLength = aItems.length;
	if(!oControl.getVisible()) {
		return;
	}
	// write the HTML into the render manager
	rm.write("<ul");
	rm.addClass("sapMSegB");
	rm.writeClasses();
	if (oControl.getWidth() && oControl.getWidth() !== '') {
		rm.addStyle('width', oControl.getWidth());
	}
	rm.writeStyles();
	rm.writeControlData(oControl);
	rm.write(">");
	
	for (var i = 0; i < aItemsLength; i++) {
		var oItem = aItems[i];
		
		rm.write("<li");
		rm.writeControlData(oItem);
		rm.addClass("sapMSegBBtn");
		if(oControl.getSelectedButton() === oItem.getId()) {
			rm.addClass("sapMSegBBtnSel");
		}
		if(!oItem.getEnabled()) {
			rm.addClass("sapMSegBBtnDis");
		}
		rm.writeClasses();
		var tooltip = oItem.getTooltip_AsString();
		if (tooltip) {
			rm.writeAttributeEscaped("title", tooltip);
		}
		rm.write('>');
		if(oItem.getIcon() === '' && oItem.getText() !== '') {
			rm.writeEscaped(oItem.getText(), false);
		} else if (oItem.getIcon() !== '' && oItem.getText() === '') {

		var oImage = oItem._getImage((oItem.getId() + "-img"), oItem.getIcon());
		oImage.mProperties.height = "1.5em";
		oImage.mProperties.width = "1.5em";
			rm.renderControl(oImage);	

		} else {
			jQuery.sap.log.error("SEGMENTED: "+oItem.getId()+": Icon and Label is not allowed");
		}
		rm.write("</li>");
	}
	rm.write("</ul>");
	
};

}; // end of sap.m.SegmentedButtonRenderer
if ( !jQuery.sap.isDeclared('sap.m.SelectRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.SelectRenderer");

/**
 * @class Select renderer.
 * @static
 */
sap.m.SelectRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oSlt an object representation of the select that should be rendered
 */
sap.m.SelectRenderer.render = function(oRm, oSlt) {
	var	sName = oSlt.getName(),
		sTitle = oSlt.getTitle(),
		aItems = oSlt.getItems(),
		oSelectedItem = oSlt.getSelectedItem(),
		sSelectedItemText = (oSelectedItem instanceof sap.ui.core.Item) ? oSelectedItem.getText() : oSlt._sNoData,
		sSelectedItemId = oSlt.getAssociation("selectedItem"),
		aItemsLength = aItems.length,
		i;

	// suppress rendering if not visible
	if (!oSlt.getVisible()) {
		return;
	}

	oRm.write("<div");
	oRm.addClass("sapMSlt");

	if (!oSlt.getEnabled()) {
		oRm.addClass("sapMSltDisabled");
	}

	oRm.addStyle("width", oSlt.getWidth());
	oRm.addStyle("max-width", oSlt.getMaxWidth());

	oRm.writeControlData(oSlt);

	oRm.writeStyles();
	oRm.writeClasses();

	oRm.write(">");
		oRm.write('<span class="sapMSltText">');
		oRm.writeEscaped(sSelectedItemText);
		oRm.write('</span>');

		oRm.write('<span class="sapMSltIcon"></span>');

		if (aItemsLength !== 0) {
			oRm.write("<select");

			if (sName !== "") {
				oRm.writeAttributeEscaped("name", sName);
			}

			if (sTitle !== "") {
				oRm.writeAttributeEscaped("title", sTitle);
			}

			if (!oSlt.getEnabled()) {
				oRm.write(" disabled");
			}

			oRm.write(">");

				// rendering items
				for (i = 0; i < aItemsLength; i++) {
					oRm.write("<option");
						oRm.writeAttribute("id", aItems[i].getId());
						oRm.writeAttributeEscaped("value", aItems[i].getKey());

						if (aItems[i].getId() === sSelectedItemId) {
							oRm.write(" selected");
						}

						if (!aItems[i].getEnabled()) {
							oRm.write(" disabled");
						}

						oRm.write(">");
						oRm.writeEscaped(aItems[i].getText());
					oRm.write("</option>");
				}

			oRm.write("</select>");
		}

	oRm.write("</div>");
};
}; // end of sap.m.SelectRenderer
if ( !jQuery.sap.isDeclared('sap.m.SliderRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.SliderRenderer");

/**
 * @class Slider renderer.
 * @static
 */
sap.m.SliderRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oSld an object representation of the slider that should be rendered
 */
sap.m.SliderRenderer.render = function(oRm, oSld) {
	var iMin = oSld.getMin(),
		iMax = oSld.getMax(),
		iStep = oSld.getStep(),
		sName = oSld.getName(),
		bEnabled = oSld.getEnabled();

	// avoid render when not visible
	if (!oSld.getVisible()) {
		return;
	}

	oRm.write("<div");
	oRm.addClass("sapMSldCont");
	oRm.addStyle("width", oSld.getWidth());
	oRm.writeClasses();
	oRm.writeStyles();
	oRm.writeControlData(oSld);
	oRm.write(">");
		// render input range for screen readers
		oRm.write('<input type="range"');

			if (!bEnabled) {
				oRm.write("disabled");
			}

			if (sName !== "") {
				oRm.writeAttributeEscaped("name", sName);
			}

			oRm.writeAttribute("min", iMin);
			oRm.writeAttribute("max", iMax);
			oRm.writeAttribute("step", iStep);
			oRm.writeAttribute("value", oSld.getValue());
			oRm.write("/>");

		oRm.writeClasses();

		// render HTML
		oRm.write('<div');
			oRm.addClass("sapMSld");

			if (oSld.getProgress()) {
				oRm.addClass("sapMSldProgress");
				oRm.addStyle("-webkit-background-size", oSld.iProgressValue + oSld._sBackgroundSizeRemainder);
			}

			if (!bEnabled) {
				oRm.addClass("sapMSldDisabled");
			}

			oRm.writeClasses();
			oRm.writeStyles();

		oRm.write(">");
				// render slider thumb
				oRm.write('<span class="sapMSldThumb"');
					oRm.addStyle("left", oSld.iProgressValue + "%");
					oRm.writeStyles();
				oRm.write('><span></span></span>')
		oRm.write("</div>");
	oRm.write("</div>");
};

}; // end of sap.m.SliderRenderer
if ( !jQuery.sap.isDeclared('sap.m.StandardListItemRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.StandardListItemRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class StandardListItem renderer.
 * @static
 */
sap.m.StandardListItemRenderer = sap.ui.core.Renderer.extend(sap.m.ListItemBaseRenderer);

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *          oRenderManager the RenderManager that can be used for writing to the
 *          Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *          oControl an object representation of the control that should be
 *          rendered
 */
sap.m.StandardListItemRenderer.renderLIAttributes = function(rm, oLI) {
	rm.addClass("sapMSLI");
};

sap.m.StandardListItemRenderer.renderLIContent = function(rm, oLI) {

	// image
	if (oLI.getIcon()) {
		if (oLI.getIconInset()) {
			rm.renderControl(oLI._getImage((oLI.getId() + "-img"), "sapMSLIImg", oLI.getIcon(), oLI.getIconDensityAware()));
		} else {
			rm.renderControl(oLI._getImage((oLI.getId() + "-img"), "sapMSLIImgThumb", oLI.getIcon(), oLI.getIconDensityAware()));
		}
	}

	var isDescription = oLI.getTitle() && oLI.getDescription();

	if (isDescription) {
		rm.write("<div");
		rm.addClass("sapMSLIDiv");
		rm.writeClasses();
		rm.write(">");
	}

	// List item text (also written when no title for keeping the space)
	rm.write("<h1");
	if (isDescription) {
		rm.addClass("sapMSLITitle");
	} else {
		rm.addClass("sapMSLIDiv");
		rm.addClass("sapMSLITitleOnly");
	}

	rm.writeClasses();
	rm.write(">");
	rm.writeEscaped(oLI.getTitle());
	rm.write("</h1>");

	// List item text
	if (isDescription) {
		rm.write("<p");
		rm.addClass("sapMSLIDescription");
		rm.writeClasses();
		rm.write(">");
		rm.writeEscaped(oLI.getDescription());
		rm.write("</p>");
	}

	if (isDescription) {
		rm.write("</div>");
	}
};

}; // end of sap.m.StandardListItemRenderer
if ( !jQuery.sap.isDeclared('sap.m.SwitchRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.SwitchRenderer");

/**
 * @class Switch renderer.
 * @static
 */
sap.m.SwitchRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oSwt an object representation of the control that should be rendered
 */
sap.m.SwitchRenderer.render = function(oRm, oSwt) {
	var bState = oSwt.getState(),
		sState = (bState) ? oSwt._sOn : oSwt._sOff;

	// avoid render when not visible
	if (!oSwt.getVisible()) {
		return;
	}

	oRm.write('<div');
	oRm.writeControlData(oSwt);
	oRm.addClass('sapMSwt');

	(bState) ? oRm.addClass('sapMSwtOn') : oRm.addClass('sapMSwtOff');

	if (!oSwt.getEnabled()) {
		oRm.addClass('sapMSwtDisabled');
	}

	oRm.writeClasses();
	oRm.write('>');

	// renders some extra HTML for iOS
	if(jQuery.os.ios) {
		oRm.write('<span class="sapMSwtTextOn">');
		oRm.write(oSwt._sOn);
		oRm.write('</span>');
		oRm.write('<span class="sapMSwtTextOff">');
		oRm.write(oSwt._sOff);
		oRm.write('</span>');
	}

	oRm.write('<input type="checkbox"');
	
	if (oSwt.getName() !== "") {
		oRm.writeAttributeEscaped("name", oSwt.getName());
	}

	oRm.writeAttribute("id", oSwt.getId() + "-input");

	if (bState) {
		oRm.writeAttribute('checked', 'checked');
	}

	if (!oSwt.getEnabled()) {
		oRm.writeAttribute('disabled', 'disabled');
	}

	oRm.writeAttribute('value', sState);
	oRm.write('/>');
	oRm.write('<div class="sapMSwtBtn"');
	oRm.writeAttribute('data-sap-ui-swt', sState);
	oRm.write('></div>');
	oRm.write("</div>");
};
}; // end of sap.m.SwitchRenderer
if ( !jQuery.sap.isDeclared('sap.m.TextRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.m.Text
jQuery.sap.declare("sap.m.TextRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class Text renderer
 * @author SAP AG
 * @static
 */
sap.m.TextRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.core.Control} oText An object representation of the control that should be rendered.
 */
sap.m.TextRenderer.render = function(oRenderManager, oText) {
	// return immediately if control is invisible
	if (!oText.getVisible()) {
		return;
	}

	var rm = oRenderManager;

	// add styles for non-wrapping
	if(!oText.getWrapping()){
		rm.addStyle("white-space", "nowrap");
		rm.addStyle("overflow", "hidden");
		rm.addStyle("text-overflow", "ellipsis");
	}

	// add styles for width
	if (oText.getWidth() && oText.getWidth() != '') {
		rm.addStyle("width", oText.getWidth());
	}

	// start writing html
	rm.write("<span");
	rm.writeControlData(oText);
	rm.addClass("sapMText");

	// write direction
	var oTextDir = oText.getTextDirection();
	if (oTextDir) {
		rm.writeAttribute("dir", oTextDir);
	}

	// write alignment
	var oTextAlign = oText.getTextAlign();
	if (oTextAlign) {
		rm.addStyle("text-align", sap.m.TextRenderer.getTextAlign(oTextAlign, oTextDir));
	}

	// finish writing html
	rm.writeClasses();
	rm.writeStyles();
	rm.write(">");
	rm.writeEscaped(oText.getText(), true);
	rm.write("</span>");
};

/**
 * Dummy inheritance of static methods/functions.
 * @see sap.ui.core.Renderer.getTextAlign
 * @private
 */
sap.m.TextRenderer.getTextAlign = sap.ui.core.Renderer.getTextAlign;
}; // end of sap.m.TextRenderer
if ( !jQuery.sap.isDeclared('sap.m.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.m (1.8.4)
 */
jQuery.sap.declare("sap.m.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * SAPUI5 library with controls specialized for mobile devices.
 *
 * @namespace
 * @name sap.m
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
  name : "sap.m",
  dependencies : ["sap.ui.core"],
  types: [
    "sap.m.ButtonType",
    "sap.m.FlexAlignContent",
    "sap.m.FlexAlignItems",
    "sap.m.FlexAlignSelf",
    "sap.m.FlexDirection",
    "sap.m.FlexJustifyContent",
    "sap.m.FlexRendertype",
    "sap.m.FlexWrap",
    "sap.m.InputType",
    "sap.m.LabelDesign",
    "sap.m.ListMode",
    "sap.m.ListType",
    "sap.m.PageBackgroundDesign",
    "sap.m.PlacementType"
  ],
  interfaces: [],
  controls: [
    "sap.m.App",
    "sap.m.Bar",
    "sap.m.BusyDialog",
    "sap.m.BusyIndicator",
    "sap.m.Button",
    "sap.m.Carousel",
    "sap.m.CheckBox",
    "sap.m.CustomListItem",
    "sap.m.Dialog",
    "sap.m.DisplayListItem",
    "sap.m.FlexBox",
    "sap.m.HBox",
    "sap.m.Image",
    "sap.m.Input",
    "sap.m.InputListItem",
    "sap.m.Label",
    "sap.m.List",
    "sap.m.ListItemBase",
    "sap.m.NavContainer",
    "sap.m.Page",
    "sap.m.Popover",
    "sap.m.RadioButton",
    "sap.m.ScrollContainer",
    "sap.m.SearchField",
    "sap.m.SegmentedButton",
    "sap.m.Select",
    "sap.m.Slider",
    "sap.m.StandardListItem",
    "sap.m.Switch",
    "sap.m.Text",
    "sap.m.VBox"
  ],
  elements: [
    "sap.m.FlexItemData"
  ],
  version: "1.8.4"});

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.ButtonType.
jQuery.sap.declare("sap.m.ButtonType");

/**
 * @class Different types for a button (predefined types)
 *
 * @version 1.8.4
 * @static
 * @public
 */
sap.m.ButtonType = {
  
    /**
     * default type (no special styling) 
     * @public
     */
    Default : "Default",

    /**
     * back type (back navigation button for header) 
     * @public
     */
    Back : "Back",

    /**
     * accept type (blue button) 
     * @public
     */
    Accept : "Accept",

    /**
     * reject style (red button) 
     * @public
     */
    Reject : "Reject",

    /**
     * transparent type 
     * @public
     */
    Transparent : "Transparent",

    /**
     * up type (up navigation button for header) 
     * @public
     */
    Up : "Up",

    /**
     * Unstyled type (no styling) 
     * @public
     */
    Unstyled : "Unstyled"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.FlexAlignContent.
jQuery.sap.declare("sap.m.FlexAlignContent");

/**
 * @class Available options for the layout of elements along the cross axis for multi-line flexbox layouts.
 *
 * @version 1.8.4
 * @static
 * @public
 */
sap.m.FlexAlignContent = {
  
    /**
     * Lines are packed toward the start of the flex box. 
     * @public
     */
    Start : "Start",

    /**
     * Lines are packed toward the end of the flex box. 
     * @public
     */
    End : "End",

    /**
     * Lines are packed toward the center of the flex box. 
     * @public
     */
    Center : "Center",

    /**
     * Lines are evenly distributed in the flex box. 
     * @public
     */
    SpaceBetween : "SpaceBetween",

    /**
     * Lines are evenly distributed in the flex box, with half-size spaces on either end. 
     * @public
     */
    SpaceAround : "SpaceAround",

    /**
     * Lines stretch to take up the remaining space. 
     * @public
     */
    Stretch : "Stretch",

    /**
     * Inherits the value from its parent. 
     * @public
     */
    Inherit : "Inherit"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.FlexAlignItems.
jQuery.sap.declare("sap.m.FlexAlignItems");

/**
 * @class Available options for the layout of all elements along the cross axis of the flexbox layout.
 *
 * @version 1.8.4
 * @static
 * @public
 */
sap.m.FlexAlignItems = {
  
    /**
     * The cross-start margin edges of the box items are placed flush with the cross-start edge of the line. 
     * @public
     */
    Start : "Start",

    /**
     * The cross-start margin edges of the box items are placed flush with the cross-end edge of the line. 
     * @public
     */
    End : "End",

    /**
     * The box items' margin boxes are centered in the cross axis within the line. 
     * @public
     */
    Center : "Center",

    /**
     * If the box items' inline axes are the same as the cross axis, this value is identical to ?start?. Otherwise, it participates in baseline alignment: all participating box items on the line are aligned such that their baselines align, and the item with the largest distance between its baseline and its cross-start margin edge is placed flush against the cross-start edge of the line. 
     * @public
     */
    Baseline : "Baseline",

    /**
     * Make the cross size of the items' margin boxes as close to the same size as the line as possible. 
     * @public
     */
    Stretch : "Stretch",

    /**
     * Inherits the value from its parent. 
     * @public
     */
    Inherit : "Inherit"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.FlexAlignSelf.
jQuery.sap.declare("sap.m.FlexAlignSelf");

/**
 * @class Available options for the layout of individual elements along the cross axis of the flexbox layout overriding the default alignment.
 *
 * @version 1.8.4
 * @static
 * @public
 */
sap.m.FlexAlignSelf = {
  
    /**
     * Takes up the value of alignItems from the parent FlexBox 
     * @public
     */
    Auto : "Auto",

    /**
     * The cross-start margin edges of the box item is placed flush with the cross-start edge of the line. 
     * @public
     */
    Start : "Start",

    /**
     * The cross-start margin edges of the box item is placed flush with the cross-end edge of the line. 
     * @public
     */
    End : "End",

    /**
     * The box item's margin box is centered in the cross axis within the line. 
     * @public
     */
    Center : "Center",

    /**
     * If the box item's inline axis is the same as the cross axis, this value is identical to ?start?. Otherwise, it participates in baseline alignment: all participating box items on the line are aligned such that their baselines align, and the item with the largest distance between its baseline and its cross-start margin edge is placed flush against the cross-start edge of the line. 
     * @public
     */
    Baseline : "Baseline",

    /**
     * Make the cross size of the item's margin box as close to the same size as the line as possible. 
     * @public
     */
    Stretch : "Stretch",

    /**
     * Inherits the value from its parent. 
     * @public
     */
    Inherit : "Inherit"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.FlexDirection.
jQuery.sap.declare("sap.m.FlexDirection");

/**
 * @class Available directions for flex layouts.
 *
 * @version 1.8.4
 * @static
 * @public
 */
sap.m.FlexDirection = {
  
    /**
     * Elements are layed out along the direction of the inline axis (text direction). 
     * @public
     */
    Row : "Row",

    /**
     * Elements are layed out along the direction of the block axis (usually top to bottom). 
     * @public
     */
    Column : "Column",

    /**
     * Elements are layed out along the reverse direction of the inline axis (against the text direction). 
     * @public
     */
    RowReverse : "RowReverse",

    /**
     * Elements are layed out along the reverse direction of the block axis (usually bottom to top). 
     * @public
     */
    ColumnReverse : "ColumnReverse",

    /**
     * Inherits the value from its parent. 
     * @public
     */
    Inherit : "Inherit"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.FlexJustifyContent.
jQuery.sap.declare("sap.m.FlexJustifyContent");

/**
 * @class Available options for the layout of elements along the main axis of the flexbox layout.
 *
 * @version 1.8.4
 * @static
 * @public
 */
sap.m.FlexJustifyContent = {
  
    /**
     * Box items are packed toward the start of the line. 
     * @public
     */
    Start : "Start",

    /**
     * Box items are packed toward the end of the line. 
     * @public
     */
    End : "End",

    /**
     * Box items are packed toward the center of the line. 
     * @public
     */
    Center : "Center",

    /**
     * Box items are evenly distributed in the line. 
     * @public
     */
    SpaceBetween : "SpaceBetween",

    /**
     * Box items are evenly distributed in the line, with half-size spaces on either end. 
     * @public
     */
    SpaceAround : "SpaceAround",

    /**
     * Inherits the value from its parent. 
     * @public
     */
    Inherit : "Inherit"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.FlexRendertype.
jQuery.sap.declare("sap.m.FlexRendertype");

/**
 * @class Determines the type of HTML elements used for rendering controls.
 *
 * @version 1.8.4
 * @static
 * @public
 */
sap.m.FlexRendertype = {
  
    /**
     * DIV elements are used for rendering 
     * @public
     */
    Div : "Div",

    /**
     * Unordered lists are used for rendering. 
     * @public
     */
    List : "List"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.FlexWrap.
jQuery.sap.declare("sap.m.FlexWrap");

/**
 * @class Available wrap options for flexbox layouts
 *
 * @version 1.8.4
 * @static
 * @public
 */
sap.m.FlexWrap = {
  
    /**
     * Items wrap in the direction of the cross-axis when space along the main axis is insufficient. Makes the flexbox container multi-line. 
     * @public
     */
    Wrap : "Wrap",

    /**
     * Items do not wrap even when space along the main axis is insufficient. Makes the flexbox container single-line. 
     * @public
     */
    Nowrap : "Nowrap",

    /**
     * Items wrap in the reverse direction of the cross-axis when space along the main axis is insufficient. Makes the flexbox container multi-line. 
     * @public
     */
    WrapReverse : "WrapReverse",

    /**
     * Inherits the value from its parent. 
     * @public
     */
    Inherit : "Inherit"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.InputType.
jQuery.sap.declare("sap.m.InputType");

/**
 * @class A subset of input types that fit to a simple API returning one string.
 * Not available on purpose: button, checkbox, hidden, image, password, radio, range, reset, search, submit.
 *
 * @version 1.8.4
 * @static
 * @public
 */
sap.m.InputType = {
  
    /**
     * default (text) 
     * @public
     */
    Text : "Text",

    /**
     * An input control for specifying a date value. The user can select a month, day of the month, and year. 
     * @public
     */
    Date : "Date",

    /**
     * An input control for specifying a date and time value. The user can select a month, day of the month, year, and time of day. 
     * @public
     */
    Datetime : "Datetime",

    /**
     * An input control for specifying a date and time value where the format depends on the locale. 
     * @public
     */
    DatetimeLocal : "DatetimeLocal",

    /**
     * A text field for specifying an email address. Brings up a keyboard optimized for email address entry. 
     * @public
     */
    Email : "Email",

    /**
     * An input control for selecting a month. 
     * @public
     */
    Month : "Month",

    /**
     * A text field for specifying a number. Brings up a number pad keyboard. Specifying an input type of \d* or [0-9]* is equivalent to using this type. 
     * @public
     */
    Number : "Number",

    /**
     * A text field for specifying a phone number. Brings up a phone pad keyboard. 
     * @public
     */
    Tel : "Tel",

    /**
     * An input control for specifying a time value. The user can select the hour, minute, and optionally AM or PM. 
     * @public
     */
    Time : "Time",

    /**
     * A text field for specifying a URL. Brings up a keyboard optimized for URL entry. 
     * @public
     */
    Url : "Url",

    /**
     * An input control for selecting a week. 
     * @public
     */
    Week : "Week",

    /**
     * Password input where the user entry cannot be seen. 
     * @public
     */
    Password : "Password"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.LabelDesign.
jQuery.sap.declare("sap.m.LabelDesign");

/**
 * @class Available label display modes.
 *
 * @version 1.8.4
 * @static
 * @public
 */
sap.m.LabelDesign = {
  
    /**
     * Displays the label in bold. 
     * @public
     */
    Bold : "Bold",

    /**
     * Displays the label in normal mode. 
     * @public
     */
    Standard : "Standard"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.ListMode.
jQuery.sap.declare("sap.m.ListMode");

/**
 * @class Different modes for the list selection (predefined modes)
 *
 * @version 1.8.4
 * @static
 * @public
 */
sap.m.ListMode = {
  
    /**
     * default mode (no selection) 
     * @public
     */
    None : "None",

    /**
     * single selection mode (only one list item can be selected) 
     * @public
     */
    SingleSelect : "SingleSelect",

    /**
     * multi selection mode (whole list item including checkbox will be selected) 
     * @public
     */
    MultiSelect : "MultiSelect",

    /**
     * delete mode (only one list item can be deleted) 
     * @public
     */
    Delete : "Delete"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.ListType.
jQuery.sap.declare("sap.m.ListType");

/**
 * @class List types
 *
 * @version 1.8.4
 * @static
 * @public
 */
sap.m.ListType = {
  
    /**
     * Inactive 
     * @public
     */
    Inactive : "Inactive",

    /**
     * Detail 
     * @public
     */
    Detail : "Detail",

    /**
     * Navigation 
     * @public
     */
    Navigation : "Navigation",

    /**
     * Active 
     * @public
     */
    Active : "Active",

    /**
     * DetailAndActive 
     * @public
     */
    DetailAndActive : "DetailAndActive"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.PageBackgroundDesign.
jQuery.sap.declare("sap.m.PageBackgroundDesign");

/**
 * @class Available Page Background Design.
 *
 * @version 1.8.4
 * @static
 * @public
 */
sap.m.PageBackgroundDesign = {
  
    /**
     * Standard Page background color. 
     * @public
     */
    Standard : "Standard",

    /**
     * Page background color when a List is set as the Page content. 
     * @public
     */
    List : "List"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.PlacementType.
jQuery.sap.declare("sap.m.PlacementType");

/**
 * @class Types for the placement of popover control.
 *
 * @version 1.8.4
 * @static
 * @public
 */
sap.m.PlacementType = {
  
    /**
     * Popover will be placed at the left side of the reference control. 
     * @public
     */
    Left : "Left",

    /**
     * Popover will be placed at the right side of the reference control. 
     * @public
     */
    Right : "Right",

    /**
     * Popover will be placed at the top of the reference control. 
     * @public
     */
    Top : "Top",

    /**
     * Popover will be placed at the bottom of the reference control. 
     * @public
     */
    Bottom : "Bottom"

  };
  

// -----------------------------------------------------------------------------
// Begin of Library Initialization coding, copied from shared.js
// -----------------------------------------------------------------------------

/*!
 * @copyright@
 */

jQuery.sap.require('jquery.sap.mobile'); // unlisted dependency retained
 // In case the Core decides to throw it out... This module shall always be available when using the mobile lib.

// central mobile functionality that should not go into the UI5 Core can go here

jQuery.sap._touchToMouseEvent = false;

/**
 * Touch helper.
 *
 * @namespace
 * @name sap.m.touch
 * @protected
 **/

if (sap.m && !sap.m.touch) {
	sap.m.touch = {};
}

/**
 * Given a list of touch objects, find the touch that matches the given one.
 *
 * @param {TouchList} oTouchList The list of touch objects to search. Info https://developer.mozilla.org/en-US/docs/DOM/TouchList
 * @param {Touch|number} oTouch A touch object to find or a Touch.identifier that uniquely identifies the current finger in the touch session.
 * @return {object|undefined} The touch matching if any.
 * @protected
*/
sap.m.touch.find = function(oTouchList, oTouch) {
	var i;

	jQuery.sap.assert(oTouchList instanceof Object, 'sap.m.touch.find(): oTouchList must be a touch list object');

	if (oTouch instanceof Object && typeof oTouch.identifier !== "undefined") {
		oTouch = oTouch.identifier;
	} else if (typeof oTouch !== "number") {
		jQuery.sap.assert(false, 'sap.m.touch.find(): oTouch must be a touch object or a number');
	}

	// A TouchList is an object not an array, so we shouldn't use
	// Array.prototype.forEach, etc.
	for (i = 0; i < oTouchList.length; i++) {
		if (oTouchList[i].identifier === oTouch) {
			return oTouchList[i];
		}
	}

	// if the given touch object or touch identifier is not found in the touches list, then return undefined
};

/**
 * Given a list of touches, count the number of touches related with the given HTML element id.
 *
 * @param {TouchList} oTouchList The list of touch objects to search. Info https://developer.mozilla.org/en-US/docs/DOM/TouchList
 * @param {string} sElementId The element id.
 * @return {number} The number of touches related with the given element.
 * @protected
*/
sap.m.touch.countContained = function(oTouchList, sElementId) {
	var i,
		iTouchCount = 0,
		$Element,
		iElementChildrenL,
		$TouchTarget;

	jQuery.sap.assert(oTouchList instanceof Object, 'sap.m.touch.countContained(): oTouchList must be a TouchList object');
	jQuery.sap.assert(typeof sElementId === "string", 'sap.m.touch.countContained(): sElementId must be a string');

	$Element = jQuery.sap.byId(sElementId);
	iElementChildrenL = $Element.children().length;

	// A TouchList is an object not an array, so we shouldn't use
	// Array.prototype.forEach, etc.
	for (i = 0; i < oTouchList.length; i++) {
		$TouchTarget = jQuery(oTouchList[i].target);

		//	If the current target have only one HTML element or
		//	have a HTML element antecessor that match with the given element id.
		if ((iElementChildrenL === 0  && $TouchTarget.is($Element)) ||
			($TouchTarget.closest($Element).length === 1)) {

			iTouchCount++;
		}
	}

	return iTouchCount;
};
}; // end of sap.m.library
if ( !jQuery.sap.isDeclared('sap.m.AppRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */
 
jQuery.sap.declare("sap.m.AppRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class App renderer. 
 * @static
 */
sap.m.AppRenderer = {
};

sap.m.AppRenderer = sap.ui.core.Renderer.extend(sap.m.NavContainerRenderer);

}; // end of sap.m.AppRenderer
if ( !jQuery.sap.isDeclared('sap.m.Bar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Bar.
jQuery.sap.declare("sap.m.Bar");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Bar.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnableFlexBox enableFlexBox} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContentLeft contentLeft} : sap.ui.core.Control[]</li>
 * <li>{@link #getContentMiddle contentMiddle} : sap.ui.core.Control[]</li>
 * <li>{@link #getContentRight contentRight} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A bar that is usually used on top of pages
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.m.Bar
 */
sap.ui.core.Control.extend("sap.m.Bar", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"enableFlexBox" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	aggregations : {
    	"contentLeft" : {type : "sap.ui.core.Control", multiple : true, singularName : "contentLeft"}, 
    	"contentMiddle" : {type : "sap.ui.core.Control", multiple : true, singularName : "contentMiddle"}, 
    	"contentRight" : {type : "sap.ui.core.Control", multiple : true, singularName : "contentRight"}
	}
}});


/**
 * Creates a new subclass of class sap.m.Bar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Bar.extend
 * @function
 */


/**
 * Getter for property <code>enableFlexBox</code>.
 * If this flag is set to true, ContentMiddle will be rendered as a HBox and layoutData can be used to allocate available space
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>enableFlexBox</code>
 * @public
 * @name sap.m.Bar#getEnableFlexBox
 * @function
 */


/**
 * Setter for property <code>enableFlexBox</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bEnableFlexBox  new value for property <code>enableFlexBox</code>
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Bar#setEnableFlexBox
 * @function
 */
	
/**
 * Getter for aggregation <code>contentLeft</code>.<br/>
 * this is the left content area, usually containing button or App Icon
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.Bar#getContentLeft
 * @function
 */

/**
 * Inserts a contentLeft into the aggregation named <code>contentLeft</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContentLeft the contentLeft to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the contentLeft should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the contentLeft is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the contentLeft is inserted at 
 *             the last position        
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Bar#insertContentLeft
 * @function
 */


/**
 * Adds some contentLeft <code>oContentLeft</code> 
 * to the aggregation named <code>contentLeft</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContentLeft the contentLeft to add; if empty, nothing is inserted
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Bar#addContentLeft
 * @function
 */


/**
 * Removes an contentLeft from the aggregation named <code>contentLeft</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContentLeft the contentLeft to remove or its index or id
 * @return {sap.ui.core.Control} the removed contentLeft or null
 * @public
 * @name sap.m.Bar#removeContentLeft
 * @function
 */


/**
 * Removes all the controls in the aggregation named <code>contentLeft</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.Bar#removeAllContentLeft
 * @function
 */


/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>contentLeft</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContentLeft the contentLeft whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.Bar#indexOfContentLeft
 * @function
 */


/**
 * Destroys all the contentLeft in the aggregation 
 * named <code>contentLeft</code>.
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Bar#destroyContentLeft
 * @function
 */
	
/**
 * Getter for aggregation <code>contentMiddle</code>.<br/>
 * This is the middle content area. Controls such as label, segmented buttons, Select should be placed here. Content that are placed here will always be centrally positioned
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.Bar#getContentMiddle
 * @function
 */

/**
 * Inserts a contentMiddle into the aggregation named <code>contentMiddle</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContentMiddle the contentMiddle to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the contentMiddle should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the contentMiddle is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the contentMiddle is inserted at 
 *             the last position        
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Bar#insertContentMiddle
 * @function
 */


/**
 * Adds some contentMiddle <code>oContentMiddle</code> 
 * to the aggregation named <code>contentMiddle</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContentMiddle the contentMiddle to add; if empty, nothing is inserted
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Bar#addContentMiddle
 * @function
 */


/**
 * Removes an contentMiddle from the aggregation named <code>contentMiddle</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContentMiddle the contentMiddle to remove or its index or id
 * @return {sap.ui.core.Control} the removed contentMiddle or null
 * @public
 * @name sap.m.Bar#removeContentMiddle
 * @function
 */


/**
 * Removes all the controls in the aggregation named <code>contentMiddle</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.Bar#removeAllContentMiddle
 * @function
 */


/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>contentMiddle</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContentMiddle the contentMiddle whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.Bar#indexOfContentMiddle
 * @function
 */


/**
 * Destroys all the contentMiddle in the aggregation 
 * named <code>contentMiddle</code>.
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Bar#destroyContentMiddle
 * @function
 */
	
/**
 * Getter for aggregation <code>contentRight</code>.<br/>
 * this is the right content area. Controls such as Action buttons or Search field could be placed here.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.Bar#getContentRight
 * @function
 */

/**
 * Inserts a contentRight into the aggregation named <code>contentRight</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContentRight the contentRight to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the contentRight should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the contentRight is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the contentRight is inserted at 
 *             the last position        
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Bar#insertContentRight
 * @function
 */


/**
 * Adds some contentRight <code>oContentRight</code> 
 * to the aggregation named <code>contentRight</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContentRight the contentRight to add; if empty, nothing is inserted
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Bar#addContentRight
 * @function
 */


/**
 * Removes an contentRight from the aggregation named <code>contentRight</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContentRight the contentRight to remove or its index or id
 * @return {sap.ui.core.Control} the removed contentRight or null
 * @public
 * @name sap.m.Bar#removeContentRight
 * @function
 */


/**
 * Removes all the controls in the aggregation named <code>contentRight</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.Bar#removeAllContentRight
 * @function
 */


/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>contentRight</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContentRight the contentRight whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.Bar#indexOfContentRight
 * @function
 */


/**
 * Destroys all the contentRight in the aggregation 
 * named <code>contentRight</code>.
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Bar#destroyContentRight
 * @function
 */

// Start of sap/m/Bar.js

/**
 * @private
 */

sap.m.Bar.prototype.init = function() { 
};

sap.m.Bar.prototype.onBeforeRendering = function() {
	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
};

sap.m.Bar.prototype.onAfterRendering = function() {
	this._updatePosition();
	
	//listen to resize
	this._sResizeListenerId = sap.ui.core.ResizeHandler.register(this.getDomRef(),  jQuery.proxy(this._updatePosition, this));
};

/**
 * Called when the control is destroyed.
 *
 * @private
 */
sap.m.Bar.prototype.exit = function() {
	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
};

/*
 * @private
 */
sap.m.Bar.prototype._updatePosition = function() {
	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
	
	var $bar = this.$();
	if ($bar.length == 0) {
		return; // if Bar is not rendered anymore do no check and do not re-register the resize handler
	}
	
	var iBarWidth = $bar.outerWidth(true);
	var $leftBar = jQuery.sap.byId( this.getId() + "-BarLeft");
	// reset to default
	$leftBar.css({'width': 'auto'});
	
	// Chrome browser has a problem in providing the correct div size when image inside does not have width explicitly set
	var aLBChildren = $leftBar.children();
	var iTotalWidth = 0;
	for(var i= 0; i < aLBChildren.length ; i++){
		iTotalWidth += jQuery(aLBChildren[i]).outerWidth(true);
	}
	var iLBWidth = $leftBar.outerWidth(true);
	if (iLBWidth < iTotalWidth){
		iLBWidth = iTotalWidth;
		$leftBar.css({'width': iLBWidth});
	}
	
	var $midBar  = jQuery.sap.byId( this.getId() + "-BarMiddle");
	var iMBWidth = $midBar.outerWidth(true);
	var $midBarPH = jQuery.sap.byId( this.getId() + "-BarPH");
	// reset to default
	$midBarPH.css({'position': 'static', 'width': 'auto', 'visibility': 'hidden'});
	var iMBPHWidth = $midBarPH.outerWidth(true);
	var oMBPHPosition = $midBarPH.position(); 
	var $rightBar = jQuery.sap.byId( this.getId() + "-BarRight");
	// reset to default
	$rightBar.css({'width': 'auto'});
	var iRBWidth = $rightBar.outerWidth(true);
	var oRBPosition = $rightBar.position();
	
	if (this.getEnableFlexBox()){
		$midBarPH.css({'position': 'absolute', 'left': iLBWidth});
		$midBarPH.width(iBarWidth - iLBWidth - iRBWidth - parseInt($midBarPH.css('margin-left'), 10) - parseInt($midBarPH.css('margin-right'), 10));
	} else {
		// handle the case when left and right content are wider than the bar itself
		if (iBarWidth < (iLBWidth + iRBWidth)){
			// this scenario happens mostly when a very long title text is set in the left content area
			// hence we make sure the rightContent always has enough space and reduce the left content area width accordingly
			if (iRBWidth > iBarWidth){
				$rightBar.width(iBarWidth);
			}
			if (iBarWidth < iRBWidth){
				$leftBar.width(0);
			} else {
				$leftBar.width(iBarWidth - iRBWidth);
			}
		}
		
		if (oMBPHPosition.left < iLBWidth){
			// place the middle positioned element directly next to the end of left content area
			$midBarPH.css({'position': 'absolute', 'left': iLBWidth});
			oMBPHPosition = $midBarPH.position();
		} else {
			// middle content is smaller than the available space, position content in the middle manually
		}
		
		// check if middle content area width overlaps with right content area, if yes, shorten the width of middle content area
		if ((oMBPHPosition.left + iMBPHWidth) > oRBPosition.left){
			if (oRBPosition.left < oMBPHPosition.left){
				$midBarPH.width(0);
			} else {
				$midBarPH.width(oRBPosition.left - oMBPHPosition.left);
			}
		}
	
		if ($midBarPH.outerWidth() > iMBWidth){
			$midBarPH.width(iMBWidth);
		}
	}
	$midBarPH.css({'visibility': 'inherit'});
	
	//listen to resize
	this._sResizeListenerId = sap.ui.core.ResizeHandler.register(this.getDomRef(),  jQuery.proxy(this._updatePosition, this));
};


}; // end of sap.m.Bar
if ( !jQuery.sap.isDeclared('sap.m.BusyDialog') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.BusyDialog.
jQuery.sap.declare("sap.m.BusyDialog");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new BusyDialog.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getCustomIcon customIcon} : sap.ui.core.URI</li>
 * <li>{@link #getCustomIconRotationSpeed customIconRotationSpeed} : int (default: 1000)</li>
 * <li>{@link #getCustomIconDensityAware customIconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getCustomIconWidth customIconWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getCustomIconHeight customIconHeight} : sap.ui.core.CSSSize</li>
 * <li>{@link #getCancelButtonText cancelButtonText} : string</li>
 * <li>{@link #getShowCancelButton showCancelButton} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.BusyDialog#event:close close} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Busy Dilaog is used to indicate that the system is busy with some task and the user has to wait. During this time the UI is blocked.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.m.BusyDialog
 */
sap.ui.core.Control.extend("sap.m.BusyDialog", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"open", "close"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"text" : {type : "string", group : "Appearance", defaultValue : null},
		"title" : {type : "string", group : "Appearance", defaultValue : null},
		"customIcon" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},
		"customIconRotationSpeed" : {type : "int", group : "Appearance", defaultValue : 1000},
		"customIconDensityAware" : {type : "boolean", group : "", defaultValue : true},
		"customIconWidth" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
		"customIconHeight" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
		"cancelButtonText" : {type : "string", group : "Misc", defaultValue : null},
		"showCancelButton" : {type : "boolean", group : "Appearance", defaultValue : false}
	},
	events : {
		"close" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.BusyDialog with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.BusyDialog.extend
 * @function
 */

sap.m.BusyDialog.M_EVENTS = {'close':'close'};


/**
 * Getter for property <code>text</code>.
 * Optional text shown inside the popup.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.BusyDialog#getText
 * @function
 */


/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#setText
 * @function
 */

/**
 * Getter for property <code>title</code>.
 * Sets a title to the busy dialog. Default is no title.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.BusyDialog#getTitle
 * @function
 */


/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#setTitle
 * @function
 */

/**
 * Getter for property <code>customIcon</code>.
 * Icon that is displayed in the dialog header. This icon is invisible in iOS platform and it's density aware that you can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density screen.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>customIcon</code>
 * @public
 * @name sap.m.BusyDialog#getCustomIcon
 * @function
 */


/**
 * Setter for property <code>customIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sCustomIcon  new value for property <code>customIcon</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#setCustomIcon
 * @function
 */

/**
 * Getter for property <code>customIconRotationSpeed</code>.
 * Defines the rotation speed of the given image. If a gif is used, the speed has to be set to 0. The unit is in ms.
 *
 * Default value is <code>1000</code>
 *
 * @return {int} the value of property <code>customIconRotationSpeed</code>
 * @public
 * @name sap.m.BusyDialog#getCustomIconRotationSpeed
 * @function
 */


/**
 * Setter for property <code>customIconRotationSpeed</code>.
 *
 * Default value is <code>1000</code> 
 *
 * @param {int} iCustomIconRotationSpeed  new value for property <code>customIconRotationSpeed</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#setCustomIconRotationSpeed
 * @function
 */

/**
 * Getter for property <code>customIconDensityAware</code>.
 * If this is set to false, the src image will be loaded directly without attempting to fetch the density perfect image for high density device.
 * 
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>customIconDensityAware</code>
 * @public
 * @name sap.m.BusyDialog#getCustomIconDensityAware
 * @function
 */


/**
 * Setter for property <code>customIconDensityAware</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bCustomIconDensityAware  new value for property <code>customIconDensityAware</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#setCustomIconDensityAware
 * @function
 */

/**
 * Getter for property <code>customIconWidth</code>.
 * Width of the provided icon. By default 44px are used.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>customIconWidth</code>
 * @public
 * @name sap.m.BusyDialog#getCustomIconWidth
 * @function
 */


/**
 * Setter for property <code>customIconWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sCustomIconWidth  new value for property <code>customIconWidth</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#setCustomIconWidth
 * @function
 */

/**
 * Getter for property <code>customIconHeight</code>.
 * Height of the provided icon. By default 44px are used.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>customIconHeight</code>
 * @public
 * @name sap.m.BusyDialog#getCustomIconHeight
 * @function
 */


/**
 * Setter for property <code>customIconHeight</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sCustomIconHeight  new value for property <code>customIconHeight</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#setCustomIconHeight
 * @function
 */

/**
 * Getter for property <code>cancelButtonText</code>.
 * The text of the cancel button. The default text is "Cancel" (translated to the respective language).
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>cancelButtonText</code>
 * @public
 * @name sap.m.BusyDialog#getCancelButtonText
 * @function
 */


/**
 * Setter for property <code>cancelButtonText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sCancelButtonText  new value for property <code>cancelButtonText</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#setCancelButtonText
 * @function
 */

/**
 * Getter for property <code>showCancelButton</code>.
 * A cancel button will be rendered inside the busy dialog if this property is set to true.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showCancelButton</code>
 * @public
 * @name sap.m.BusyDialog#getShowCancelButton
 * @function
 */


/**
 * Setter for property <code>showCancelButton</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowCancelButton  new value for property <code>showCancelButton</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#setShowCancelButton
 * @function
 */

/**
 * This event will be fired when the busy dialog is closed. 
 *
 * @name sap.m.BusyDialog#close
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'close' event of this <code>sap.m.BusyDialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.BusyDialog</code>.<br/> itself. 
 *  
 * This event will be fired when the busy dialog is closed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.BusyDialog</code>.<br/> itself.
 *
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#attachClose
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'close' event of this <code>sap.m.BusyDialog</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#detachClose
 * @function
 */


/**
 * Fire event close to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.BusyDialog#fireClose
 * @function
 */

/**
 * Open the busy popup.
 *
 * @name sap.m.BusyDialog.prototype.open
 * @function

 * @type sap.m.BusyDialog
 * @public
 */


/**
 * Close the busy popup.
 *
 * @name sap.m.BusyDialog.prototype.close
 * @function

 * @type sap.m.BusyDialog
 * @public
 */


// Start of sap/m/BusyDialog.js
///**
// * This file defines behavior for the control,
// */
//sap.m.BusyDialog.prototype.init = function(){
//   // do something for initialization...
//};
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained


sap.m.BusyDialog.prototype.init = function(){
	var that = this;
	this._$window = jQuery(window);

	this.oPopup = new sap.ui.core.Popup();
	(jQuery.os.ios) ? this.oPopup.setShadow(true): this.oPopup.setShadow(false);
	this.oPopup.setModal(true, 'sapMBusyBLy');
	this.oPopup.setAnimations(this.openAnimation, this.closeAnimation);

	//the orientationchange event listener
	this._fOrientationChange = jQuery.proxy(this._reposition, this);
	
	this.oPopup._applyPosition = function(oPosition){
		that._setDimensions();
		sap.ui.core.Popup.prototype._applyPosition.call(this, oPosition);
	};
	this.oPopup._showBlockLayer = function(){
		sap.ui.core.Popup.prototype._showBlockLayer.call(this);
		var $BlockRef = jQuery("#sap-ui-blocklayer-popup"), $BlockBarRef;
		$BlockRef.toggleClass("sapMBusyBLy", true);
		if (!jQuery.os.ios) {
			$BlockBarRef = jQuery("#sap-ui-blocklayer-popup-bar");
			$BlockRef.css('top', '48px');
			if($BlockBarRef.length === 0){
				var className = "sapUiBLy" + (this._sModalCSSClass ? " " + this._sModalCSSClass : "") + ' sapUiBLyBar';
				var $BlockBarRef = jQuery("<div id=\"sap-ui-blocklayer-popup-bar\" tabindex=\"0\" class=\"" + className + "\" style=\"display:block; z-index:" +  $BlockRef.css('z-index') +"; visibility:visible\"></div>");
				$BlockBarRef.appendTo(sap.ui.getCore().getStaticAreaRef());
			} else {
				var $BlockBarRef = $BlockRef.next('div');
				$BlockBarRef.css({"z-index" : $BlockRef.css('z-index'),
								"visibility": "visible"
							});
			}
		}
	};
	this.oPopup._hideBlockLayer = function(){
		var $BlockRef = jQuery("#sap-ui-blocklayer-popup"),
			$BlockBarRef = jQuery("#sap-ui-blocklayer-popup-bar"),
			popObj = this;
		if(sap.ui.core.Popup.blStack.length > 1){
			// If there's still popups open, hide block layer without animation
			sap.ui.core.Popup.prototype._hideBlockLayer.call(popObj);
		}else{	
			$BlockBarRef.css({'visibility': ''});
			$BlockRef.toggleClass('sapMBusyBLy', false);
			$BlockRef.css("top", "");
			sap.ui.core.Popup.prototype._hideBlockLayer.call(popObj);
		}
	};
};

sap.m.BusyDialog.prototype.openAnimation = function($Ref, iRealDuration, fnOpened) {
	if(jQuery.os.ios) {
		$Ref.css('display', 'block');
		$Ref.one("webkitAnimationEnd", function(){
			fnOpened();
		});
		$Ref.css('-webkit-animation-name', 'sapMBusyBounce');
	} else {
		fnOpened();
	}
};

sap.m.BusyDialog.prototype.closeAnimation = function($Ref, iRealDuration, fnClose) {
	fnClose();
};

/**
 * Destroys the dialog control
 * @private
 */
sap.m.BusyDialog.prototype.exit = function(){
	this.oPopup.close();
	this.oPopup.destroy();
	this.oPopup = null;
	
	if(this._oLabel){
		this._oLabel.destroy();
		this._oLabel = null;
	}
	if(this._oButton){
		this._oButton.destroy();
		this._oButton = null;
	}
	if(this._busyIndicator){
		this._busyIndicator.destroy();
		this._busyIndicator = null;
	}
	this._$window.unbind("resize", this._fOrientationChange);
};

/**
 * Opens the dialog
 *
 * @public
 *
 */
sap.m.BusyDialog.prototype.open = function(){
	jQuery.sap.log.debug("sap.m.BusyDialog.open called at " + new Date().getTime());
	var oPopup = this.oPopup;
	if (oPopup.isOpen()){
		return this;
	}
	// Open popup
	oPopup.setContent(this);
	oPopup.attachEvent(sap.ui.core.Popup.M_EVENTS.opened, this._handleOpened, this);
	oPopup.setPosition("center center", "center center", document, "0 0", "fit");

	this._bOpenRequested = true;
	this._openNowIfPossibleAndRequested();

	return this;
};


sap.m.BusyDialog.prototype._openNowIfPossibleAndRequested = function(){
	if (!this._bOpenRequested) {
		return;
	}
	
	// If body/Core are not available yet, give them some more time and open later if still required
	if (!document.body || !sap.ui.getCore().isInitialized()) {
		jQuery.sap.delayedCall(50, this, "_openNowIfPossibleAndRequested");
		return;
	}
	
	this._bOpenRequested = false; // opening request is handled
	this.oPopup.open();
};

/**
 * Closes the dialog
 *
 * @public
 *
 */
sap.m.BusyDialog.prototype.close = function(){
	this._bOpenRequested = false;
	var oPopup = this.oPopup;

	var eOpenState = this.oPopup.getOpenState();
	if(!(eOpenState === sap.ui.core.OpenState.CLOSED || eOpenState === sap.ui.core.OpenState.CLOSING)){
		oPopup.attachEvent(sap.ui.core.Popup.M_EVENTS.closed, this._handleClosed, this);
		jQuery.sap.log.debug("sap.m.BusyDialog.close called at " + new Date().getTime());
		oPopup.close();
		this.fireClose();
	}
	return this;
};

sap.m.BusyDialog.prototype._reposition = function() {
	var ePopupState = this.oPopup.getOpenState();
	if(!(ePopupState === sap.ui.core.OpenState.OPEN)){
		return;
	}
	this.oPopup._applyPosition(this.oPopup._oLastPosition);
};

sap.m.BusyDialog.prototype._handleOpened = function(){
	this.oPopup.detachEvent(sap.ui.core.Popup.M_EVENTS.opened, this._handleOpened, this);
	// bind to window resize
	// In android, the orientationchange fires before the size of the window changes
	//  that's why the resize event is used here.
	this._$window.bind("resize", this._fOrientationChange);
};

sap.m.BusyDialog.prototype._handleClosed = function(){
	this.oPopup.detachEvent(sap.ui.core.Popup.M_EVENTS.closed, this._handleClosed, this);
	this._$window.unbind("resize", this._fOrientationChange);
};

sap.m.BusyDialog.prototype._setDimensions = function() {
	// Derive width and height from viewport
	var iWindowHeight = this._$window.height(),
	$this = this.$();
	//reset
	$this.css({
		"left": "0px",
		"top": "0px",
		"max-height": iWindowHeight + "px"
	});
};
}; // end of sap.m.BusyDialog
if ( !jQuery.sap.isDeclared('sap.m.BusyIndicator') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.BusyIndicator.
jQuery.sap.declare("sap.m.BusyIndicator");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new BusyIndicator.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getCustomIcon customIcon} : sap.ui.core.URI</li>
 * <li>{@link #getCustomIconRotationSpeed customIconRotationSpeed} : int (default: 1000)</li>
 * <li>{@link #getCustomIconDensityAware customIconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getCustomIconWidth customIconWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getCustomIconHeight customIconHeight} : sap.ui.core.CSSSize</li>
 * <li>{@link #getSize size} : sap.ui.core.CSSSize</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Control to indicate that the system is busy with some task and the user has to wait. When no image or gif is provided, the control renders the platforms native indicator using css.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.m.BusyIndicator
 */
sap.ui.core.Control.extend("sap.m.BusyIndicator", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"text" : {type : "string", group : "Data", defaultValue : null},
		"textDirection" : {type : "sap.ui.core.TextDirection", group : "Appearance", defaultValue : sap.ui.core.TextDirection.Inherit},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"customIcon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"customIconRotationSpeed" : {type : "int", group : "Appearance", defaultValue : 1000},
		"customIconDensityAware" : {type : "boolean", group : "", defaultValue : true},
		"customIconWidth" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
		"customIconHeight" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
		"size" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.m.BusyIndicator with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.BusyIndicator.extend
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * Defines the text displayed next to the busy indicator (optional)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.BusyIndicator#getText
 * @function
 */


/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyIndicator#setText
 * @function
 */

/**
 * Getter for property <code>textDirection</code>.
 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
 *
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code>
 *
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * @name sap.m.BusyIndicator#getTextDirection
 * @function
 */


/**
 * Setter for property <code>textDirection</code>.
 *
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code> 
 *
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyIndicator#setTextDirection
 * @function
 */

/**
 * Getter for property <code>visible</code>.
 * Invisible control is not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.BusyIndicator#getVisible
 * @function
 */


/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyIndicator#setVisible
 * @function
 */

/**
 * Getter for property <code>customIcon</code>.
 * Icon url if an icon is used as the busy indicator.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>customIcon</code>
 * @public
 * @name sap.m.BusyIndicator#getCustomIcon
 * @function
 */


/**
 * Setter for property <code>customIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sCustomIcon  new value for property <code>customIcon</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyIndicator#setCustomIcon
 * @function
 */

/**
 * Getter for property <code>customIconRotationSpeed</code>.
 * Defines the rotation speed of the given image. If a .gif is used, the speed has to be set to 0. The unit is in ms.
 *
 * Default value is <code>1000</code>
 *
 * @return {int} the value of property <code>customIconRotationSpeed</code>
 * @public
 * @name sap.m.BusyIndicator#getCustomIconRotationSpeed
 * @function
 */


/**
 * Setter for property <code>customIconRotationSpeed</code>.
 *
 * Default value is <code>1000</code> 
 *
 * @param {int} iCustomIconRotationSpeed  new value for property <code>customIconRotationSpeed</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyIndicator#setCustomIconRotationSpeed
 * @function
 */

/**
 * Getter for property <code>customIconDensityAware</code>.
 * If this is set to false, the src image will be loaded directly without attempting to fetch the density perfect image for high density device.
 * 
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>customIconDensityAware</code>
 * @public
 * @name sap.m.BusyIndicator#getCustomIconDensityAware
 * @function
 */


/**
 * Setter for property <code>customIconDensityAware</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bCustomIconDensityAware  new value for property <code>customIconDensityAware</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyIndicator#setCustomIconDensityAware
 * @function
 */

/**
 * Getter for property <code>customIconWidth</code>.
 * Width of the provided icon. By default 44px are used.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>customIconWidth</code>
 * @public
 * @name sap.m.BusyIndicator#getCustomIconWidth
 * @function
 */


/**
 * Setter for property <code>customIconWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sCustomIconWidth  new value for property <code>customIconWidth</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyIndicator#setCustomIconWidth
 * @function
 */

/**
 * Getter for property <code>customIconHeight</code>.
 * Height of the provided icon. By default 44px are used.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>customIconHeight</code>
 * @public
 * @name sap.m.BusyIndicator#getCustomIconHeight
 * @function
 */


/**
 * Setter for property <code>customIconHeight</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sCustomIconHeight  new value for property <code>customIconHeight</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyIndicator#setCustomIconHeight
 * @function
 */

/**
 * Getter for property <code>size</code>.
 * Defines the size of the busy indicator.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>size</code>
 * @public
 * @name sap.m.BusyIndicator#getSize
 * @function
 */


/**
 * Setter for property <code>size</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sSize  new value for property <code>size</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyIndicator#setSize
 * @function
 */

// Start of sap/m/BusyIndicator.js
///**
// * This file defines behavior for the control,
// */


/**
 * Initializes the dialog control
 *
 * @private
 *
 */

sap.m.BusyIndicator.prototype.onAfterRendering = function(){
	if(this.getCustomIconRotationSpeed()){
		this.$().children('img').css("-webkit-animation-duration", this.getCustomIconRotationSpeed() + "ms");
	}
	var $_elem = this.$();
	
	var parentElement = this.getParent() ? this.getParent()._context : '';
	//Set the color to the first parents color which is not transparent. Skip this when inside Dialog or Bar.
	if(!jQuery.os.ios) {
		if(!this.getCustomIcon() && this.$().parent('.sapMBusyDialog').length === 0 && parentElement !== 'header') {
			
			var bFoundCss = true;
			while( $_elem.css('background-color') === "rgba(0, 0, 0, 0)" ) {
				$_elem = $_elem.parent();
				
				//Do not ask '#document' for its css. this will cause trouble. Therefore
				//'$_elem.parent().length' is checked
				if($_elem.parent().length == 0) {
					bFoundCss = false;
					break;
				}
			}
			//This is the default color
			var sBColor = "rgba(0, 0, 0, 0)";
			if(bFoundCss) {
				sBColor = $_elem.css('background-color');
			}
			this.$().children().children('.sapMSpinBar3').children('.sapMSpinBar4').css('background-color', sBColor);
		}
	}
};

sap.m.BusyIndicator.prototype.setCustomIconRotationSpeed = function(iSpeed){
	if(iSpeed){
		if(iSpeed !== this.getCustomIconRotationSpeed()) {
			this.setProperty("customIconRotationSpeed", iSpeed, true);
		}
	}
	return this;
}
}; // end of sap.m.BusyIndicator
if ( !jQuery.sap.isDeclared('sap.m.Button') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Button.
jQuery.sap.declare("sap.m.Button");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Button.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getType type} : sap.m.ButtonType (default: sap.m.ButtonType.Default)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getIconFirst iconFirst} : boolean (default: true)</li>
 * <li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Button#event:tap tap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Enables users to trigger actions. For the button UI, you can define some text or an icon, or both.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.m.Button
 */
sap.ui.core.Control.extend("sap.m.Button", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"text" : {type : "string", group : "Misc", defaultValue : null},
		"type" : {type : "sap.m.ButtonType", group : "Appearance", defaultValue : sap.m.ButtonType.Default},
		"width" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"icon" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},
		"iconFirst" : {type : "boolean", group : "Appearance", defaultValue : true},
		"activeIcon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null}
	},
	events : {
		"tap" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Button with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Button.extend
 * @function
 */

sap.m.Button.M_EVENTS = {'tap':'tap'};


/**
 * Getter for property <code>text</code>.
 * Button text
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.Button#getText
 * @function
 */


/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#setText
 * @function
 */

/**
 * Getter for property <code>type</code>.
 * Type of a button (e.g. default, accept, reject, back, icon, etc.)
 *
 * Default value is <code>Default</code>
 *
 * @return {sap.m.ButtonType} the value of property <code>type</code>
 * @public
 * @name sap.m.Button#getType
 * @function
 */


/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>Default</code> 
 *
 * @param {sap.m.ButtonType} oType  new value for property <code>type</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#setType
 * @function
 */

/**
 * Getter for property <code>width</code>.
 * Defines the width of the button.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.Button#getWidth
 * @function
 */


/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#setWidth
 * @function
 */

/**
 * Getter for property <code>enabled</code>.
 * Boolean property to enable the control (default is true). Buttons that are disabled have other colors than enabled ones, depending on custom settings
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.m.Button#getEnabled
 * @function
 */


/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#setEnabled
 * @function
 */

/**
 * Getter for property <code>visible</code>.
 * Invisible buttons are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.Button#getVisible
 * @function
 */


/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#setVisible
 * @function
 */

/**
 * Getter for property <code>icon</code>.
 * Icon to be displayed as graphical element within the button.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.m.Button#getIcon
 * @function
 */


/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#setIcon
 * @function
 */

/**
 * Getter for property <code>iconFirst</code>.
 * If set to true (default), the display sequence is 1. icon 2. control text
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>iconFirst</code>
 * @public
 * @name sap.m.Button#getIconFirst
 * @function
 */


/**
 * Setter for property <code>iconFirst</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIconFirst  new value for property <code>iconFirst</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#setIconFirst
 * @function
 */

/**
 * Getter for property <code>activeIcon</code>.
 * The source property when this icon is tapped. Graphical element is changed to the new source as long as the icon is tapped.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>activeIcon</code>
 * @public
 * @name sap.m.Button#getActiveIcon
 * @function
 */


/**
 * Setter for property <code>activeIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sActiveIcon  new value for property <code>activeIcon</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#setActiveIcon
 * @function
 */

/**
 * Event is fired when the user taps the control.
 *  
 *
 * @name sap.m.Button#tap
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'tap' event of this <code>sap.m.Button</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Button</code>.<br/> itself. 
 *  
 * Event is fired when the user taps the control.
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Button</code>.<br/> itself.
 *
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#attachTap
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'tap' event of this <code>sap.m.Button</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#detachTap
 * @function
 */


/**
 * Fire event tap to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Button#fireTap
 * @function
 */

// Start of sap/m/Button.js
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained



/**
 * Function is called to define the behavior for the control.
 * 
 * @private
 */
/*
 * sap.m.Button.prototype.init = function() { };
 */


/**
 * Function is called when exiting the control.
 * 
 * @private
 */
sap.m.Button.prototype.exit = function(oEvent) {
	// destroy image controls if initialized
	if (this._image) {
		this._image.destroy();
	}
	if (this._imageBtn) {
		this._imageBtn.destroy();
	}
};


/**
 * Function is called when touchstart occurs on button .
 * 
 * @private
 */
sap.m.Button.prototype.ontouchstart = function(oEvent) {
	// for control who need to know if they should handle events from the button control
	oEvent.originalEvent._sapui_handledByControl = true;
	// active handling for android/blackberry
	if (jQuery.os.android || jQuery.os.blackberry) {
		this.$().addClass("sapMBtnActive");
	}
	// handling active icon
	if (this.getEnabled()) {
		if (this.getIcon() && this.getActiveIcon()) {
			this._image.setSrc(this.getActiveIcon());
		}
	}
};


/**
 * Function is called when touchend occurs on button .
 * 
 * @private
 */
sap.m.Button.prototype.ontouchend = function(oEvent) {
	// active handling for android/blackberry
	if (jQuery.os.android|| jQuery.os.blackberry) {
		this.$().removeClass("sapMBtnActive");
	}
	// handling active icon
	if (this.getEnabled()) {
		if (this.getIcon() && this.getActiveIcon()) {
			this._image.setSrc(this.getIcon());
		}
	}
	// fire tap event
	if (this.getEnabled()) {
		this.fireTap({/* no parameters */});
	}	
};


/**
 * Function is called when image control needs to be loaded.
 * 
 * @private
 */
sap.m.Button.prototype._getImage = function(sImgId, sSrc, sActiveSrc) {
	var oImage = this._image;
	if(oImage) {
		oImage.setSrc(sSrc);
		oImage.setActiveSrc(sActiveSrc);
	} else {
		oImage = new sap.m.Image(sImgId, {
			src : sSrc,
			activeSrc: sActiveSrc
		}).addStyleClass("sapMBtnCustomIcon").setParent(this, null, true);
	}
	return this._image = oImage;
};


/**
 * Function is called when internal image control needs to be loaded.
 * 
 * @private
 */
sap.m.Button.prototype._getImageBtn = function(sImgId, sSrc, sHeight, sWidth) {
	var oImage = this._imageBtn;
	if(oImage) {
		oImage.setSrc(sSrc);
		oImage.setHeight(sHeight);
		oImage.setWidth(sWidth);
	} else {
		oImage = new sap.m.Image(sImgId, {
			src : sSrc,
			height : sHeight,
			width : sWidth		
		}).setParent(this, null, true);;		
	}
	return this._imageBtn = oImage;
};
}; // end of sap.m.Button
if ( !jQuery.sap.isDeclared('sap.m.Carousel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Carousel.
jQuery.sap.declare("sap.m.Carousel");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Carousel.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getLoop loop} : boolean (default: false)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getShowPageIndicator showPageIndicator} : boolean (default: true)</li>
 * <li>{@link #getPageIndicatorPlacement pageIndicatorPlacement} : sap.m.PlacementType (default: sap.m.PlacementType.Bottom)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getPages pages} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getActivePage activePage} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Carousel#event:loadPage loadPage} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Carousel#event:unloadPage unloadPage} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Carousel#event:pageChanged pageChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The Carousel control can be used to navigate through a list of sap.m controls just like flipping through the pages of a book by swiping right or left. An indicator shows the current position within the control list.
 * 
 * This carousel implementation always renders three controls: the one which is currently active, the one to the right and the one to the left. After a swipe, these pages are exchanged accordingly, the next control in the list is loaded, the control which is out of scope is released.
 * 
 * Similar to the NavContainer control, the carousel triggers events on it pages, when flipping through them. These events are:
 * - 'BeforeFirstShow': triggered, when a page is rendered for the first time wthin the carousel
 * - 'BeforeShow': triggered whenever a page is rendered (analogous to 'loadPage event)
 * - 'AfterHide': triggered when the page is discarded from the carousel's 'viewport' (analogous to 'unloadPage event)
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.m.Carousel
 */
sap.ui.core.Control.extend("sap.m.Carousel", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"next", "previous"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"loop" : {type : "boolean", group : "Misc", defaultValue : false},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"showPageIndicator" : {type : "boolean", group : "Appearance", defaultValue : true},
		"pageIndicatorPlacement" : {type : "sap.m.PlacementType", group : "Behavior", defaultValue : sap.m.PlacementType.Bottom}
	},
	defaultAggregation : "pages",
	aggregations : {
    	"pages" : {type : "sap.ui.core.Control", multiple : true, singularName : "page"}
	},
	associations : {
		"activePage" : {type : "sap.ui.core.Control", multiple : false}
	},
	events : {
		"loadPage" : {}, 
		"unloadPage" : {}, 
		"pageChanged" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Carousel with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Carousel.extend
 * @function
 */

sap.m.Carousel.M_EVENTS = {'loadPage':'loadPage','unloadPage':'unloadPage','pageChanged':'pageChanged'};


/**
 * Getter for property <code>height</code>.
 * The height of the carousel. Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.m.Carousel#getHeight
 * @function
 */


/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#setHeight
 * @function
 */

/**
 * Getter for property <code>loop</code>.
 * Defines whether the carousel should loop, i.e show the first page after the last page is reached and vice versa.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>loop</code>
 * @public
 * @name sap.m.Carousel#getLoop
 * @function
 */


/**
 * Setter for property <code>loop</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bLoop  new value for property <code>loop</code>
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#setLoop
 * @function
 */

/**
 * Getter for property <code>visible</code>.
 * Hide carousel. Actually, it is not even rendered anymore if it is not 'visible'
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.Carousel#getVisible
 * @function
 */


/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#setVisible
 * @function
 */

/**
 * Getter for property <code>width</code>.
 * The width of the carousel. Note that when a percentage is given, for the width to work as expected, the width of the surrounding container must be defined.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.Carousel#getWidth
 * @function
 */


/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#setWidth
 * @function
 */

/**
 * Getter for property <code>showPageIndicator</code>.
 * Show or hide carousel's page indicator.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showPageIndicator</code>
 * @public
 * @name sap.m.Carousel#getShowPageIndicator
 * @function
 */


/**
 * Setter for property <code>showPageIndicator</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowPageIndicator  new value for property <code>showPageIndicator</code>
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#setShowPageIndicator
 * @function
 */

/**
 * Getter for property <code>pageIndicatorPlacement</code>.
 * This is the information about where the carousel's page indicator shall be displayed. Possible values are sap.m.PlacementType.Top, sap.m.PlacementType.Bottom. Other values are ignored and the default value will be applied. The default value is sap.m.PlacementType.Bottom.
 *
 * Default value is <code>Bottom</code>
 *
 * @return {sap.m.PlacementType} the value of property <code>pageIndicatorPlacement</code>
 * @public
 * @name sap.m.Carousel#getPageIndicatorPlacement
 * @function
 */


/**
 * Setter for property <code>pageIndicatorPlacement</code>.
 *
 * Default value is <code>Bottom</code> 
 *
 * @param {sap.m.PlacementType} oPageIndicatorPlacement  new value for property <code>pageIndicatorPlacement</code>
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#setPageIndicatorPlacement
 * @function
 */
	
/**
 * Getter for aggregation <code>pages</code>.<br/>
 * The content entities between which this Carousel navigates.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.Carousel#getPages
 * @function
 */

/**
 * Inserts a page into the aggregation named <code>pages</code>.
 *
 * @param {sap.ui.core.Control}
 *          oPage the page to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the page should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the page is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the page is inserted at 
 *             the last position        
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#insertPage
 * @function
 */


/**
 * Adds some page <code>oPage</code> 
 * to the aggregation named <code>pages</code>.
 *
 * @param {sap.ui.core.Control}
 *            oPage the page to add; if empty, nothing is inserted
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#addPage
 * @function
 */


/**
 * Removes an page from the aggregation named <code>pages</code>.
 *
 * @param {int | string | sap.ui.core.Control} vPage the page to remove or its index or id
 * @return {sap.ui.core.Control} the removed page or null
 * @public
 * @name sap.m.Carousel#removePage
 * @function
 */


/**
 * Removes all the controls in the aggregation named <code>pages</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.Carousel#removeAllPages
 * @function
 */


/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>pages</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oPage the page whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.Carousel#indexOfPage
 * @function
 */


/**
 * Destroys all the pages in the aggregation 
 * named <code>pages</code>.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#destroyPages
 * @function
 */

/**
 * Provides getter and setter for the currently displayed page. For the setter, argument may be the control itself, which must be member of the carousel's page list, or the control's id.
 * The getter will return the control id
 *
 * @return {string} Id of the element which is the current target of the <code>activePage</code> association, or null
 * @public
 * @name sap.m.Carousel#getActivePage
 * @function
 */


/**
 * Provides getter and setter for the currently displayed page. For the setter, argument may be the control itself, which must be member of the carousel's page list, or the control's id.
 * The getter will return the control id
 *
 * @param {string | sap.ui.core.Control} vActivePage 
 *    Id of an element which becomes the new target of this <code>activePage</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#setActivePage
 * @function
 */

/**
 * Carousel requires a new page to be loaded. This event may be used to fill the content of that page 
 *
 * @name sap.m.Carousel#loadPage
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.pageId Id of the page which is will be loaded
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'loadPage' event of this <code>sap.m.Carousel</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Carousel</code>.<br/> itself. 
 *  
 * Carousel requires a new page to be loaded. This event may be used to fill the content of that page 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Carousel</code>.<br/> itself.
 *
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#attachLoadPage
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'loadPage' event of this <code>sap.m.Carousel</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#detachLoadPage
 * @function
 */


/**
 * Fire event loadPage to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'pageId' of type <code>string</code> Id of the page which is will be loaded</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Carousel#fireLoadPage
 * @function
 */

/**
 * Carousel does not display a page any longer and unloads it. This event may be used to clean up the content of that page. 
 *
 * @name sap.m.Carousel#unloadPage
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.pageId Id of the page which is will be unloaded
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'unloadPage' event of this <code>sap.m.Carousel</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Carousel</code>.<br/> itself. 
 *  
 * Carousel does not display a page any longer and unloads it. This event may be used to clean up the content of that page. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Carousel</code>.<br/> itself.
 *
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#attachUnloadPage
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'unloadPage' event of this <code>sap.m.Carousel</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#detachUnloadPage
 * @function
 */


/**
 * Fire event unloadPage to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'pageId' of type <code>string</code> Id of the page which is will be unloaded</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Carousel#fireUnloadPage
 * @function
 */

/**
 * This event is thrown after a carousel swipe has been completed. It is triggered both by physical swipe events and through API carousel manipulations such as calling 'next', 'previous' or 'setActivePageId' functions. 
 *
 * @name sap.m.Carousel#pageChanged
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.oldActivePageId Id of the page which was active before the page change.
 * @param {string} oControlEvent.getParameters.newActivePageId Id of the page which is active after the page change.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'pageChanged' event of this <code>sap.m.Carousel</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Carousel</code>.<br/> itself. 
 *  
 * This event is thrown after a carousel swipe has been completed. It is triggered both by physical swipe events and through API carousel manipulations such as calling 'next', 'previous' or 'setActivePageId' functions. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Carousel</code>.<br/> itself.
 *
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#attachPageChanged
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'pageChanged' event of this <code>sap.m.Carousel</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#detachPageChanged
 * @function
 */


/**
 * Fire event pageChanged to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'oldActivePageId' of type <code>string</code> Id of the page which was active before the page change.</li>
 * <li>'newActivePageId' of type <code>string</code> Id of the page which is active after the page change.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Carousel#firePageChanged
 * @function
 */

/**
 * Call this method to display the next page (corresponds to a swipe right). Returns 'this' for method chaining.
 *
 * @name sap.m.Carousel.prototype.next
 * @function

 * @type sap.m.Carousel
 * @public
 */


/**
 * Call this method to display the previous page (corresponds to a swipe left). Returns 'this' for method chaining.
 *
 * @name sap.m.Carousel.prototype.previous
 * @function

 * @type sap.m.Carousel
 * @public
 */


// Start of sap/m/Carousel.js
jQuery.sap.require('sap.ui.thirdparty.swipe-view'); // unlisted dependency retained


/**
 * Initialize member variables which are needed later on.
 * 
 * @private
 */
sap.m.Carousel.prototype.init = function() {
	this.orientationProxy = jQuery.proxy(this._handleOrientationChange, this);
	jQuery(window).bind("orientationchange", this.orientationProxy);
};

/**
 * Called when the control is destroyed.
 *
 * @private
 */
sap.m.Carousel.prototype.exit = function() {
	if(this.orientationProxy) {
		jQuery(window).unbind("orientationchange", this.orientationProxy);
	}
	if(!!this._oSwipeView) {
		this._oSwipeView.destroy();
	}
	if(!!this._prevButton) {
		this._prevButton.destroy();
	}
	if(!!this._nextButton) {
		this._nextButton.destroy();
	}
	if(this._aBusyIndicators) {
		for (var i=0; i<3; i++) {
			this._aBusyIndicators[i].destroy();
		}
	}
	this._cleanUpTapBindings();
	this.destroy();
};

/**
 * Cleans up bindings of 'previous' and 'next' button
 * 
 * @private
 */
sap.m.Carousel.prototype._cleanUpTapBindings = function() {
	if(!!this.previousProxy) {
		jQuery.sap.byId(this._getPrevBtnId()).unbind("tap", this.previousProxy);
		delete this.previousProxy;
	}
	if(!!this.nextProxy) {
		jQuery.sap.byId(this._getNextBtnId()).unbind("tap", this.nextProxy);
		delete this.nextProxy;
	}
}

/**
 * Cleans up bindings of 'previous' and 'next' button
 * 
 * @private
 */
sap.m.Carousel.prototype._createTapBindings = function() {
	if(!this.previousProxy) {
		this.previousProxy = jQuery.proxy(this.previous, this);
		jQuery.sap.byId(this._getPrevBtnId()).bind("tap", this.previousProxy);
	}
	if(!this.nextProxy) {
		this.nextProxy = jQuery.proxy(this.next, this);
		jQuery.sap.byId(this._getNextBtnId()).bind("tap", this.nextProxy);
	}
}


/**
 * Cleans up bindings
 * 
 * @private
 */
sap.m.Carousel.prototype.onBeforeRendering = function() {
	this._cleanUpTapBindings();
};

/**
 * When this method is called for the first time, a swipe-view instance is created which is renders
 * itself into its dedicated spot within the DOM tree. This instance is used throughout the
 * Carousel instance's lifecycle.
 * 
 * @private
 */
sap.m.Carousel.prototype.onAfterRendering = function() {	
	
	var pageList = this.getPages();
	
	if(!this._oSwipeView) {
		var domRef = jQuery.sap.domById(this._getContentId());
		
		if(!this.getActivePage() && pageList.length > 0) {
			//initialize active page id
			this.setActivePage(pageList[0].getId());
		}
		
		this._oSwipeView = new window.SwipeView(domRef, 
			{	numberOfPages : pageList.length,
				loop: this.getLoop(),
			});
		//remove touch listeners because carousel will delegate
		//corresponding events (see carousel's'ontouchstart', ontouchmove', ontouchend' functions)
		var aTEvts = ['touchstart', 'touchmove', 'touchend', 'mousedown', 'mousemove', 'mouseup'];
		for (var i = 0; i < aTEvts.length; i++) {
			domRef.removeEventListener(aTEvts[i], this._oSwipeView, false);
		}
		//add css class to manipulate slider's properties
		jQuery(this._oSwipeView.slider).css("-webkit-transition-timing-function", "cubic-bezier(0.31, 0.385, 0.585, 1.0)");
		
		this._oSwipeView.fnLoadingCallback = jQuery.proxy( this._toggleBusyIcon, this);
		this._oSwipeView.onFlip(jQuery.proxy( this._doSwipeCompleted, this));
		this._oSwipeView.onMoveOut(jQuery.proxy( this._doSwipeStarted, this));
		this._oSwipeView.onMoveIn(jQuery.proxy( this._doMoveIn, this));
		
		this._aMasterPageDivs = [];
		this._aBusyIndicators = [];
		
		
		var rm = sap.ui.getCore().createRenderManager();
		for (var i=0; i<3; i++) {
			var ithContId = this._getContentId() + "-MstPgCont-" + i;
			rm.write("<div id='" + ithContId +"' class='sapMCrslContMstPag'></div>");
			this._aBusyIndicators[i] = new sap.m.BusyIndicator({size: '6em'});
			var $ithMasterPage = jQuery.sap.domById(this._oSwipeView.masterPages[i].id);
			rm.renderControl(this._aBusyIndicators[i]);
			rm.flush($ithMasterPage, false);
			
			this._aMasterPageDivs[i] = jQuery.sap.byId(ithContId);
			//add css class to center busy indicator
			this._aBusyIndicators[i].$().addClass("sapMCrslContMstPag");
		}
		rm.destroy();
		
		if(!this._moveToActivePage()){
			//this means that initial page has not changed. Since this
			//is the first time, 'unloadPage' must not
			//be fired for initial rendering
			this._doSwipeCompleted(null, true);
		}
	} else {
		//Called after re-rendering
		if(this.getPageIndicatorPlacement() == sap.m.PlacementType.Top) {
			//The page indicator is already rendered as first child of carousel. Since it must stay
			//on TOP, the wrapper, which contains the carousel content is inserted
			//after the page indicator
			jQuery.sap.byId(this.getId()).append(this._oSwipeView.wrapper);
		} else {
			//Page indicator shall displayed at bottom and is already in DOM. Therefore, the 
			//wrapper which contains the carousel elements must be inserted before the page indicator
			jQuery(this._oSwipeView.wrapper).insertBefore(jQuery.sap.byId(this._getNavId()));
		}
		
		this._doSwipeCompleted(null, true);
	}
	
	
	//Add tap events to 'Previous' and 'Next' div
	this._createTapBindings();
};


/**
 * Called when the control touch start. Delegates corresponding event to swipe-view.
 *
 * @private
 */
sap.m.Carousel.prototype.ontouchstart = function(oEvent) {
	//for controls which need to know if they should handle events from the Carousel control
	if(this._oSwipeView) {
		this._oSwipeView.__start(oEvent);
	}
	oEvent.originalEvent._sapui_handledByControl = true;
};

/**
 * Called when the control touch is moved. Delegates corresponding event to swipe-view.
 *
 * @private
 */
sap.m.Carousel.prototype.ontouchmove = function(oEvent) {
	//for control who need to know if they should handle events from the Carousel control
	if(this._oSwipeView) {
		this._oSwipeView.__move(oEvent);
	}
};

/**
 * Called when the control touch ends. Delegates corresponding event to swipe-view.
 *
 * @private
 */
sap.m.Carousel.prototype.ontouchend = function(oEvent) {
	if(this._oSwipeView) {
		this._oSwipeView.__end(oEvent);
	}
};

/**
 * API method to set carousel's active page during runtime.
 * 
 * @param oPage Id of the page or page which shall become active
 *
 */
sap.m.Carousel.prototype.setActivePage = function (oPage) {
	var oPageId = undefined;
	if(typeof(oPage) == 'string') {
		oPageId = oPage;
	} else if (oPage instanceof sap.ui.core.Control) {
		oPageId = oPage.getId();
	}
	
	if(oPageId) {
		this.setAssociation("activePage", oPageId, true);
		this._moveToActivePage();
	} else {
		jQuery.sap.assert(false, "sap.m.Carousel.prototype.setActivePage: Cannot set active page '" + 
				oPage + "' because it is neither of type 'string' nor a *sap.ui.core.Control'");
	}
	
	return this;
};

/**
 * Private method to add a control to the list of pages which is 
 * displayed in the carousel or to to insert a control at a certain 
 * position into the list of pages.
 * 
 * @param oPage page which is added to the list of pages to be 
 *		displayed in the carousel
 * @param iIndex position at which oPage shall be added
 */	
sap.m.Carousel.prototype._addPage = function(oPage, iIndex) {

	//Re-render only if there are no pages currently
	//(in this case there is no dom entry available)
	var bDoRerender = this.getPages().length == 0; 
	var bIsInsert = typeof(iIndex) == 'number';
	
	if(bIsInsert){
		this.insertAggregation("pages", oPage, iIndex, !bDoRerender);
	} else {
		this.addAggregation("pages", oPage, !bDoRerender);
	}
	
	//update page indicator if swipe view instance is already present
	if(!!this._oSwipeView) {
		this._oSwipeView.updatePageCount(this.getPages().length);
		
		if(!bDoRerender) {
			if(bIsInsert){
				//removed page may be displayed already. To make sure
				//that this does not cause problems, We will refill all 
				//master pages' content
				for (var i=0; i<3; i++) {
					var ithContId = this._getContentId() + "-MstPgCont-" + i;
					jQuery.sap.byId(ithContId).empty();
				}
			}
			//This is necessary because the number of pages has changed
			this._rerenderPageIndicatorDots();
		}
		//Calling 'goToPage' triggers re-calculation of upcoming indices
		//in swipe-view's master pages
		//The currently active page is not changed
		this._oSwipeView.goToPage(this._oSwipeView.page);
	}
	return this;
};

	

/**
 * API method to add a control to the list of pages which is 
 * displayed in the carousel.
 * 
 * @param oPage page which is added to the list of pages to be 
 *		displayed in the carousel
 * @public
 */	
sap.m.Carousel.prototype.addPage = function(oPage) {
	return this._addPage(oPage);
};

/**
 * API method to insert a control at a certain position to the list of
 * pages which is displayed in the carousel.
 * 
 * @param oPage page which is added to the list of pages to be 
 *		displayed in the carousel
 * @param iIndex position at which oPage shall be added
 * @public
 */	
sap.m.Carousel.prototype.insertPage = function(oPage, iIndex) {
	return this._addPage(oPage, iIndex);
};

/**
 * Private method to remove one or all control from the list of pages which is 
 * displayed in the carousel. Used to model removePage, removeAllPages, destroyPages
 * 
 * @param bAll remove all pages
 * @param bDestroy destroy all pages. Only taken into consideration if bAll is true
 * @param oPage page which shall be removed from the list of pages to be 
 *		displayed in the carousel
 * @return sap.m.Carousel the Carousel instance for method chaining 
 */	
sap.m.Carousel.prototype._removePages = function(bAll, bDestroy, oPage) {
	if(bAll) {
		if(bDestroy) {
			this.destroyAggregation("pages", true);
		} else {
			this.removeAllAggregation("pages", true);
		}
	} else if (!!oPage) {
		this.removeAggregation("pages", oPage, true);
	}
	//re-render if swipe view instance is already present
	if(!!this._oSwipeView) {
		
		//This is necessary because the number of pages has changed
		this._rerenderPageIndicatorDots();
		this._oSwipeView.updatePageCount(this.getPages().length);
		
		//Removed page may be displayed already. To make sure
		//that this does not cause problems, We will refill all 
		//master pages' content
		for (var i=0; i<3; i++) {
			var ithContId = this._getContentId() + "-MstPgCont-" + i;
			jQuery.sap.byId(ithContId).empty();
		}
		
		//calling 'goToPage' triggers re-calculation of upcoming indices
		//in swipe-view's master pages
		this._oSwipeView.goToPage(this._oSwipeView.page);
	}
	return this;
}

/**
 * API method to remove a control from the list of pages which is 
 * displayed in the carousel.
 * 
 * @param oPage page which shall be removed from the list of pages to be 
 *		displayed in the carousel
 * @return sap.m.Carousel the Carousel instance for method chaining 
 * @public
 */	
sap.m.Carousel.prototype.removePage = function(oPage) {
	return this._removePages(false, false, oPage); 
};

/**
 * API method to remove all pages which are displayed in the carousel.
 * These pages can be re-used afterwards though, as opposed to 
 * 'destroyPages'.
 * 
 * @param oPage page which shall be removed from the list of pages to be 
 *		displayed in the carousel
 * @return sap.m.Carousel the Carousel instance for method chaining 
 * @public
 */	
sap.m.Carousel.prototype.removeAllPages = function() {
	return this._removePages(true, false); 
};

/**
 * API method to remove and destroy all pages which are displayed in the carousel.
 * These pages can not be re-used afterwards.
 * 
 * @param oPage page which shall be removed from the list of pages to be 
 *		displayed in the carousel
 * @return sap.m.Carousel the Carousel instance for method chaining 
 * @public
 */	
sap.m.Carousel.prototype.destroyPages = function() {
	return this._removePages(true, true); 
};

/**
 * API method to remove all pages which are displayed in the carousel.
 * These pages can be re-used afterwards though, as opposed to 
 * 'destroyPages'.
 * 
 * @param oPage page which shall be removed from the list of pages to be 
 *		displayed in the carousel
 * @return sap.m.Carousel the Carousel instance for method chaining 
 * @public
 */	
sap.m.Carousel.prototype.removePage = function(oPage) {
	return this._removePages(false, false, oPage); 
};


/**
 * API method to set the carousel's height
 *
 * @param oHeight the new height as CSSSize
 * @public
 */
sap.m.Carousel.prototype.setHeight = function(oHeight) {
	//do suppress rerendering
	this.setProperty("height", oHeight, true);
	jQuery.sap.byId(this.getId()).css("height", oHeight);
	return this;
};

/**
 * API method to set the carousel's width
 *
 * @param oWidth the new width as CSSSize
 * @public
 */
sap.m.Carousel.prototype.setWidth = function(oWidth) {
	//do suppress rerendering
	this.setProperty("width", oWidth, true);
	jQuery.sap.byId(this.getId()).css("width", oWidth);
	return this;
};

/**
 * API method to place the page inidicator. 
 *
 * @param oPlacement either sap.m.PlacementType.Top or sap.m.PlacementType.Bottom
 * @public
 */
sap.m.Carousel.prototype.setPageIndicatorPlacement = function(oPlacement) {
	if(sap.m.PlacementType.Top != oPlacement &&
			sap.m.PlacementType.Bottom != oPlacement) {
		jQuery.sap.assert(false, "sap.m.Carousel.prototype.setPageIndicatorPlacement: invalid value '" + 
				oPlacement + "'. Valid values: sap.m.PlacementType.Top, sap.m.PlacementType.Bottom." +
						"\nUsing default value sap.m.PlacementType.Bottom");
		oPlacement = sap.m.PlacementType.Bottom;
	}
	
	//do NOT suppress rerendering
	this.setProperty("pageIndicatorPlacement", oPlacement);
	return this;
};

/**
 * API method to set whether the carousel should loop, i.e
 * show the first page after the last page is reached and vice 
 * versa.
 *
 * @param bLoop the new loop property
 * @public
 */
sap.m.Carousel.prototype.setLoop = function(bLoop) {
	if(!!this._oSwipeView) {
		this._oSwipeView.options.loop = bLoop;
	}
	
	//do suppress rerendering
	this.setProperty("loop", bLoop, true);
	return this;
};

/**
 * API method to set whether the carousel should display the page indicator
 *
 * @param bLoop the new loop property
 * @public
 */
sap.m.Carousel.prototype.setShowPageIndicator = function(bShowPageIndicator) {
	
	var $PageInd = jQuery.sap.byId(this._getNavId());
	
	if(!!$PageInd) {
		if(bShowPageIndicator) {
			$PageInd.show();
		} else {
			$PageInd.hide();
		}
	}
	
	//do suppress rerendering
	this.setProperty("showPageIndicator", bShowPageIndicator, true);
	return this;
};

/**
 * API method to show the next page in the page list.
 * @public
 */
sap.m.Carousel.prototype.previous = function () {
	if (!!this._oSwipeView) {
		this._oSwipeView.prev();
		this._updateVisualIndicator(this._oSwipeView.pageIndex);
	}
	return this;
}; 

/**
 * API method to show the previous page in the page list.
 * @public
 */
sap.m.Carousel.prototype.next = function () {
	if (!!this._oSwipeView) {
		this._oSwipeView.next();
		this._updateVisualIndicator(this._oSwipeView.pageIndex);
	}
	return this;
};

/**
 * Called when page swipe is initiated. 
 * 
 * @private
 */
sap.m.Carousel.prototype._doSwipeStarted = function () {
	
	this._oSwipeView.initialSizeCheck();
	
	//Make sure the visual indicator is updated when pages 
	//are flipped quickly
	this._updateVisualIndicator(this._oSwipeView.pageIndex);
};


/**
 * 'MoveIn' event is triggered instead 'flip' during 'hasty' page flips. Contains
 * a workaround to prevent swipe view from getting stuck after 'hasty' page flip
 * 
 * @private
 */
sap.m.Carousel.prototype._doMoveIn = function () {
	//Delayed call to make sure, any pending rendering is completed
	setTimeout(jQuery.proxy(function() {
		//sync currently displayed page with swipeview index
		if(!!this._oSwipeView) {
			this._doSwipeCompleted();
		}
	}, this), 250);
	
	
};


/**
 * Called after page change is complete. Takes care of the necessary 
 * re-rendering and property updates
 * 
 * @param oEvent generic event parameter
 * @param bInitialLoad if true, 'unloadPage' will not be fired. This is necessary on initial load.
 * @private
 */
sap.m.Carousel.prototype._doSwipeCompleted = function (oEvent, bInitialLoad) {
	var upcoming, i;
	var pageList = this.getPages();
	if(pageList.length == 0) {
		return;
	}
	
	//Page swipe is complete. Prepare to fire 'SwipeCompleted' event
	//Figure out ids of previous and next page
	var pPId =  pageList[this._oSwipeView.pageIndex - 1] ?  pageList[this._oSwipeView.pageIndex - 1].getId() : null;
	var nPId =  pageList[this._oSwipeView.pageIndex + 1] ?  pageList[this._oSwipeView.pageIndex + 1].getId() : null;
	
	if(this.getLoop()) {
		if(!pPId) {
			//if in loop mode, the page left to first page is the last page
			pPId = pageList[pageList.length-1].getId();
		} 
		if(!nPId) {
			//if in loop mode, the page right to last page is the first page
			nPId = pageList[0].getId();
		} 
	}
	
	//Put down active page id before for teh 'pageChanged' event 
	var sOldActivePageId = this.getActivePage();
	var rm = sap.ui.getCore().createRenderManager();
	//Reminder for the pages which will be kicked out after swipe. May be more than one if it is a fast swipe
	var aDeletedPages = [];

	//If there are less than 3 pages to display, we do not need
	//to populate all master pages
	var first = pageList.length > 2 ? 0 : 1;
	var last = pageList.length == 1 ? 2 : 3;
	
	for (i=first; i<last; i++) {
		//make sure 'upcoming' is a number. This is necessary if it is used to update
		//swipe view's current page nr
		upcoming = parseInt(this._oSwipeView.masterPages[i].dataset.upcomingPageIndex, 10);
		//first condition in if clause: masterPage needs new child
		//second condition: pageIndex is the dame as upcoming but there is no dom ref
		//this may happen when '_doSwipeCompleted' is triggered during startup
		var current = parseInt(this._oSwipeView.masterPages[i].dataset.pageIndex, 10);
		
		if (upcoming != current || !pageList[upcoming].getDomRef()) {
			aDeletedPages[i] = current; 
			
			//Check if page has been shown before. If not fire 'BeforeFirstShow'
			if(!pageList[upcoming]._bShownInMCarousel) {
				pageList[upcoming]._bShownInMCarousel = true;
				var oBeforeFirstShowEvent = jQuery.Event("BeforeFirstShow");
				oBeforeFirstShowEvent.srcControl = this;
				pageList[upcoming]._handleEvent(oBeforeFirstShowEvent);
			}

			//Fire 'BeforeShow' on upcoming control
			var oBeforeShowEvent = jQuery.Event("BeforeShow");
			oBeforeShowEvent.srcControl = this;
			pageList[upcoming]._handleEvent(oBeforeShowEvent);
			
			if(!!pageList[upcoming].getDomRef()) {
				// Need to remove this element from DOM because it will
				// be added again somewhere else
				jQuery(pageList[upcoming].getDomRef()).remove();
			}
			rm.renderControl(pageList[upcoming]);
			rm.flush(jQuery.sap.domById(this._getContentId() + "-MstPgCont-" + i ), false);
			
			//Event is fired before rendering of new page takes place to let clients
			//prepare these pages
			this.fireLoadPage({pageId: pageList[upcoming].getId()});
		} 
		var $ithMasterPage = jQuery(this._oSwipeView.masterPages[i]);
		//Page is loaded, remove busy indicator
		$ithMasterPage.removeClass("swipeview-loading");
		this._toggleBusyIcon(i, false);
		
		//Make sure that swipe-view pointer to current page is
		//up to date. This may sometimes not be the case, especially after
		//hasty page flips
		if($ithMasterPage.hasClass("swipeview-active")) {
			//This is where we 
			this._oSwipeView.pageIndex = upcoming; 
			//Also make sure that the master page is not hidden
			//Using same coding style as in swipe-view-js here
			this._oSwipeView.masterPages[i].style.visibility = '';
		}
	}
	
	this._updatePageWidths();
	
	//this updates the active page member and the visual indicator
	this._updateActivePage();
	if(!bInitialLoad) {
		for(i=0; i<3; i++) {
			if(!isNaN(aDeletedPages[i]) && !!pageList[aDeletedPages[i]]) {
				this.fireUnloadPage({ pageId: pageList[aDeletedPages[i]].getId()});
				//Fire 'AfterHide' on discarded control
				var oEvent = jQuery.Event("AfterHide");
				oEvent.srcControl = this;
				pageList[aDeletedPages[i]]._handleEvent(oEvent);
			}
		}
	}
	
	
	//Delayed call to make sure, any pending rendering is completed
	setTimeout(jQuery.proxy(function() {
		this._oSwipeView.__resize();
		if(!bInitialLoad) {
			this.firePageChanged({ oldActivePageId: sOldActivePageId,
				newActivePageId: this.getActivePage()});
		}
	}, this), 50);
	//clean up
	rm.destroy();
	//reset global swipe event flag
	this.bSuppressFireSwipeEvents = false;
};

/**
 * Moves the carousel to the currently active page by calling 'next' or 'prev'
 * several times.
 * 
 * @param newActivePageNr number of the new active page. Saves one call of the '_getPageNumber' method
 * @return true if move was necessary
 * @private
 */
sap.m.Carousel.prototype._moveToActivePage = function () {
	var bResult = false;
	var pageList = this.getPages();
	if (!!this._oSwipeView && pageList.length > 0) {
		this.bSuppressFireSwipeEvents = true;
		var lastActivePageNr = this._oSwipeView.pageIndex;
		var newActivePageNr = this._getPageNumber(this.getActivePage());
		
		if(isNaN(newActivePageNr)) {
			jQuery.sap.log.warning(false, "sap.m.Carousel.prototype._moveToActivePage: Cannot navigate to page '" + 
					this.getActivePage() + "' because it is not contained in the carousel's pages aggregation. Using 1. page instead");
			
			//initialize active page id
			this.setActivePage(pageList[0].getId());
			newActivePageNr = 0;
		}
		
		//Check if we have to step forward or backward to get to the new active page
		var fnMove = lastActivePageNr < newActivePageNr ? this.next : this.previous;  
		
		while (this._oSwipeView.pageIndex != newActivePageNr) {
			fnMove.apply(this);
			bResult = true;
		}
			
		this.bSuppressFireSwipeEvents = false;
	}
	return bResult;
};

/**
 * Determines the position of a given page in the carousel's page list
 * 
 * @return the position of a given page in the carousel's page list or 'undefined' if it does not exist in the list.
 * @private
 */
sap.m.Carousel.prototype._getPageNumber = function(oPage) {
	var i, result;
	
	for(i=0; i<this.getPages().length; i++) {
		if(this.getPages()[i].getId() == oPage) {
			result = i;
			break;
		}
	}
	return result;
};

/**
 * Updates visual indicator
 * 
 * @param iActivePageNr current active page
 * @private
 */
sap.m.Carousel.prototype._updateVisualIndicator = function (iActivePageNr) {
	if (!!this._oSwipeView) {
		//update visual indicator
		var selectedDot = document.querySelector('#' + this._getNavId() + ' .sapMCrslIndLstItSel');
		if(selectedDot) {
			jQuery.sap.byId(selectedDot.id).removeClass('sapMCrslIndLstItSel');
		}
		var dots = document.querySelectorAll('#' + this._getNavId() + ' .sapMCrslIndLstIt');
		//'dots' may be empty if carousel has already been removed from DOM
		if(dots[iActivePageNr]) {
			jQuery.sap.byId(dots[iActivePageNr].id).addClass('sapMCrslIndLstItSel');
		}
	}
};



/**
 * Updates 'ActivePage' association and the visual indicator. 
 * 
 * @param iActivePageNr current active page
 * @private
 */
sap.m.Carousel.prototype._updateActivePage = function () {
	if (!!this._oSwipeView) {
		var activePageNr = this._oSwipeView.pageIndex;
		var oPage = this.getPages()[activePageNr];
		this.setAssociation("activePage", oPage, true);
		//update visual indicator
		this._updateVisualIndicator(activePageNr);
	}
};


/**
 * Provides ID of indicator list for easy css class updates
 * 
 * @private
 */
sap.m.Carousel.prototype._getNavId = function() {
	return this.getId() + '-nav';
};

/**
 * Provides ID of carousel content for easy css class updates
 * 
 * @private
 */
sap.m.Carousel.prototype._getContentId = function() {
	return this.getId() + '-content';
};

/**
 * Provides ID of previous button for easy css class updates
 * 
 * @private
 */
sap.m.Carousel.prototype._getPrevBtnId = function() {
	return this.getId() + '-prevBtn';
};

/**
 * Provides ID of next button for easy css class updates
 * 
 * @private
 */
sap.m.Carousel.prototype._getNextBtnId = function() {
	return this.getId() + '-nextBtn';
};


/**
 * Refresh sizes after Orientation change (only necessary for non ios)
 * @param oEvent the event parameter
 * @private
 */
sap.m.Carousel.prototype._handleOrientationChange = function() {
	//Delayed call to make sure, any pending rendering is completed.
	//Must wait 200ms, otherwise the client width is not updated yet
	//after orientation change.
	if(!jQuery.os.ios && !!this._oSwipeView){
		setTimeout(jQuery.proxy(function() {
			this._oSwipeView.__resize();
			this._updatePageWidths();
		}, this), 250);
	}
};


/**
 * Displays busy icon and hides content on a given masterpage or vice versa.
 * @param iMasterPage masterPage which shall be updated
 * @param bShowBusyIcon if true, the busy icon will be displayed on the
 * masterpage and the content will be hidden.
 * @private
 */
sap.m.Carousel.prototype._toggleBusyIcon = function(iMasterPage, bShowBusyIcon) {
	if(bShowBusyIcon) {
		this._aBusyIndicators[iMasterPage].$().show();
		this._aMasterPageDivs[iMasterPage].hide();
	} else {
		this._aBusyIndicators[iMasterPage].$().hide();
		this._aMasterPageDivs[iMasterPage].show();
	}
};

/**
 * Workaround for an Android Bugfor image pages: sets the width of each image page to the 
 * currently available width within the device.
 * 
 * @private 
 */
sap.m.Carousel.prototype._updatePageWidths = function() {
	if(jQuery.os.android && !!jQuery.os.version && (!!jQuery.os.version.match(/2\.3\.[0-9]*/))){
		var pageList = this.getPages();
		var domRef = jQuery.sap.domById(this._getContentId());
		var pageWidth = domRef.clientWidth + "px";
		
		//In Android 2.3, we overwerite any widths which have been assigned
		//to the carousel pages to avoid a sizing issue
		for(var i=0; i<pageList.length; i++) {
			if(pageList[i] instanceof sap.m.Image) {
				jQuery.sap.byId(pageList[i].getId()).css("max-width", pageWidth)
			}
		}
	}
};


/**
 * Re-renders the carousel's page indicator dots
 *
 * @private
 */
sap.m.Carousel.prototype._rerenderPageIndicatorDots = function() {
	//The Tap bindings for 'next' and 'previous' button get lost 
	//after re-rendering, so we clean them up
	this._cleanUpTapBindings();
	
	var pageIndicator = jQuery.sap.domById(this._getNavId());
	var rm = sap.ui.getCore().createRenderManager();
	sap.m.CarouselRenderer.renderPageIndicatorDots(rm, this);
	rm.flush(pageIndicator);
	rm.destroy();
	
	//Re-create tap bindings for previous - and next- button
	//after rendering
	this._createTapBindings();
};




}; // end of sap.m.Carousel
if ( !jQuery.sap.isDeclared('sap.m.CheckBox') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.CheckBox.
jQuery.sap.declare("sap.m.CheckBox");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new CheckBox.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSelected selected} : boolean (default: false)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '')</li>
 * <li>{@link #getActiveHandling activeHandling} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.CheckBox#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * CheckBox control
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.m.CheckBox
 */
sap.ui.core.Control.extend("sap.m.CheckBox", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"selected" : {type : "boolean", group : "Data", defaultValue : false},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"name" : {type : "string", group : "Misc", defaultValue : null},
		"text" : {type : "string", group : "Appearance", defaultValue : null},
		"textDirection" : {type : "sap.ui.core.TextDirection", group : "Appearance", defaultValue : sap.ui.core.TextDirection.Inherit},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : ''},
		"activeHandling" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	events : {
		"select" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.CheckBox with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.CheckBox.extend
 * @function
 */

sap.m.CheckBox.M_EVENTS = {'select':'select'};


/**
 * Getter for property <code>selected</code>.
 * Contains the state of the control whether it is flagged with a check mark, or not
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>selected</code>
 * @public
 * @name sap.m.CheckBox#getSelected
 * @function
 */


/**
 * Setter for property <code>selected</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bSelected  new value for property <code>selected</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CheckBox#setSelected
 * @function
 */

/**
 * Getter for property <code>visible</code>.
 * Invisible control is not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.CheckBox#getVisible
 * @function
 */


/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CheckBox#setVisible
 * @function
 */

/**
 * Getter for property <code>enabled</code>.
 * Using this property, the control could be disabled, if required.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.m.CheckBox#getEnabled
 * @function
 */


/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CheckBox#setEnabled
 * @function
 */

/**
 * Getter for property <code>name</code>.
 * The 'name' property to be used in the HTML code, for example for HTML forms that send data to the server via submit.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * @name sap.m.CheckBox#getName
 * @function
 */


/**
 * Setter for property <code>name</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CheckBox#setName
 * @function
 */

/**
 * Getter for property <code>text</code>.
 * Defines the text displayed next to the check box
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.CheckBox#getText
 * @function
 */


/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CheckBox#setText
 * @function
 */

/**
 * Getter for property <code>textDirection</code>.
 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
 *
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code>
 *
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * @name sap.m.CheckBox#getTextDirection
 * @function
 */


/**
 * Setter for property <code>textDirection</code>.
 *
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code> 
 *
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CheckBox#setTextDirection
 * @function
 */

/**
 * Getter for property <code>width</code>.
 * Width of Label
 *
 * Default value is <code>''</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.CheckBox#getWidth
 * @function
 */


/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CheckBox#setWidth
 * @function
 */

/**
 * Getter for property <code>activeHandling</code>.
 * this is a flag to switch on activeHandling, when it is switched off, there will not be visual changes on active state. Default value is 'true'
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>activeHandling</code>
 * @public
 * @name sap.m.CheckBox#getActiveHandling
 * @function
 */


/**
 * Setter for property <code>activeHandling</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bActiveHandling  new value for property <code>activeHandling</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CheckBox#setActiveHandling
 * @function
 */

/**
 * Event is triggered when the control status is changed by the user by selecting or deselecting the checkbox. 
 *
 * @name sap.m.CheckBox#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.selected Checks whether the CheckBox is flagged or not flagged.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.CheckBox</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.CheckBox</code>.<br/> itself. 
 *  
 * Event is triggered when the control status is changed by the user by selecting or deselecting the checkbox. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.CheckBox</code>.<br/> itself.
 *
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CheckBox#attachSelect
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.CheckBox</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CheckBox#detachSelect
 * @function
 */


/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selected' of type <code>boolean</code> Checks whether the CheckBox is flagged or not flagged.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.CheckBox#fireSelect
 * @function
 */

// Start of sap/m/CheckBox.js

sap.m.CheckBox.prototype.init = function() {
	this.addActiveState(this);
};


/**
 * Called when the control is touched.
 *
 * @private
 */
sap.m.CheckBox.prototype.ontouchstart = function(oEvent) {
	//for control who need to know if they should handle events from the CheckBox control
	oEvent.originalEvent._sapui_handledByControl = true;
};

sap.m.CheckBox.prototype.setSelected = function(bSelected) {
	jQuery.sap.byId(this.getId()+'-CB').toggleClass("sapMCbMarkChecked", bSelected);
	this.setProperty("selected", bSelected, true);
	return this;
}

/**
 * Function is called when CheckBox is tapped.
 * 
 * @private
 */
sap.m.CheckBox.prototype.ontap = function(oEvent) {
	if (this.getEnabled()) {
		var bSelected = !this.getSelected();
		this.setSelected(bSelected);
		this.fireSelect({selected:bSelected});
	}
};

/**
 * add ActiveState to non-supported mobile platform
 * @private
 */
 
sap.m.CheckBox.prototype.addActiveState = function(oControl) {
	if (jQuery.os.blackberry || (jQuery.os.android && (jQuery.os.version.match(/[23]\./)))){
		oControl.addDelegate({
			ontouchstart: function(oEvent){
				jQuery(oControl.getDomRef()).addClass("sapMActive");
			},
			ontouchend: function(oEvent){
				jQuery(oControl.getDomRef()).removeClass("sapMActive");
			}
		});
	}
};

sap.m.CheckBox.prototype.setText = function(sText){
	this.setProperty("text", sText, true);	
	if(this._oLabel){
		this._oLabel.setText(this.getText());
	}else{
		this._createLabel("text", this.getText());
	}
	return this;
};

sap.m.CheckBox.prototype.setWidth = function(sWidth){
	this.setProperty("width", sWidth, true);	
	if(this._oLabel){
		this._oLabel.setWidth(this.getWidth());
	}else{
		this._createLabel("width", this.getWidth());
	}
	return this;
};

sap.m.CheckBox.prototype.setTextDirection = function(sDirection){
	this.setProperty("textDirection", sDirection, true);	
	if(this._oLabel){			
		this._oLabel.setTextDirection(this.getTextDirection());
	}else{
		this._createLabel("textDirection", this.getTextDirection());
	}
	return this;
};

sap.m.CheckBox.prototype.exit = function() {
	if(this._oLabel){
		this._oLabel.destroy();
	}
}

sap.m.CheckBox.prototype._createLabel = function(prop, value){
	this._oLabel = new sap.m.Label(this.getId() + "-label", {
					}).addStyleClass("sapMRbBLabel").setParent(this, null, true);
	this._oLabel.setProperty(prop, value, false);
}

}; // end of sap.m.CheckBox
if ( !jQuery.sap.isDeclared('sap.m.CustomListItemRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.CustomListItemRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class CustomListItem renderer.
 * @static
 */
sap.m.CustomListItemRenderer = sap.ui.core.Renderer.extend(sap.m.ListItemBaseRenderer);

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.m.CustomListItemRenderer.renderLIAttributes = function(rm, oLI) {
	rm.addClass("sapMCLI");
};

sap.m.CustomListItemRenderer.renderLIContent = function(rm, oLI) {
	var aContent = oLI.getContent();
	var cLength = aContent.length;
	for ( var i = 0; i < cLength; i++) {
		rm.renderControl(aContent[i]);
	}
};
}; // end of sap.m.CustomListItemRenderer
if ( !jQuery.sap.isDeclared('sap.m.Dialog') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Dialog.
jQuery.sap.declare("sap.m.Dialog");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Dialog.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getTitle title} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getLeftButton leftButton} : string | sap.m.Button</li>
 * <li>{@link #getRightButton rightButton} : string | sap.m.Button</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Dialog#event:beforeOpen beforeOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Dialog#event:afterOpen afterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Dialog#event:beforeClose beforeClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Dialog#event:afterClose afterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The Dialog control is used to interrupt the current processing of an application to prompt the user for information or a response.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.m.Dialog
 */
sap.ui.core.Control.extend("sap.m.Dialog", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"open", "close"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"icon" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},
		"title" : {type : "string", group : "Appearance", defaultValue : null}
	},
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}
	},
	associations : {
		"leftButton" : {type : "sap.m.Button", multiple : false}, 
		"rightButton" : {type : "sap.m.Button", multiple : false}
	},
	events : {
		"beforeOpen" : {}, 
		"afterOpen" : {}, 
		"beforeClose" : {}, 
		"afterClose" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Dialog with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Dialog.extend
 * @function
 */

sap.m.Dialog.M_EVENTS = {'beforeOpen':'beforeOpen','afterOpen':'afterOpen','beforeClose':'beforeClose','afterClose':'afterClose'};


/**
 * Getter for property <code>icon</code>.
 * Icon that is displayed in the dialog header. This icon is invisible in iOS platform and it's density aware that you can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density screen.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.m.Dialog#getIcon
 * @function
 */


/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#setIcon
 * @function
 */

/**
 * Getter for property <code>title</code>.
 * Title text appears in the dialog header.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.Dialog#getTitle
 * @function
 */


/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#setTitle
 * @function
 */
	
/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content inside the dialog.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.Dialog#getContent
 * @function
 */

/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#insertContent
 * @function
 */


/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#addContent
 * @function
 */


/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.m.Dialog#removeContent
 * @function
 */


/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.Dialog#removeAllContent
 * @function
 */


/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.Dialog#indexOfContent
 * @function
 */


/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#destroyContent
 * @function
 */

/**
 * LeftButton is shown at the left edge of the bar in iOS, and at the right side of the bar for the other platforms. Please set this to null if you want to remove the left button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.
 *
 * @return {string} Id of the element which is the current target of the <code>leftButton</code> association, or null
 * @public
 * @name sap.m.Dialog#getLeftButton
 * @function
 */


/**
 * LeftButton is shown at the left edge of the bar in iOS, and at the right side of the bar for the other platforms. Please set this to null if you want to remove the left button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.
 *
 * @param {string | sap.m.Button} vLeftButton 
 *    Id of an element which becomes the new target of this <code>leftButton</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#setLeftButton
 * @function
 */

/**
 * RightButton is always shown at the right edge of the bar. Please set this to null if you want to remove the right button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.
 *
 * @return {string} Id of the element which is the current target of the <code>rightButton</code> association, or null
 * @public
 * @name sap.m.Dialog#getRightButton
 * @function
 */


/**
 * RightButton is always shown at the right edge of the bar. Please set this to null if you want to remove the right button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.
 *
 * @param {string | sap.m.Button} vRightButton 
 *    Id of an element which becomes the new target of this <code>rightButton</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#setRightButton
 * @function
 */

/**
 * This event will be fired before the dialog is opened. 
 *
 * @name sap.m.Dialog#beforeOpen
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'beforeOpen' event of this <code>sap.m.Dialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Dialog</code>.<br/> itself. 
 *  
 * This event will be fired before the dialog is opened. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code>.<br/> itself.
 *
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#attachBeforeOpen
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'beforeOpen' event of this <code>sap.m.Dialog</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#detachBeforeOpen
 * @function
 */


/**
 * Fire event beforeOpen to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Dialog#fireBeforeOpen
 * @function
 */

/**
 * This event will be fired after the dialog is opened. 
 *
 * @name sap.m.Dialog#afterOpen
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterOpen' event of this <code>sap.m.Dialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Dialog</code>.<br/> itself. 
 *  
 * This event will be fired after the dialog is opened. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code>.<br/> itself.
 *
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#attachAfterOpen
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'afterOpen' event of this <code>sap.m.Dialog</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#detachAfterOpen
 * @function
 */


/**
 * Fire event afterOpen to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Dialog#fireAfterOpen
 * @function
 */

/**
 * This event will be fired before the dialog is closed. 
 *
 * @name sap.m.Dialog#beforeClose
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'beforeClose' event of this <code>sap.m.Dialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Dialog</code>.<br/> itself. 
 *  
 * This event will be fired before the dialog is closed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code>.<br/> itself.
 *
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#attachBeforeClose
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'beforeClose' event of this <code>sap.m.Dialog</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#detachBeforeClose
 * @function
 */


/**
 * Fire event beforeClose to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Dialog#fireBeforeClose
 * @function
 */

/**
 * This event will be fired after the dialog is closed. 
 *
 * @name sap.m.Dialog#afterClose
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterClose' event of this <code>sap.m.Dialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Dialog</code>.<br/> itself. 
 *  
 * This event will be fired after the dialog is closed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code>.<br/> itself.
 *
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#attachAfterClose
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'afterClose' event of this <code>sap.m.Dialog</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#detachAfterClose
 * @function
 */


/**
 * Fire event afterClose to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Dialog#fireAfterClose
 * @function
 */

/**
 * Open the dialog.
 *
 * @name sap.m.Dialog.prototype.open
 * @function

 * @type void
 * @public
 */


/**
 * Close the dialog.
 *
 * @name sap.m.Dialog.prototype.close
 * @function

 * @type void
 * @public
 */


// Start of sap/m/Dialog.js
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained


jQuery.sap.require('sap.ui.core.delegate.ScrollEnablement'); // unlisted dependency retained


/* =========================================================== */
/*                  begin: Lifecycle functions                 */
/* =========================================================== */
sap.m.Dialog.prototype.init = function(){
	var that = this;
	this._$window = jQuery(window);

	this.oPopup = new sap.ui.core.Popup();
	this.oPopup.setShadow(true);
//	if(jQuery.device.is.iphone){
//		this.oPopup.setModal(true, "sapMDialogTransparentBlk");
//	}else{
//		this.oPopup.setModal(true, "sapMDialogBlockLayerInit");
//	}
	
	this.oPopup.setModal(true);

	this.oPopup.setAnimations(this._openAnimation, this._closeAnimation);

	//the orientationchange event listener
	this._fOrientationChange = jQuery.proxy(this._reposition, this);

	this.oPopup._applyPosition = function(oPosition){
		that._setDimensions();
		that._adjustScrollingPane();
		sap.ui.core.Popup.prototype._applyPosition.call(this, oPosition);
	};

	// Animating also the block layer
	this.oPopup._showBlockLayer = function(){
		sap.ui.core.Popup.prototype._showBlockLayer.call(this);
		var $blockLayer = jQuery("#sap-ui-blocklayer-popup");
		if(jQuery.device.is.iphone){
			$blockLayer.addClass("sapMDialogTransparentBlk");
		}else{
			$blockLayer.addClass("sapMDialogBlockLayerAnimation");
			setTimeout(function(){
				$blockLayer.addClass("sapMDialogBlockLayer");
			}, 0);
		}
	};

	this.oPopup._hideBlockLayer = function(){
		var $blockLayer = jQuery("#sap-ui-blocklayer-popup"), that = this;
		if(jQuery.device.is.iphone){
			$blockLayer.removeClass("sapMDialogTransparentBlk");
			sap.ui.core.Popup.prototype._hideBlockLayer.call(this);
		}else{
			$blockLayer.bind("webkitTransitionEnd", function(){
				$blockLayer.unbind("webkitTransitionEnd");
				sap.ui.core.Popup.prototype._hideBlockLayer.call(that);
				$blockLayer.removeClass("sapMDialogBlockLayerAnimation");
			});
			$blockLayer.removeClass("sapMDialogBlockLayer");
		}
	};

	this._oScroller = new sap.ui.core.delegate.ScrollEnablement(this, this.getId() + "-scroll", {
		horizontal: false,
		vertical: true,
		zynga: false,
		preventDefault: false,
		nonTouchScrolling: true
	});
};

sap.m.Dialog.prototype.exit = function(){
	this.oPopup.close();
	this.oPopup.destroy();
	this.oPopup = null;
	if(this._oScroller){
		this._oScroller.destroy();
		this._oScroller = null;
	}

	if(this._header){
		this._header.destroy();
		this._header = null;
	}

	if(this._iconImage){
		this._iconImage.destroy();
		this._iconImage = null;
	}

	this._$window.unbind("resize", this._fOrientationChange);
};
/* =========================================================== */
/*                   end: Lifecycle functions                  */
/* =========================================================== */

/* =========================================================== */
/*                    begin: public functions                  */
/* =========================================================== */
sap.m.Dialog.prototype.open = function(){
	var oPopup = this.oPopup;
	if (oPopup.isOpen()){
		return this;
	}

	this.fireBeforeOpen();
	oPopup.attachEvent(sap.ui.core.Popup.M_EVENTS.opened, this._handleOpened, this);

	// Open popup
	oPopup.setContent(this);
	if(jQuery.device.is.iphone) {
		oPopup.setPosition("center top", "center bottom", document, "0 0", "fit");
	} else {
		oPopup.setPosition("center center", "center center", document, "0 0", "fit");
	}
	oPopup.open();
	return this;
};

sap.m.Dialog.prototype.close = function(){
	var oPopup = this.oPopup;

	var eOpenState = this.oPopup.getOpenState();
	if(!(eOpenState === sap.ui.core.OpenState.CLOSED || eOpenState === sap.ui.core.OpenState.CLOSING)){
		this.fireBeforeClose();
		oPopup.attachEvent(sap.ui.core.Popup.M_EVENTS.closed, this._handleClosed, this);
		oPopup.close();
	}
	return this;
};
/* =========================================================== */
/*                     end: public functions                   */
/* =========================================================== */

/* =========================================================== */
/*                      begin: event handlers                  */
/* =========================================================== */
sap.m.Dialog.prototype._handleOpened = function(){
	this.oPopup.detachEvent(sap.ui.core.Popup.M_EVENTS.opened, this._handleOpened, this);
	// bind to window resize
	// In android, the orientationchange fires before the size of the window changes
	//  that's why the resize event is used here.
	this._$window.bind("resize", this._fOrientationChange);
	this.fireAfterOpen();
};

sap.m.Dialog.prototype._handleClosed = function(){
	this.oPopup.detachEvent(sap.ui.core.Popup.M_EVENTS.closed, this._handleClosed, this);

	this._$window.unbind("resize", this._fOrientationChange);
	this.fireAfterClose();
};
/* =========================================================== */
/*                      end: event handlers                  */
/* =========================================================== */


/* =========================================================== */
/*                      begin: private functions               */
/* =========================================================== */
sap.m.Dialog.prototype._openAnimation = function($Ref, iRealDuration, fnOpened) {
	$Ref.css("display", "block");
	if(jQuery.device.is.iphone) {
		$Ref.addClass("sapMDialogBottom").removeClass("sapMDialogHidden");
		window.setTimeout(function(){
			$Ref.bind("webkitTransitionEnd", function(){
				$Ref.unbind("webkitTransitionEnd");
				$Ref.removeClass("sapMDialogSliding");
				fnOpened();
			});
			$Ref.addClass("sapMDialogSliding").removeClass("sapMDialogBottom");
		}, 60);
	} else {
		$Ref.bind("webkitAnimationEnd", function(){
			$Ref.unbind("webkitAnimationEnd");
			fnOpened();
			$Ref.removeClass("sapMDialogOpening");
		});
		$Ref.addClass("sapMDialogOpening");
	}
};

sap.m.Dialog.prototype._closeAnimation = function($Ref, iRealDuration, fnClose) {
	if(jQuery.device.is.iphone) {
		$Ref.bind("webkitTransitionEnd", function(){
			$Ref.unbind("webkitTransitionEnd");
			$Ref.addClass("sapMDialogHidden").removeClass("sapMDialogBottom").removeClass("sapMDialogSliding");
			fnClose();
		});
		$Ref.addClass("sapMDialogSliding").addClass("sapMDialogBottom");
	} else {
		$Ref.bind("webkitAnimationEnd", function(){
			$Ref.unbind("webkitAnimationEnd");
			fnClose();
			$Ref.removeClass("sapMDialogClosing");
		});
		$Ref.addClass("sapMDialogTransparent sapMDialogClosing");
	}
};

sap.m.Dialog.prototype._setDimensions = function() {
	// Derive width and height from viewport
	this._$window = jQuery(window);
	var iWindowWidth = this._$window.width(),
		iWindowHeight = this._$window.height(),
		iMaxWidth = iWindowWidth - 32,
		iMaxHeight = iWindowHeight - 16,
		iMinValue, iHeaderHeight, iFooterHeight,
		$this = this.$(),
		$content = jQuery.sap.byId(this.getId() + "-cont");

	//reset
	$this.css({
		"width": "",
		"height": "",
		"min-width": "",
		"max-width": "",
		"left": "0px",
		"top": "0px",
		"max-height": ""
	});

	if(jQuery.device.is.tablet){
		$this.css({
			"min-width": "300px",
			"max-width": iMaxWidth + "px",
			"max-height": iMaxHeight + "px"
		});
	}else{
		if(jQuery.device.is.iphone){
			$this.css({width: "100%",  height: "100%"});
		}else{
			if(jQuery.device.is.portrait){
				$this.css({
					"width": iMaxWidth + "px",
					"max-height": iMaxHeight + "px"
				});
			}else{
				iMinValue = iWindowHeight;

				$this.css({
					"min-width": iMinValue + "px",
					"max-width": iMaxWidth + "px",
					"max-height": iMaxHeight + "px"
				});
			}
		}
	}
};

sap.m.Dialog.prototype._adjustScrollingPane = function(){
	var iWindowWidth = this._$window.width(),
		iWindowHeight = this._$window.height(),
		iMaxHeight = jQuery.device.is.iphone ? iWindowHeight : iWindowHeight - 16,
		iHeaderHeight, iFooterHeight,
		$this = this.$(),
		$content = jQuery.sap.byId(this.getId() + "-cont");

	if(jQuery.os.ios){
		iHeaderHeight = $this.children(".sapMBar").outerHeight();
		iFooterHeight = 0;
	}else{
		iHeaderHeight = $this.children("header").outerHeight();
		iFooterHeight = $this.children("footer").outerHeight();
	}

	$content.css(jQuery.device.is.iphone ? "height" : "max-height", iMaxHeight - iHeaderHeight - iFooterHeight);

	this._oScroller.refresh();
};

sap.m.Dialog.prototype._reposition = function() {
	var ePopupState = this.oPopup.getOpenState();
	if(!(ePopupState === sap.ui.core.OpenState.OPEN)){
		return;
	}
	this.oPopup._applyPosition(this.oPopup._oLastPosition);
};

sap.m.Dialog.prototype._createHeader = function(){
	if(jQuery.os.ios){
		if(!this._header){
			// set parent of header to detect changes on title
			this._header = new sap.m.Bar(this.getId()+"-header").setParent(this, null, false);
		}
	}
};

sap.m.Dialog.prototype._getHeader = function(){
	this._createHeader();
	return this._header.addStyleClass("sapMHeader-CTX", true);
};
/* =========================================================== */
/*                      end: private functions                 */
/* =========================================================== */

/* =========================================================== */
/*                         begin: setters                      */
/* =========================================================== */
sap.m.Dialog.prototype.setLeftButton = function(oButton){
	if(typeof(oButton) === "string"){
		oButton = sap.ui.getCore().byId(oButton);
	}

	var oOldLeftButton = this.getLeftButton();

	if(oOldLeftButton === oButton.getId()){
		return this;
	}

	if(jQuery.os.ios){
		this._createHeader();
		if(oButton){
			if(oOldLeftButton){
				this._header.removeAggregation("contentLeft", oOldLeftButton, true);
			}
			this._header.addAggregation("contentLeft", oButton, true);
			this._header.invalidate();
		}else{
			this._header.removeContentLeft(oOldLeftButton);
		}
	}

	this.setAssociation("leftButton", oButton, jQuery.os.ios);
	return this;
};

sap.m.Dialog.prototype.setRightButton = function(oButton){
	if(typeof(oButton) === "string"){
		oButton = sap.ui.getCore().byId(oButton);
	}

	var oOldRightButton = this.getRightButton();

	if(oOldRightButton === oButton.getId()){
		return this;
	}

	if(jQuery.os.ios){
		this._createHeader();
		if(oButton){
			if(oOldRightButton){
				this._header.removeAggregation("contentRight", oOldRightButton, true);
			}
			this._header.addAggregation("contentRight", oButton, true);
			this._header.invalidate();
		}else{
			this._header.removeContentRight(oOldRightButton);
		}
	}

	this.setAssociation("rightButton", oButton, jQuery.os.ios);
	return this;
};

sap.m.Dialog.prototype.setTitle = function(sTitle){
	if(sTitle){
		this.setProperty("title", sTitle, true);

		if(this._headerTitle){
			this._headerTitle.setText(sTitle);
		}else{
			this._headerTitle = new sap.m.Label(this.getId() + "-title", {
				text: sTitle
			});
		}
		if(jQuery.os.ios){
			this._createHeader();
			this._header.addContentMiddle(this._headerTitle);
		}
	}
	return this;
};

sap.m.Dialog.prototype.setIcon = function(sIcon){
	if(!jQuery.os.ios){
		//icon is only shown in non iOS platform
		if(sIcon){
			if(sIcon!==this.getIcon()){
				if(this._iconImage){
					this._iconImage.setSrc(sIcon);
				}else{
					this._iconImage = new sap.m.Image(this.getId() + "-icon", {src: sIcon});
				}


			}
		}else{
			if(this._iconImage){
				this._iconImage.destroy();
				this._iconImage = null;
			}
		}
	}
	this.setProperty("icon", sIcon, true);
	return this;
};
/* =========================================================== */
/*                           end: setters                      */
/* =========================================================== */
}; // end of sap.m.Dialog
if ( !jQuery.sap.isDeclared('sap.m.DisplayListItemRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.DisplayListItemRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class DisplayListItem renderer.
 * @static
 */
sap.m.DisplayListItemRenderer = sap.ui.core.Renderer.extend(sap.m.ListItemBaseRenderer);

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *          oRenderManager the RenderManager that can be used for writing to the
 *          Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *          oControl an object representation of the control that should be
 *          rendered
 */
sap.m.DisplayListItemRenderer.renderLIAttributes = function(rm, oLI) {
	rm.addClass("sapMDLI");
};

sap.m.DisplayListItemRenderer.renderLIContent = function(rm, oLI) {

	var isLabel = oLI.getLabel();

	// List item label
	if (isLabel) {
		rm.write("<label for='" + oLI.getId() + "-value' class='sapMDLILabel'>");
		rm.writeEscaped(oLI.getLabel());
		rm.write("</label>");
	}
	
	var isValue = oLI.getValue();
	
	// List item value
	if (isValue) {
		rm.write("<div id='" + oLI.getId() + "-value' class='sapMDLIValue'>");
		rm.writeEscaped(oLI.getValue());
		rm.write("</div>");
	}
};

}; // end of sap.m.DisplayListItemRenderer
if ( !jQuery.sap.isDeclared('sap.m.FlexBox') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.FlexBox.
jQuery.sap.declare("sap.m.FlexBox");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new FlexBox.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getDisplayInline displayInline} : boolean (default: false)</li>
 * <li>{@link #getDirection direction} : sap.m.FlexDirection (default: sap.m.FlexDirection.Row)</li>
 * <li>{@link #getFitContainer fitContainer} : boolean (default: false)</li>
 * <li>{@link #getRenderType renderType} : sap.m.FlexRendertype (default: sap.m.FlexRendertype.Div)</li>
 * <li>{@link #getJustifyContent justifyContent} : sap.m.FlexJustifyContent (default: sap.m.FlexJustifyContent.Start)</li>
 * <li>{@link #getAlignItems alignItems} : sap.m.FlexAlignItems (default: sap.m.FlexAlignItems.Stretch)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The FlexBox control builds the container for a flexible box layout.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.m.FlexBox
 */
sap.ui.core.Control.extend("sap.m.FlexBox", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"displayInline" : {type : "boolean", group : "Appearance", defaultValue : false},
		"direction" : {type : "sap.m.FlexDirection", group : "Appearance", defaultValue : sap.m.FlexDirection.Row},
		"fitContainer" : {type : "boolean", group : "Appearance", defaultValue : false},
		"renderType" : {type : "sap.m.FlexRendertype", group : "Misc", defaultValue : sap.m.FlexRendertype.Div},
		"justifyContent" : {type : "sap.m.FlexJustifyContent", group : "Appearance", defaultValue : sap.m.FlexJustifyContent.Start},
		"alignItems" : {type : "sap.m.FlexAlignItems", group : "Appearance", defaultValue : sap.m.FlexAlignItems.Stretch}
	},
	defaultAggregation : "items",
	aggregations : {
    	"items" : {type : "sap.ui.core.Control", multiple : true, singularName : "item"}
	}
}});


/**
 * Creates a new subclass of class sap.m.FlexBox with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.FlexBox.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Is the control visible
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.FlexBox#getVisible
 * @function
 */


/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexBox#setVisible
 * @function
 */

/**
 * Getter for property <code>displayInline</code>.
 * Determines whether the flexbox is in block or inline mode
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>displayInline</code>
 * @public
 * @name sap.m.FlexBox#getDisplayInline
 * @function
 */


/**
 * Setter for property <code>displayInline</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDisplayInline  new value for property <code>displayInline</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexBox#setDisplayInline
 * @function
 */

/**
 * Getter for property <code>direction</code>.
 * Determines the direction of the layout of child elements
 *
 * Default value is <code>Row</code>
 *
 * @return {sap.m.FlexDirection} the value of property <code>direction</code>
 * @public
 * @name sap.m.FlexBox#getDirection
 * @function
 */


/**
 * Setter for property <code>direction</code>.
 *
 * Default value is <code>Row</code> 
 *
 * @param {sap.m.FlexDirection} oDirection  new value for property <code>direction</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexBox#setDirection
 * @function
 */

/**
 * Getter for property <code>fitContainer</code>.
 * Determines whether the flexbox will be sized to completely fill its container
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>fitContainer</code>
 * @public
 * @name sap.m.FlexBox#getFitContainer
 * @function
 */


/**
 * Setter for property <code>fitContainer</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bFitContainer  new value for property <code>fitContainer</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexBox#setFitContainer
 * @function
 */

/**
 * Getter for property <code>renderType</code>.
 * Determines whether the layout is rendered as a series of divs or as an unordered list (ul)
 *
 * Default value is <code>Div</code>
 *
 * @return {sap.m.FlexRendertype} the value of property <code>renderType</code>
 * @public
 * @name sap.m.FlexBox#getRenderType
 * @function
 */


/**
 * Setter for property <code>renderType</code>.
 *
 * Default value is <code>Div</code> 
 *
 * @param {sap.m.FlexRendertype} oRenderType  new value for property <code>renderType</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexBox#setRenderType
 * @function
 */

/**
 * Getter for property <code>justifyContent</code>.
 * Determines the layout behavior along the main axis
 *
 * Default value is <code>Start</code>
 *
 * @return {sap.m.FlexJustifyContent} the value of property <code>justifyContent</code>
 * @public
 * @name sap.m.FlexBox#getJustifyContent
 * @function
 */


/**
 * Setter for property <code>justifyContent</code>.
 *
 * Default value is <code>Start</code> 
 *
 * @param {sap.m.FlexJustifyContent} oJustifyContent  new value for property <code>justifyContent</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexBox#setJustifyContent
 * @function
 */

/**
 * Getter for property <code>alignItems</code>.
 * Determines the layout behavior of items along the cross-axis
 *
 * Default value is <code>Stretch</code>
 *
 * @return {sap.m.FlexAlignItems} the value of property <code>alignItems</code>
 * @public
 * @name sap.m.FlexBox#getAlignItems
 * @function
 */


/**
 * Setter for property <code>alignItems</code>.
 *
 * Default value is <code>Stretch</code> 
 *
 * @param {sap.m.FlexAlignItems} oAlignItems  new value for property <code>alignItems</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexBox#setAlignItems
 * @function
 */
	
/**
 * Getter for aggregation <code>items</code>.<br/>
 * Flex items within the FlexBox layout
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.FlexBox#getItems
 * @function
 */

/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Control}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexBox#insertItem
 * @function
 */


/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Control}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexBox#addItem
 * @function
 */


/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.ui.core.Control} vItem the item to remove or its index or id
 * @return {sap.ui.core.Control} the removed item or null
 * @public
 * @name sap.m.FlexBox#removeItem
 * @function
 */


/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.FlexBox#removeAllItems
 * @function
 */


/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.FlexBox#indexOfItem
 * @function
 */


/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexBox#destroyItems
 * @function
 */

// Start of sap/m/FlexBox.js
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained



sap.ui.core.EnabledPropagator.apply(sap.m.FlexBox.prototype, [true]);

sap.m.FlexBox.prototype.init = function() {
	// Make sure that HBox and VBox have a valid direction
	if(this instanceof sap.m.HBox && (this.getDirection() !== "Row" || this.getDirection() !== "RowReverse")) {
		this.setDirection('Row');
	}
	if(this instanceof sap.m.VBox && (this.getDirection() !== "Column" || this.getDirection() !== "ColumnReverse")) {
		this.setDirection('Column');
	}
};

sap.m.FlexBox.prototype.setDisplayInline = function(bInline) {
	var sDisplay = "";

	this.setProperty("displayInline", bInline, true);
	if(bInline) {
		sDisplay = "inline-flex";
	} else {
		sDisplay = "flex";
	}
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "display", sDisplay);
	return this;
};

sap.m.FlexBox.prototype.setDirection = function(sValue) {
	this.setProperty("direction", sValue, true);
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "flex-direction", sValue);
	return this;
};

sap.m.FlexBox.prototype.setFitContainer = function(sValue) {
	this.setProperty("fitContainer", sValue, true);
	//TODO sap.m.FlexBoxStylingHelper.setStyle(null, this, "flex-direction", sValue);
	return this;
};

//TODO Enable wrapping when any browser supports it
/*sap.m.FlexBox.prototype.setJustifyContent = function(sValue) {
	this.setProperty("wrap", sValue, true);
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "flex-wrap", sValue);
	return this;
}*/

sap.m.FlexBox.prototype.setJustifyContent = function(sValue) {
	this.setProperty("justifyContent", sValue, true);
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "justify-content", sValue);
	return this;
};

sap.m.FlexBox.prototype.setAlignItems = function(sValue) {
	this.setProperty("alignItems", sValue, true);
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "align-items", sValue);
	return this;
};

sap.m.FlexBox.prototype.setAlignContent = function(sValue) {
	this.setProperty("alignContent", sValue, true);
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "align-content", sValue);
	return this;
};

}; // end of sap.m.FlexBox
if ( !jQuery.sap.isDeclared('sap.m.FlexBoxRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.FlexBoxRenderer");

/**
 * @class FlexBox renderer
 * @static
 */
sap.m.FlexBoxRenderer = {};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.FlexBoxRenderer.render = function(oRm, oControl) {
	// Return immediately if control is invisible
	if (!oControl.getVisible()) {
		return;
	}

	if (!jQuery.support.flexBoxLayout) {
		throw new Error("This browser does not support Flexible Box Layouts.");
	}

	// Make sure HBox and VBox don't get the wrong direction and get the appropriate class
	var hvClass = "";
	if(oControl.getDirection() === "Row" || oControl.getDirection() === "RowReverse") {
		if(oControl instanceof sap.m.VBox) {
			throw new Error("Flex direction cannot be set to Row or RowReverse on VBox controls.");
		} else {
			hvClass = "sapMHBox";
		}
	} else if(oControl.getDirection() === "Column" || oControl.getDirection() === "ColumnReverse"){
		if(oControl instanceof sap.m.HBox) {
			throw new Error("Flex direction cannot be set to Column or ColumnReverse on HBox controls.");
		} else {
			hvClass = "sapMVBox";
		}
	}

	// Special treatment if FlexBox is itself an item of a parent FlexBox
	var oParent = oControl.getParent();
	if(oControl.getParent() instanceof sap.m.FlexBox) {
		oRm.addClass("sapMFlexItem");

		// Set layout properties
		var oLayoutData = oControl.getLayoutData();
		if(oLayoutData instanceof sap.m.FlexItemData) {
			sap.m.FlexBoxStylingHelper.setFlexItemStyles(oRm, oLayoutData);
		}
		if(oParent.getRenderType() === 'List') {
			oRm.write('<li');
			oRm.writeClasses();
			oRm.writeStyles();
		}
	}

	if(oControl.getRenderType() === 'List') {
		oRm.write('<ul');
	} else {
		oRm.write('<div');
	}

	oRm.writeControlData(oControl);
	oRm.addClass("sapMFlexBox");
	oRm.addClass(hvClass);
	oRm.writeClasses();
	sap.m.FlexBoxStylingHelper.setFlexBoxStyles(oRm, oControl);
	oRm.writeStyles();
	oRm.write(">");

	// Now render the flex items
	var aChildren = oControl.getItems();
	for (var i = 0; i < aChildren.length; i++) {
		if(aChildren[i].getVisible === undefined || aChildren[i].getVisible()) {
			// Create wrapper
			if(!(aChildren[i] instanceof sap.m.FlexBox)) {
				if(oControl.getRenderType() === 'List') {
					oRm.write('<li');
				} else {
					oRm.write('<div');
				}

				// Set layout properties
				var oLayoutData = aChildren[i].getLayoutData();
				if(oLayoutData instanceof sap.m.FlexItemData) {
					if(oLayoutData.getId()) {
						oRm.write(" id='" + oLayoutData.getId() + "'");
					}
					if(oLayoutData.getStyleClass()) {
						oRm.addClass(oLayoutData.getStyleClass());
					}
					sap.m.FlexBoxStylingHelper.setFlexItemStyles(oRm, oLayoutData);

					// ScrollContainer needs height:100% on the flex item
					if(aChildren[i] instanceof sap.m.ScrollContainer) {
						oRm.addStyle("height", "100%");
					}
					oRm.writeStyles();
				}

				oRm.addClass("sapMFlexItem");
				oRm.writeClasses();
				oRm.write(">");

				// Render control
				oRm.renderControl(aChildren[i]);

				// Close wrapper
				if(oControl.getRenderType() === 'List') {
					oRm.write('</li>');
				} else {
					oRm.write('</div>');
				}
			} else {
				// Render control
				oRm.renderControl(aChildren[i]);
			}
		}
	}

	// Close the flexbox
	if(oControl.getRenderType() === "List") {
		oRm.write("</ul>");
	} else {
		oRm.write("</div>");
	}
};
}; // end of sap.m.FlexBoxRenderer
if ( !jQuery.sap.isDeclared('sap.m.FlexItemData') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.FlexItemData.
jQuery.sap.declare("sap.m.FlexItemData");

jQuery.sap.require('sap.ui.core.LayoutData'); // unlisted dependency retained


/**
 * Constructor for a new FlexItemData.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getAlignSelf alignSelf} : sap.m.FlexAlignSelf (default: sap.m.FlexAlignSelf.Auto)</li>
 * <li>{@link #getOrder order} : int (default: 0)</li>
 * <li>{@link #getGrowFactor growFactor} : float (default: 0)</li>
 * <li>{@link #getStyleClass styleClass} : string (default: '')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Holds layout data for a FlexBox
 * @extends sap.ui.core.LayoutData
 *
 * @author  
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.m.FlexItemData
 */
sap.ui.core.LayoutData.extend("sap.m.FlexItemData", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"alignSelf" : {type : "sap.m.FlexAlignSelf", group : "Misc", defaultValue : sap.m.FlexAlignSelf.Auto},
		"order" : {type : "int", group : "Misc", defaultValue : 0},
		"growFactor" : {type : "float", group : "Misc", defaultValue : 0},
		"styleClass" : {type : "string", group : "Misc", defaultValue : ''}
	}
}});


/**
 * Creates a new subclass of class sap.m.FlexItemData with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.FlexItemData.extend
 * @function
 */


/**
 * Getter for property <code>alignSelf</code>.
 * Determines cross-axis alignment of individual element
 *
 * Default value is <code>Auto</code>
 *
 * @return {sap.m.FlexAlignSelf} the value of property <code>alignSelf</code>
 * @public
 * @name sap.m.FlexItemData#getAlignSelf
 * @function
 */


/**
 * Setter for property <code>alignSelf</code>.
 *
 * Default value is <code>Auto</code> 
 *
 * @param {sap.m.FlexAlignSelf} oAlignSelf  new value for property <code>alignSelf</code>
 * @return {sap.m.FlexItemData} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexItemData#setAlignSelf
 * @function
 */

/**
 * Getter for property <code>order</code>.
 * Determines the display order of flex items independent of their source code order.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>order</code>
 * @public
 * @name sap.m.FlexItemData#getOrder
 * @function
 */


/**
 * Setter for property <code>order</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iOrder  new value for property <code>order</code>
 * @return {sap.m.FlexItemData} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexItemData#setOrder
 * @function
 */

/**
 * Getter for property <code>growFactor</code>.
 * Determines the flexibility of the flex item when allocatable space is remaining.
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>growFactor</code>
 * @public
 * @name sap.m.FlexItemData#getGrowFactor
 * @function
 */


/**
 * Setter for property <code>growFactor</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fGrowFactor  new value for property <code>growFactor</code>
 * @return {sap.m.FlexItemData} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexItemData#setGrowFactor
 * @function
 */

/**
 * Getter for property <code>styleClass</code>.
 * The style class will be applied to the flex item and can be used for CSS selectors
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>styleClass</code>
 * @public
 * @name sap.m.FlexItemData#getStyleClass
 * @function
 */


/**
 * Setter for property <code>styleClass</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sStyleClass  new value for property <code>styleClass</code>
 * @return {sap.m.FlexItemData} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexItemData#setStyleClass
 * @function
 */

// Start of sap/m/FlexItemData.js
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained



sap.ui.core.EnabledPropagator.apply(sap.m.FlexItemData.prototype, [true]);

sap.m.FlexItemData.prototype.setAlignSelf = function(sValue) {
	this.setProperty("alignSelf", sValue, true);
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "align-self", sValue);
	return this;
};

sap.m.FlexItemData.prototype.setOrder = function(sValue) {
	this.setProperty("order", sValue, true);
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "order", sValue);
	return this;
};

sap.m.FlexItemData.prototype.setGrowFactor = function(sValue) {
	this.setProperty("growFactor", sValue, true);
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "flex-grow", sValue);
	return this;
};

//TODO Uncomment when property is supported by any browser
/*sap.m.FlexItemData.prototype.setShrinkFactor = function(sValue) {
	this.setProperty("shrinkFactor", sValue, true);
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "flex-shrink", sValue);
	return this;
};*/

//TODO Uncomment when property is supported by any browser
/*sap.m.FlexItemData.prototype.setBaseSize = function(sValue) {
	this.setProperty("baseSize", sValue, true);
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "flex-basis", sValue);
	return this;
};*/

//TODO Implement a setter for the class property
}; // end of sap.m.FlexItemData
if ( !jQuery.sap.isDeclared('sap.m.HBox') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.HBox.
jQuery.sap.declare("sap.m.HBox");



/**
 * Constructor for a new HBox.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.FlexBox#constructor sap.m.FlexBox}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The HBox control builds the container for a horizontal flexible box layout. HBox is a convenience control as it is just a specialized FlexBox control.
 * @extends sap.m.FlexBox
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.m.HBox
 */
sap.m.FlexBox.extend("sap.m.HBox", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m"
}});


/**
 * Creates a new subclass of class sap.m.HBox with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.HBox.extend
 * @function
 */


// Start of sap/m/HBox.js

}; // end of sap.m.HBox
if ( !jQuery.sap.isDeclared('sap.m.HBoxRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.HBoxRenderer");


/**
 * @class HBox renderer.
 * @static
 */
sap.m.HBoxRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.HBoxRenderer.render = function(oRm, oControl){
	sap.m.FlexBoxRenderer.render.apply(this, [oRm, oControl]);
};

}; // end of sap.m.HBoxRenderer
if ( !jQuery.sap.isDeclared('sap.m.Image') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Image.
jQuery.sap.declare("sap.m.Image");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Image.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSrc src} : sap.ui.core.URI</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * <li>{@link #getDecorative decorative} : boolean (default: true)</li>
 * <li>{@link #getAlt alt} : string</li>
 * <li>{@link #getUseMap useMap} : string</li>
 * <li>{@link #getDensityAware densityAware} : boolean (default: true)</li>
 * <li>{@link #getActiveSrc activeSrc} : sap.ui.core.URI (default: "")</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Image#event:tap tap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A wrapper around the IMG tag. The image can be loaded from a remote or local server.
 * 
 * Density related image will be loaded if image with density awareness name in format [imageName]@[densityValue].[extension] is provided.
 * 
 * There are various size setting options available, and the images can be combined with actions.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.m.Image
 */
sap.ui.core.Control.extend("sap.m.Image", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"src" : {type : "sap.ui.core.URI", group : "Data", defaultValue : null},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"width" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
		"height" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
		"decorative" : {type : "boolean", group : "Accessibility", defaultValue : true},
		"alt" : {type : "string", group : "Accessibility", defaultValue : null},
		"useMap" : {type : "string", group : "Misc", defaultValue : null},
		"densityAware" : {type : "boolean", group : "Misc", defaultValue : true},
		"activeSrc" : {type : "sap.ui.core.URI", group : "Data", defaultValue : ""}
	},
	events : {
		"tap" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Image with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Image.extend
 * @function
 */

sap.m.Image.M_EVENTS = {'tap':'tap'};


/**
 * Getter for property <code>src</code>.
 * Relative or absolute path to URL where the image file is stored. The path will be adapted to the density aware format according to the density of the device following the convention that [imageName]@[densityValue].[extension]
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>src</code>
 * @public
 * @name sap.m.Image#getSrc
 * @function
 */


/**
 * Setter for property <code>src</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sSrc  new value for property <code>src</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#setSrc
 * @function
 */

/**
 * Getter for property <code>visible</code>.
 * Invisible images are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.Image#getVisible
 * @function
 */


/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#setVisible
 * @function
 */

/**
 * Getter for property <code>width</code>.
 * When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.Image#getWidth
 * @function
 */


/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#setWidth
 * @function
 */

/**
 * Getter for property <code>height</code>.
 * When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.m.Image#getHeight
 * @function
 */


/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#setHeight
 * @function
 */

/**
 * Getter for property <code>decorative</code>.
 * A decorative image is included for design reasons. Accessibility tools will ignore decorative images.
 * 
 * Note: If the Image has an image map (useMap is set), this property will be overridden (the image will not be rendered as decorative).
 * A decorative image has no ALT attribute, so the Alt property is ignored if the image is decorative.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>decorative</code>
 * @public
 * @name sap.m.Image#getDecorative
 * @function
 */


/**
 * Setter for property <code>decorative</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDecorative  new value for property <code>decorative</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#setDecorative
 * @function
 */

/**
 * Getter for property <code>alt</code>.
 * The alternative text that is displayed in case the Image is not available, or cannot be displayed.
 * If the image is set to decorative this property is ignored.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>alt</code>
 * @public
 * @name sap.m.Image#getAlt
 * @function
 */


/**
 * Setter for property <code>alt</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAlt  new value for property <code>alt</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#setAlt
 * @function
 */

/**
 * Getter for property <code>useMap</code>.
 * The name of the image map that defines the clickable areas
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>useMap</code>
 * @public
 * @name sap.m.Image#getUseMap
 * @function
 */


/**
 * Setter for property <code>useMap</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sUseMap  new value for property <code>useMap</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#setUseMap
 * @function
 */

/**
 * Getter for property <code>densityAware</code>.
 * If this is set to false, the src image will be loaded directly without attempting to fetch the density perfect image for high density device.
 * 
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>densityAware</code>
 * @public
 * @name sap.m.Image#getDensityAware
 * @function
 */


/**
 * Setter for property <code>densityAware</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDensityAware  new value for property <code>densityAware</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#setDensityAware
 * @function
 */

/**
 * Getter for property <code>activeSrc</code>.
 * The source property when this image is tapped.
 *
 * Default value is <code>""</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>activeSrc</code>
 * @public
 * @name sap.m.Image#getActiveSrc
 * @function
 */


/**
 * Setter for property <code>activeSrc</code>.
 *
 * Default value is <code>""</code> 
 *
 * @param {sap.ui.core.URI} sActiveSrc  new value for property <code>activeSrc</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#setActiveSrc
 * @function
 */

/**
 * Event is fired when the user clicks on the control. 
 *
 * @name sap.m.Image#tap
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'tap' event of this <code>sap.m.Image</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Image</code>.<br/> itself. 
 *  
 * Event is fired when the user clicks on the control. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Image</code>.<br/> itself.
 *
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#attachTap
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'tap' event of this <code>sap.m.Image</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#detachTap
 * @function
 */


/**
 * Fire event tap to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Image#fireTap
 * @function
 */

// Start of sap/m/Image.js
/**
 * This function returns the pixel density ratio of the device, if it's not defined then it returns 1 by default.
 * @returns the pixel density of your device.
 * @private
 */
sap.m.Image.prototype.getDevicePixelRatio = function(){
	// if devicePixelRatio property is not available, value 1 is assumed by default.
	return window.devicePixelRatio === undefined ? 1 : window.devicePixelRatio;
};

/**
 * Function is called when image is loaded successfully.
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.m.Image.prototype.onload = function(oEvent){
	//this is used to fix the late load event handler problem on ios platform, if the event handler 
	//has not been called right after image is loaded, event is triggered manually in onAfterRendering
	//method. 
	if(!this._defaultEventTriggered){
		this._defaultEventTriggered = true;
	}
	
	var $domNode = this.$(), domRef = $domNode[0];
	
	if(!this._isWidthOrHeightSet()){
		if(this._iLoadImageDensity > 1){
			if(($domNode.width() === domRef.naturalWidth) && ($domNode.height() === domRef.naturalHeight)){
				$domNode.width( $domNode.width() / this._iLoadImageDensity );
			}
		}
	}
	$domNode.removeClass("sapMNoImg");
};

/**
 * Function is called when error occurs during image loading.
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.m.Image.prototype.onerror = function(oEvent){
	//this is used to fix the late load event handler problem on ios platform, if the event handler 
	//has not been called right after image is loaded with errors, event is triggered manually in onAfterRendering
	//method.
	if(!this._defaultEventTriggered){
		this._defaultEventTriggered = true;
	}
	
	var $domNode = this.$(), 
		sCurrentSrc = $domNode.attr("src"),
		d = this.getDevicePixelRatio();

	$domNode.addClass("sapMNoImg");
	
	//if src is empty or there's no image existing, just stop
	if(!sCurrentSrc || this._iLoadImageDensity === 1){
		return;
	}
	
	if(d === 2 || d < 1){
		//load the default image
		this._iLoadImageDensity = 1;
		$domNode.attr("src", this._generateSrcByDensity(sCurrentSrc, 1));
	}else if(d === 1.5){
		if(this._bVersion2Tried){
			//if version 2 isn't on the server, load the default image
			this._iLoadImageDensity = 1;
			$domNode.attr("src", this._generateSrcByDensity(sCurrentSrc, 1));
		}else{
			//special treatment for density 1.5
			//verify if the version for density 2 is provided or not
			this._iLoadImageDensity = 2;
			$domNode.attr("src", this._generateSrcByDensity(sCurrentSrc, 2));
			this._bVersion2Tried = true;
		}
	}
};


/**
 * This function is called to register event handlers for load and error event on the image DOM after it's rendered.
 * It also check if the event handlers are called accordingly after the image is loaded, if not the event handlers are triggered
 * manually.
 * @private
 */
sap.m.Image.prototype.onAfterRendering = function(){
	//if densityAware is set to true, we need to do extra steps for getting and resizing the density perfect version of the image.
	if(this.getDensityAware()){
		var $DomNode = this.$();
	
		//bind the load and error event handler
		$DomNode.bind("load", jQuery.proxy(this.onload, this));
		$DomNode.bind("error", jQuery.proxy(this.onerror, this));
		
		var domRef = this.getDomRef();
		
		//if image has already been loaded and the load or error event handler hasn't been called, trigger it manually.
		if(domRef.complete && !this._defaultEventTriggered){
			//need to use the naturalWidth property instead of jDomNode.width(), the later one returns positive value even in case of broken image
			if(domRef.naturalWidth > 0){
				//image loaded successfully
				$DomNode.trigger("load");
			}else{
				//image loaded with error
				$DomNode.trigger("error");
			}
		}
	}
};

/**
 * This binds to the touchstart event to change the src property of the image to the activeSrc
 * @private
 *
 */
sap.m.Image.prototype.ontouchstart = function(oEvent){
	
	//for control who need to know if they should handle events from the image control
	if(oEvent.srcControl.mEventRegistry["tap"]){
		oEvent.originalEvent._sapui_handledByControl = true;
	}

	var sActiveSrc = this.getActiveSrc();
	if(sActiveSrc){
		//change the source only when the first finger is on the image, the following fingers doesn't affect
		if((oEvent.targetTouches && oEvent.targetTouches.length === 1) || !oEvent.targetTouches){
			this.$().attr("src", this._getDensityAwareActiveSrc());

			if(!this._touchEndProxy){
				this._touchEndProxy = jQuery.proxy(this._ontouchend, this);
			}
			
			//here also bound to the mouseup event to enable it working in desktop browsers
			jQuery(window.document).bind("touchcancel vmouseup", this._touchEndProxy);
		}
	}
	
	//disable the select callout in android
	//-webkit-touch-callout: none doesn't work in android
	//preventDefault causes issues for ios
	if(!jQuery.os.ios)
		oEvent.preventDefault();
};

/**
 * This changes the src property of the image back to the src property of the image control.
 * @private
 *
 */
sap.m.Image.prototype._ontouchend = function(oEvent){
	//change the source back only when all fingers leave the image
	if((oEvent.targetTouches && oEvent.targetTouches.length === 0) || !oEvent.targetTouches){
		this.$().attr("src", this._getDensityAwareSrc()).show();
		
		jQuery(window.document).unbind("touchcancel vmouseup", this._touchEndProxy);
	}
};

/**
 * This overrides the default setter of the src property and update the dom node.
 * @public
 */
sap.m.Image.prototype.setSrc = function(sSrc){
	if(sSrc === this.getSrc()){
		return;
	}
	this.setProperty("src", sSrc, true);
	var oDomRef = this.getDomRef();
	if(oDomRef){
		this.$().attr("src", this._getDensityAwareSrc());
	}
};

/**
 * This overrides the default setter of the activeSrc property in order to avoid the rerendering.
 * @public
 *
 */
sap.m.Image.prototype.setActiveSrc = function(sActiveSrc){
	if(!sActiveSrc){
		sActiveSrc = "";
	}
	this.setProperty("activeSrc", sActiveSrc, true);
};


/**
 * Function is called when image is clicked.
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.m.Image.prototype.ontap = function(oEvent) {
	this.fireTap({/* no parameters */});	
};


/**
 * Test if at least one of the width and height properties is set.
 * @private
 */
sap.m.Image.prototype._isWidthOrHeightSet = function(){
	return (this.getWidth() && this.getWidth() !== '') || (this.getHeight() && this.getHeight() !== '');
};


/**
 * This function returns the density aware source based on the deviceDensityRatio value. 
 * The return value is in the format [src]@[densityValue].[extension] if the densityValue not equal 1, otherwise it returns the src property.
 * @private
 */
sap.m.Image.prototype._getDensityAwareSrc = function(){
	var d = this.getDevicePixelRatio(),
		sSrc = this.getSrc();
	
	//this property is used for resizing the higher resolution image when image is loaded.
	this._iLoadImageDensity = d;

	//if devicePixelRatio equals 1 or densityAware set to false, simply return the src property
	if(d === 1 || !this.getDensityAware()){
		return sSrc;
	}
	
	return this._generateSrcByDensity(sSrc, d);
};

/**
 * This function returns the density aware version of the Active source base on the deviceDensityRatio value.
 * @private
 */
sap.m.Image.prototype._getDensityAwareActiveSrc = function(){
	var d = this.getDevicePixelRatio(),
		sActiveSrc = this.getActiveSrc();
	
	//this property is used for resizing the higher resolution image when image is loaded.
	this._iLoadImageDensity = d;

	//if devicePixelRatio equals 1 or densityAware set to false, simply return the src property
	if(d === 1 || !this.getDensityAware()){
		return sActiveSrc;
	}
	
	return this._generateSrcByDensity(sActiveSrc, d);
};

/**
 * This function generates the density aware version of the src property according to the iDensity provided. 
 * It returns the density aware version of the src property.
 * @private
 */
sap.m.Image.prototype._generateSrcByDensity = function(sSrc, iDensity){
	if(!sSrc){
		return "";
	}

	var iPos = sSrc.lastIndexOf("."),
		sName = sSrc.substring(0, iPos),
		sExtension = sSrc.substring(iPos),
		iAtPos = sName.lastIndexOf("@");
	
	//if there's no extension
	if(iPos == -1){
		return sSrc + "@" + iDensity;
	}
	
	//remove the existing density information
	if(iAtPos !== -1 && sName.length - iAtPos < 6){//@2 @1.5 @0.75 only these three cases, if the image itself has a @, these are the only checks we can do.
		sName = sName.substring(0, iAtPos);
	}
	
	if(iDensity === 1){
		return sName + sExtension;
	}

	sName = sName + "@" + iDensity;
	return sName + sExtension;
};
}; // end of sap.m.Image
if ( !jQuery.sap.isDeclared('sap.m.Input') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Input.
jQuery.sap.declare("sap.m.Input");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Input.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getValue value} : string</li>
 * <li>{@link #getType type} : sap.m.InputType (default: sap.m.InputType.Text)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getMaxLength maxLength} : int (default: 0)</li>
 * <li>{@link #getValueState valueState} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getPlaceholder placeholder} : string</li>
 * <li>{@link #getDateFormat dateFormat} : string (default: 'YYYY-MM-dd')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Input#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Input#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Enables users to input data.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @experimental Since version 1.2. 
 * API is not yet finished and might change completely
 * @name sap.m.Input
 */
sap.ui.core.Control.extend("sap.m.Input", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"value" : {type : "string", group : "Data", defaultValue : null, bindable : "bindable"},
		"type" : {type : "sap.m.InputType", group : "Data", defaultValue : sap.m.InputType.Text},
		"width" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"maxLength" : {type : "int", group : "Behavior", defaultValue : 0},
		"valueState" : {type : "sap.ui.core.ValueState", group : "Data", defaultValue : sap.ui.core.ValueState.None},
		"name" : {type : "string", group : "Misc", defaultValue : null},
		"placeholder" : {type : "string", group : "Misc", defaultValue : null},
		"dateFormat" : {type : "string", group : "Misc", defaultValue : 'YYYY-MM-dd'}
	},
	events : {
		"change" : {}, 
		"liveChange" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Input with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Input.extend
 * @function
 */

sap.m.Input.M_EVENTS = {'change':'change','liveChange':'liveChange'};


/**
 * Getter for property <code>value</code>.
 * Input Value
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>value</code>
 * @public
 * @name sap.m.Input#getValue
 * @function
 */


/**
 * Setter for property <code>value</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sValue  new value for property <code>value</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Input#setValue
 * @function
 */

/**
 * Binder for property <code>value</code>.
 *
 * @param {string} sPath path to a property in the model 
 * @param {function} [fnFormatter=null] the formatter function
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way) 
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Input#bindValue
 * @function
 */


/**
 * Unbinder for property <code>value</code>.
 *
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Input#unbindValue
 * @function

 */

/**
 * Getter for property <code>type</code>.
 * Type of input (e.g. Text, Number, Email, Phone)
 *
 * Default value is <code>Text</code>
 *
 * @return {sap.m.InputType} the value of property <code>type</code>
 * @public
 * @name sap.m.Input#getType
 * @function
 */


/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>Text</code> 
 *
 * @param {sap.m.InputType} oType  new value for property <code>type</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Input#setType
 * @function
 */

/**
 * Getter for property <code>width</code>.
 * Defines the width of the input.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.Input#getWidth
 * @function
 */


/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Input#setWidth
 * @function
 */

/**
 * Getter for property <code>enabled</code>.
 * Boolean property to enable the control (default is true).
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.m.Input#getEnabled
 * @function
 */


/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Input#setEnabled
 * @function
 */

/**
 * Getter for property <code>visible</code>.
 * Invisible inputs are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.Input#getVisible
 * @function
 */


/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Input#setVisible
 * @function
 */

/**
 * Getter for property <code>maxLength</code>.
 * Maximum number of characters. Value '0' means the feature is switched off.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>maxLength</code>
 * @public
 * @name sap.m.Input#getMaxLength
 * @function
 */


/**
 * Setter for property <code>maxLength</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iMaxLength  new value for property <code>maxLength</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Input#setMaxLength
 * @function
 */

/**
 * Getter for property <code>valueState</code>.
 * Visualizes warnings or errors related to the text field. Possible values: Warning, Error, Success.
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.core.ValueState} the value of property <code>valueState</code>
 * @public
 * @name sap.m.Input#getValueState
 * @function
 */


/**
 * Setter for property <code>valueState</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.core.ValueState} oValueState  new value for property <code>valueState</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Input#setValueState
 * @function
 */

/**
 * Getter for property <code>name</code>.
 * The 'name' property to be used in the HTML code (e.g. for HTML forms that send data to the server via 'submit').
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * @name sap.m.Input#getName
 * @function
 */


/**
 * Setter for property <code>name</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Input#setName
 * @function
 */

/**
 * Getter for property <code>placeholder</code>.
 * text shown when no value available
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>placeholder</code>
 * @public
 * @name sap.m.Input#getPlaceholder
 * @function
 */


/**
 * Setter for property <code>placeholder</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sPlaceholder  new value for property <code>placeholder</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Input#setPlaceholder
 * @function
 */

/**
 * Getter for property <code>dateFormat</code>.
 * Only used if type=date and no datepicker is available.
 * The data is displayed and the user input is parsed according to this format.
 * NOTE: The value property is always of the form RFC 3339 (YYYY-MM-dd).
 * 
 *
 * Default value is <code>YYYY-MM-dd</code>
 *
 * @return {string} the value of property <code>dateFormat</code>
 * @public
 * @name sap.m.Input#getDateFormat
 * @function
 */


/**
 * Setter for property <code>dateFormat</code>.
 *
 * Default value is <code>YYYY-MM-dd</code> 
 *
 * @param {string} sDateFormat  new value for property <code>dateFormat</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Input#setDateFormat
 * @function
 */

/**
 * This event gets fired when the input operation has finished and the value has changed. 
 *
 * @name sap.m.Input#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.newValue the new value of the input
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.Input</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Input</code>.<br/> itself. 
 *  
 * This event gets fired when the input operation has finished and the value has changed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Input</code>.<br/> itself.
 *
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Input#attachChange
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.Input</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Input#detachChange
 * @function
 */


/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'newValue' of type <code>string</code> the new value of the input</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Input#fireChange
 * @function
 */

/**
 * This event is fired when the value of the input is changed - e.g. at each keypress 
 *
 * @name sap.m.Input#liveChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.newValue the new value of the input
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.Input</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Input</code>.<br/> itself. 
 *  
 * This event is fired when the value of the input is changed - e.g. at each keypress 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Input</code>.<br/> itself.
 *
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Input#attachLiveChange
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.Input</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Input#detachLiveChange
 * @function
 */


/**
 * Fire event liveChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'newValue' of type <code>string</code> the new value of the input</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Input#fireLiveChange
 * @function
 */

// Start of sap/m/Input.js
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained

/**
 * Function is called to define the behavior for the control.
 * 
 * @private
 */

sap.m.Input.prototype.onBeforeRendering = function(oBrowserEvent) {
	if (this._jQuerydomRef instanceof jQuery) {
		this._jQuerydomRef.unbind(".input");
	}
};

sap.m.Input.prototype.onAfterRendering = function(oBrowserEvent) {
	if (jQuery.os.ios) {
		this._jQuerydomRef = jQuery(this.getDomRef());
	} else {
		this._jQuerydomRef = jQuery(this.getDomRef()).children(); // in android and bb the input is inside a div
	}
	this._jQuerydomRef.bind("paste.input cut.input", jQuery.proxy(this.onkeyup, this));
	if (jQuery.os.ios && (this.getType() == 'Date' || this.getType() == 'Month' || this.getType() == 'Datetime' || this.getType() == 'DatetimeLocal' || this.getType() == 'Week')) { // on IOS the date input has no change event
			this._jQuerydomRef.bind("blur.input", jQuery.proxy(this.onchange, this));
	} else {
			this._jQuerydomRef.bind("change.input", jQuery.proxy(this.onchange, this));
	}
};

sap.m.Input.prototype.getFocusDomRef = function() {
	if (jQuery.os.android){
		return jQuery.sap.domById(this.getId() + '-inner');
	} else {
		return jQuery.sap.domById(this.getId());
	}
};

sap.m.Input.prototype.ontouchstart = function(oEvent) {
	//for control who need to know if they should handle events from the input control
	oEvent.originalEvent._sapui_handledByControl = true;
};

sap.m.Input.prototype.onkeyup = function(oEvent) {
	var newValue = this._getAndUpdateValue();
	this.fireLiveChange({newValue: newValue});
};

sap.m.Input.prototype.onchange = function(oEvent) {
	var newValue = this._getAndUpdateValue();
	this.fireChange({newValue: newValue});
};



sap.m.Input.prototype._datePickerAvailable = (function() {
	var test = document.createElement("input");
	test.setAttribute("type", "date");
	return (test.type == "date");
})();

sap.m.Input.prototype._formatForGetter = function(value){
	var oUserDateFormat, 
		oStandardDateFormat,
		oDate;
	if ((this.getType() == "Date") && (!this._datePickerAvailable)) {

		oUserDateFormat = sap.ui.core.format.DateFormat.getDateInstance({pattern: this.getDateFormat()});
		oStandardDateFormat = sap.ui.core.format.DateFormat.getDateInstance({pattern: "YYYY-MM-dd"});

		oDate = oUserDateFormat.parse(value);
		return oStandardDateFormat.format(oDate);
	}
	return value;
};

sap.m.Input.prototype._formatForRendering = function(value){
	var oUserDateFormat, 
		oStandardDateFormat,
		oDate;
		
	if ((this.getType() == "Date") && (!this._datePickerAvailable))  {

		oUserDateFormat = sap.ui.core.format.DateFormat.getDateInstance({pattern: this.getDateFormat()});
		oStandardDateFormat = sap.ui.core.format.DateFormat.getDateInstance({pattern: "YYYY-MM-dd"});

		oDate = oStandardDateFormat.parse(value);
		return oUserDateFormat.format(oDate);
	} else {
		return value;
	}
};

sap.m.Input.prototype._getAndUpdateValue = function(){
	var oldValue = this.getValue();
	var newValue = this._formatForGetter(this._jQuerydomRef.val());
	if (oldValue != newValue) {
		this.setProperty("value", newValue, true); // no rerendering
	}
	return newValue;
}
}; // end of sap.m.Input
if ( !jQuery.sap.isDeclared('sap.m.InputListItemRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.InputListItemRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class InputListItem renderer.
 * @static
 */
sap.m.InputListItemRenderer = sap.ui.core.Renderer.extend(sap.m.ListItemBaseRenderer);

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *          oRenderManager the RenderManager that can be used for writing to the
 *          Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *          oControl an object representation of the control that should be
 *          rendered
 */
sap.m.InputListItemRenderer.renderLIAttributes = function(rm, oLI) {
	rm.addClass("sapMILI");
};

sap.m.InputListItemRenderer.renderLIContent = function(rm, oLI) {

	var sLabel = oLI.getLabel();

	// List item label
	if (sLabel) {
		rm.write("<label for='" + oLI.getId() + "-content' class='sapMILILabel'>");
		rm.writeEscaped(oLI.getLabel());
		rm.write("</label>");
	}

	// List item input content
	rm.write("<div class='sapMILIDiv sapMILI-CTX'>");

	var aContent = oLI.getContent();
	var cLength = aContent.length;
	for ( var i = 0; i < cLength; i++) {
		rm.renderControl(aContent[i]);
	}
	rm.write("</div>");
};

}; // end of sap.m.InputListItemRenderer
if ( !jQuery.sap.isDeclared('sap.m.Label') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Label.
jQuery.sap.declare("sap.m.Label");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Label.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDesign design} : sap.m.LabelDesign (default: sap.m.LabelDesign.Standard)</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getTextAlign textAlign} : sap.ui.core.TextAlign (default: sap.ui.core.TextAlign.Begin)</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getLabelFor labelFor} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Label control is used in a UI5 mobile application to provide label text for other controls. Design such as bold, and text alignment can be specified.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.m.Label
 */
sap.ui.core.Control.extend("sap.m.Label", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"design" : {type : "sap.m.LabelDesign", group : "Appearance", defaultValue : sap.m.LabelDesign.Standard},
		"text" : {type : "string", group : "Misc", defaultValue : null},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"textAlign" : {type : "sap.ui.core.TextAlign", group : "Appearance", defaultValue : sap.ui.core.TextAlign.Begin},
		"textDirection" : {type : "sap.ui.core.TextDirection", group : "Appearance", defaultValue : sap.ui.core.TextDirection.Inherit},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : ''}
	},
	associations : {
		"labelFor" : {type : "sap.ui.core.Control", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.m.Label with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Label.extend
 * @function
 */


/**
 * Getter for property <code>design</code>.
 * set design of a label to either Standard or Bold
 *
 * Default value is <code>sap.m.LabelDesign.Standard</code>
 *
 * @return {sap.m.LabelDesign} the value of property <code>design</code>
 * @public
 * @name sap.m.Label#getDesign
 * @function
 */


/**
 * Setter for property <code>design</code>.
 *
 * Default value is <code>sap.m.LabelDesign.Standard</code> 
 *
 * @param {sap.m.LabelDesign} oDesign  new value for property <code>design</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Label#setDesign
 * @function
 */

/**
 * Getter for property <code>text</code>.
 * Label Text to be displayed
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.Label#getText
 * @function
 */


/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Label#setText
 * @function
 */

/**
 * Getter for property <code>visible</code>.
 * Invisible labels are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.Label#getVisible
 * @function
 */


/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Label#setVisible
 * @function
 */

/**
 * Getter for property <code>textAlign</code>.
 * Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
 *
 * Default value is <code>sap.ui.core.TextAlign.Begin</code>
 *
 * @return {sap.ui.core.TextAlign} the value of property <code>textAlign</code>
 * @public
 * @name sap.m.Label#getTextAlign
 * @function
 */


/**
 * Setter for property <code>textAlign</code>.
 *
 * Default value is <code>sap.ui.core.TextAlign.Begin</code> 
 *
 * @param {sap.ui.core.TextAlign} oTextAlign  new value for property <code>textAlign</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Label#setTextAlign
 * @function
 */

/**
 * Getter for property <code>textDirection</code>.
 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
 *
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code>
 *
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * @name sap.m.Label#getTextDirection
 * @function
 */


/**
 * Setter for property <code>textDirection</code>.
 *
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code> 
 *
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Label#setTextDirection
 * @function
 */

/**
 * Getter for property <code>width</code>.
 * Width of Label
 *
 * Default value is <code>''</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.Label#getWidth
 * @function
 */


/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Label#setWidth
 * @function
 */

/**
 * Association to the labeled control.
 * By default the label set the for attribute to the ID of the labeled control. This can be changed implementing function getIdForLabel on the labelled control.
 *
 * @return {string} Id of the element which is the current target of the <code>labelFor</code> association, or null
 * @public
 * @name sap.m.Label#getLabelFor
 * @function
 */


/**
 * Association to the labeled control.
 * By default the label set the for attribute to the ID of the labeled control. This can be changed implementing function getIdForLabel on the labelled control.
 *
 * @param {string | sap.ui.core.Control} vLabelFor 
 *    Id of an element which becomes the new target of this <code>labelFor</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Label#setLabelFor
 * @function
 */

// Start of sap/m/Label.js


}; // end of sap.m.Label
if ( !jQuery.sap.isDeclared('sap.m.List') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.List.
jQuery.sap.declare("sap.m.List");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new List.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getInset inset} : boolean (default: false)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getHeaderText headerText} : string</li>
 * <li>{@link #getFooterText footerText} : string</li>
 * <li>{@link #getMode mode} : sap.m.ListMode (default: sap.m.ListMode.None)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getIncludeItemInSelection includeItemInSelection} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.m.ListItemBase[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.List#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.List#event:delete delete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * sap.m.List Control
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.m.List
 */
sap.ui.core.Control.extend("sap.m.List", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"getSelectedItem", "setSelectedItem", "getSelectedItems", "setSelectedItemById", "removeSelections"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"inset" : {type : "boolean", group : "Misc", defaultValue : false},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"headerText" : {type : "string", group : "Misc", defaultValue : null},
		"footerText" : {type : "string", group : "Misc", defaultValue : null},
		"mode" : {type : "sap.m.ListMode", group : "Appearance", defaultValue : sap.m.ListMode.None},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"includeItemInSelection" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	defaultAggregation : "items",
	aggregations : {
    	"items" : {type : "sap.m.ListItemBase", multiple : true, singularName : "item", bindable : "bindable"}
	},
	events : {
		"select" : {}, 
		"delete" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.List with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.List.extend
 * @function
 */

sap.m.List.M_EVENTS = {'select':'select','delete':'delete'};


/**
 * Getter for property <code>inset</code>.
 * inset style false/true
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>inset</code>
 * @public
 * @name sap.m.List#getInset
 * @function
 */


/**
 * Setter for property <code>inset</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bInset  new value for property <code>inset</code>
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#setInset
 * @function
 */

/**
 * Getter for property <code>visible</code>.
 * Invisible lists are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.List#getVisible
 * @function
 */


/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#setVisible
 * @function
 */

/**
 * Getter for property <code>headerText</code>.
 * Header Text
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>headerText</code>
 * @public
 * @name sap.m.List#getHeaderText
 * @function
 */


/**
 * Setter for property <code>headerText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sHeaderText  new value for property <code>headerText</code>
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#setHeaderText
 * @function
 */

/**
 * Getter for property <code>footerText</code>.
 * Footer Text
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>footerText</code>
 * @public
 * @name sap.m.List#getFooterText
 * @function
 */


/**
 * Setter for property <code>footerText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFooterText  new value for property <code>footerText</code>
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#setFooterText
 * @function
 */

/**
 * Getter for property <code>mode</code>.
 * Mode of a list (e.g. None, SingleSelect, EditMultiSelect, ViewMultiSelect, etc.)
 *
 * Default value is <code>None</code>
 *
 * @return {sap.m.ListMode} the value of property <code>mode</code>
 * @public
 * @name sap.m.List#getMode
 * @function
 */


/**
 * Setter for property <code>mode</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.m.ListMode} oMode  new value for property <code>mode</code>
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#setMode
 * @function
 */

/**
 * Getter for property <code>width</code>.
 * Sets the width of the list
 *
 * Default value is <code>'100%'</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.List#getWidth
 * @function
 */


/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>'100%'</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#setWidth
 * @function
 */

/**
 * Getter for property <code>includeItemInSelection</code>.
 * This property decides if the list item interacts with the selection. If it is 'true', a tap on the item will set the selection control in front of the list item.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>includeItemInSelection</code>
 * @public
 * @name sap.m.List#getIncludeItemInSelection
 * @function
 */


/**
 * Setter for property <code>includeItemInSelection</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIncludeItemInSelection  new value for property <code>includeItemInSelection</code>
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#setIncludeItemInSelection
 * @function
 */
	
/**
 * Getter for aggregation <code>items</code>.<br/>
 * The items of this list
 * 
 * @return {sap.m.ListItemBase[]}
 * @public
 * @name sap.m.List#getItems
 * @function
 */

/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.m.ListItemBase}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#insertItem
 * @function
 */


/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.m.ListItemBase}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#addItem
 * @function
 */


/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.m.ListItemBase} vItem the item to remove or its index or id
 * @return {sap.m.ListItemBase} the removed item or null
 * @public
 * @name sap.m.List#removeItem
 * @function
 */


/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ListItemBase[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.List#removeAllItems
 * @function
 */


/**
 * Checks for the provided <code>sap.m.ListItemBase</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.m.ListItemBase}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.List#indexOfItem
 * @function
 */


/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#destroyItems
 * @function
 */

/**
 * Binder for aggregation <code>items</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#bindItems
 * @function
 */


/**
 * Unbinder for aggregation <code>items</code>.
 *
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#unbindItems
 * @function
 */

/**
 * Event is fired when selection is changed by user interaction. 
 *
 * @name sap.m.List#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.listItem the listitem which fired the delete
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.List</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.List</code>.<br/> itself. 
 *  
 * Event is fired when selection is changed by user interaction. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.List</code>.<br/> itself.
 *
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#attachSelect
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.List</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#detachSelect
 * @function
 */


/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'listItem' of type <code>sap.ui.core.Control</code> the listitem which fired the delete</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.List#fireSelect
 * @function
 */

/**
 * Event is fired when delete icon is pressed by user. 
 *
 * @name sap.m.List#delete
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.listItem the listitem which fired the delete
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'delete' event of this <code>sap.m.List</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.List</code>.<br/> itself. 
 *  
 * Event is fired when delete icon is pressed by user. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.List</code>.<br/> itself.
 *
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#attachDelete
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'delete' event of this <code>sap.m.List</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#detachDelete
 * @function
 */


/**
 * Fire event delete to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'listItem' of type <code>sap.ui.core.Control</code> the listitem which fired the delete</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.List#fireDelete
 * @function
 */

/**
 * Returns selected list item. When no item is selected, "null" is returned. When multi-selection is enabled and multiple items are selected, only the first selected item is returned.
 *
 * @name sap.m.List.prototype.getSelectedItem
 * @function

 * @type sap.ui.core.Control
 * @public
 */


/**
 * Sets a list item to be selected. In single mode the method removes the previous selection.
 *
 * @name sap.m.List.prototype.setSelectedItem
 * @function
 * @param {sap.m.ListItemBase} 
 *         oItem
 *         The list item to be selected
 * 
 * @param {boolean} 
 *         bSelect
 *         sets the listitem to true/false

 * @type sap.m.List
 * @public
 */


/**
 * Returns an array containing the selected list items. In the case of no selection, an empty array is returned.
 *
 * @name sap.m.List.prototype.getSelectedItems
 * @function

 * @type sap.m.ListItemBase[]
 * @public
 */


/**
 * Sets a list item to be selected by id. In single mode the method removes the previous selection.
 *
 * @name sap.m.List.prototype.setSelectedItemById
 * @function
 * @param {string} 
 *         sId
 *         The id of the list item to be selected
 * 
 * @param {boolean} 
 *         bSelect
 *         sets the listitem to true/false

 * @type sap.m.List
 * @public
 */


/**
 * Removes all selections of the current selection mode. Applies to the modes "SingleSelect", "MultiSelect" and "Delete".
 *
 * @name sap.m.List.prototype.removeSelections
 * @function

 * @type sap.m.List
 * @public
 */


// Start of sap/m/List.js
/**
* // * This file defines behavior for the control,
*/
sap.m.List.prototype.init = function(){
   // do something for initialization...
   this._mode = this.getMode();
   this._includeItemInSelection = this.getIncludeItemInSelection();
};


/**
 * // * Returns selected item. When no item is selected, "null" is returned. // *
 * When multi-selection is enabled and multiple items are selected, only the
 * first selected item is returned.
 */
sap.m.List.prototype.getSelectedItem = function() {
	var oResult;

	switch (this.getMode()) {
	case sap.m.ListMode.SingleSelect:
		var aItems = this.getItems();
		for ( var i = 0; i < aItems.length; i++) {
			if (aItems[i]._radioButton.getSelected()) {
				oResult = aItems[i];
				break;
			}
		}
		break;
	case sap.m.ListMode.MultiSelect:
		var aItems = this.getItems();
		for ( var i = 0; i < aItems.length; i++) {
			if (aItems[i]._checkBox.getSelected()) {
				oResult = aItems[i];
				break;
			}
		}
		break;
	case sap.m.ListMode.None:
		oResult = null;
		break;
	}
	return oResult;
};


/**
 * // * Sets a list item to be selected. In single mode the method removes the
 * previous selection.
 */
sap.m.List.prototype.setSelectedItem = function(oListItem, select) {
	var oList = sap.ui.getCore().byId(oListItem._listId);
	switch (this.getMode()) {
	case sap.m.ListMode.SingleSelect:
		oListItem._radioButton.setSelected(select);
		oListItem.$().toggleClass('sapMLIBSelected', select);
		if(oList._previousSingleSelect && oList._previousSingleSelect !== oListItem){
			oList._previousSingleSelect.$().toggleClass('sapMLIBSelected', false);
		}
		oList._previousSingleSelect = oListItem;
		break;
	case sap.m.ListMode.MultiSelect:
		oListItem._checkBox.setSelected(select);
		oListItem.$().toggleClass('sapMLIBSelected', select);
		break;
	case sap.m.ListMode.None:
	}
	return this;
};


/**
 * // * Returns an array containing the selected list items. In the case of no
 * selection, an empty array is returned.
 */
sap.m.List.prototype.getSelectedItems = function() {
	var aResult = [];

	switch (this.getMode()) {
	case sap.m.ListMode.SingleSelect:
		var aItems = this.getItems();
		for ( var i = 0; i < aItems.length; i++) {
			if (aItems[i]._radioButton.getSelected()) {
				aResult.push(aItems[i]);
			}
		}
		break;
	case sap.m.ListMode.MultiSelect:
		var aItems = this.getItems();
		for ( var i = 0; i < aItems.length; i++) {
			if (aItems[i]._checkBox.getSelected()) {
				aResult.push(aItems[i]);
			}
		}
		break;
	case sap.m.ListMode.None:
		break;
	}
	return aResult;
};


/**
 * // * Sets a list item to be selected by id. In single mode the method removes
 * the previous selection. .
 */
sap.m.List.prototype.setSelectedItemById = function(id, select) {
	var oList = sap.ui.getCore().byId(oListItem._listId);
	switch (this.getMode()) {
	case sap.m.ListMode.SingleSelect:
		var oListItem = sap.ui.getCore().byId(id);
		if (oListItem) {
			oListItem._radioButton.setSelected(select);
			oListItem.$().toggleClass('sapMLIBSelected', select);
			if(oList._previousSingleSelect && oList._previousSingleSelect !== oListItem){
				oList._previousSingleSelect.$().toggleClass('sapMLIBSelected', false);
			}
			oList._previousSingleSelect = oListItem;
		}
		break;
	case sap.m.ListMode.MultiSelect:
		var oListItem = sap.ui.getCore().byId(id);
		if (oListItem) {
			oListItem._checkBox.setSelected(select);
			oListItem.$().toggleClass('sapMLIBSelected', select);
		}
		break;
	case sap.m.ListMode.None:
		break;
	}
	return this;
};


/**
 * // * Removes all selections of the current selection mode. Applies to the modes "SingleSelect", "MultiSelect" and "Delete".
 */
sap.m.List.prototype.removeSelections = function() {
	this._removeCurrentSelection();
};


/**
 * // * List fires select event caused by checkbox/radiobutton
 */
sap.m.List.prototype._select = function(oEvent) {
	var oListItem = sap.ui.getCore().byId(this.oParent.getId());
	var oList = sap.ui.getCore().byId(oListItem._listId);
	
	oListItem.$().toggleClass('sapMLIBSelected');
	if(oList.getMode() === sap.m.ListMode.SingleSelect){
		//_previousSingleSelect is the previous selected item and is needed to remove the previous list item active style
		if(oList._previousSingleSelect && oList._previousSingleSelect !== oListItem){
			oList._previousSingleSelect.$().toggleClass('sapMLIBSelected', false);
		}
		oList._previousSingleSelect = oListItem;
	}
	//if includeItemInSelection true and select control pressed, we don't have to fire the select event
	if (!oList.getIncludeItemInSelection()) {
		oList.fireSelect({listItem:oListItem});
	}
};

/**
 * // * List fires select event caused by the list item
 */
sap.m.List.prototype._selectTapped = function(oListItem) {
	this.fireSelect({listItem:oListItem});
};

/**
 * // * List fires delete event caused by the delete image
 */
sap.m.List.prototype._delete = function(oEvent) {
	var oListItem = sap.ui.getCore().byId(this.oParent.getId());
	var oList = sap.ui.getCore().byId(oListItem._listId);
	oList.fireDelete({listItem:oListItem});
};

/**
 * // * removes all selections of the current mode if selection mode is changed
*/
sap.m.List.prototype._removeCurrentSelection = function() {
	switch (this._mode) {
		case sap.m.ListMode.SingleSelect:
			var aItems = this.getItems();
			for ( var i = 0; i < aItems.length; i++) {
				aItems[i]._radioButton.setSelected(false);
				aItems[i].$().toggleClass('sapMLIBSelected', false);
			}	
			break;
		case sap.m.ListMode.MultiSelect:
			var aItems = this.getItems();
			for ( var i = 0; i < aItems.length; i++) {
				aItems[i]._checkBox.setSelected(false);
				aItems[i].$().toggleClass('sapMLIBSelected', false);
			}
			break;
		case sap.m.ListMode.None:
			break;
	}	
};
}; // end of sap.m.List
if ( !jQuery.sap.isDeclared('sap.m.ListItemBase') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ListItemBase.
jQuery.sap.declare("sap.m.ListItemBase");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new ListItemBase.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getType type} : sap.m.ListType (default: sap.m.ListType.Inactive)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.ListItemBase#event:tap tap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ListItemBase#event:detailTap detailTap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * ListItemBase contains the core features of all specific list items.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.m.ListItemBase
 */
sap.ui.core.Control.extend("sap.m.ListItemBase", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"setSelected", "isSelected"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"type" : {type : "sap.m.ListType", group : "Misc", defaultValue : sap.m.ListType.Inactive},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true}
	},
	events : {
		"tap" : {}, 
		"detailTap" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.ListItemBase with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ListItemBase.extend
 * @function
 */

sap.m.ListItemBase.M_EVENTS = {'tap':'tap','detailTap':'detailTap'};


/**
 * Getter for property <code>type</code>.
 * Type of the list item, defines the behaviour
 *
 * Default value is <code>Inactive</code>
 *
 * @return {sap.m.ListType} the value of property <code>type</code>
 * @public
 * @name sap.m.ListItemBase#getType
 * @function
 */


/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>Inactive</code> 
 *
 * @param {sap.m.ListType} oType  new value for property <code>type</code>
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#setType
 * @function
 */

/**
 * Getter for property <code>visible</code>.
 * Invisible list items are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.ListItemBase#getVisible
 * @function
 */


/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#setVisible
 * @function
 */

/**
 * tap event 
 *
 * @name sap.m.ListItemBase#tap
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'tap' event of this <code>sap.m.ListItemBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. 
 *  
 * tap event 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.
 *
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#attachTap
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'tap' event of this <code>sap.m.ListItemBase</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#detachTap
 * @function
 */


/**
 * Fire event tap to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ListItemBase#fireTap
 * @function
 */

/**
 * detail tap event 
 *
 * @name sap.m.ListItemBase#detailTap
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'detailTap' event of this <code>sap.m.ListItemBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. 
 *  
 * detail tap event 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.
 *
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#attachDetailTap
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'detailTap' event of this <code>sap.m.ListItemBase</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#detachDetailTap
 * @function
 */


/**
 * Fire event detailTap to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ListItemBase#fireDetailTap
 * @function
 */

/**
 * sets the selction control to the given value
 *
 * @name sap.m.ListItemBase.prototype.setSelected
 * @function
 * @param {boolean} 
 *         bSelect
 *         set the select control to true/false

 * @type void
 * @public
 */


/**
 * returns the state of the item selection as a boolean
 *
 * @name sap.m.ListItemBase.prototype.isSelected
 * @function

 * @type boolean
 * @public
 */


// Start of sap/m/ListItemBase.js
//mode of the list e.g. singleSelection, multiSelection, ...
sap.m.ListItemBase.prototype._mode = sap.m.ListMode.None;

// radiobutton for single selection
sap.m.ListItemBase.prototype._getRadioButton = function(oRadioButtonId, sGroupName) {
	var _radioButton = this._radioButton || new sap.m.RadioButton(oRadioButtonId, {
		groupName : sGroupName,
		activeHandling : false
	}).setParent(this, null, true).attachSelect(this._select);
	return this._radioButton = _radioButton;
};

// checkbox for multiselection
sap.m.ListItemBase.prototype._getCheckBox = function(oBoxId) {
	var _checkBox = this._checkBox || new sap.m.CheckBox(oBoxId, {
		activeHandling : false
	}).setParent(this, null, true).attachSelect(this._select);
	return this._checkBox = _checkBox;
};

sap.m.ListItemBase.prototype.exit = function() {
	if (this._radioButton) {
		this._radioButton.destroy();
	}
	if (this._checkBox) {
		this._checkBox.destroy();
	}
	if (this._navImage) {
		this._navImage.destroy();
	}
	if (this._delImage) {
		this._delImage.destroy();
	}
};

sap.m.ListItemBase.prototype.isSelected = function() {
	var bSelect = false;
	if (this._mode === sap.m.ListMode.SingleSelect) {
		bSelect = this._radioButton.getSelected();
	}
	if (this._mode === sap.m.ListMode.MultiSelect) {
		bSelect = this._checkBox.getSelected();
	}
	return bSelect;
};


//called when IncludeItemInSelection true and we have to handle check mark and styling
sap.m.ListItemBase.prototype.setSelected = function(select) {
	var oList = sap.ui.getCore().byId(this._listId);
	oList.setSelectedItem(this, select);
};

sap.m.ListItemBase.prototype._getNavImage = function(oImgId, oImgStyle, oSrc, oActiveSrc) {
	// no navigation image for android
	if (!jQuery.os.ios && this.getType() == sap.m.ListType.Navigation)
		return null;

	if (!this._imagePath)
		if (jQuery.os.ios)
			this._imagePath = jQuery.sap.getModulePath("sap.m", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + "/img/list/ios/";
		else
			this._imagePath = jQuery.sap.getModulePath("sap.m", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + "/img/list/android/";
	
	if(oActiveSrc){
		oActiveSrc = this._imagePath + oActiveSrc;
	}
	
	var navImage = this._navImage || new sap.m.Image(oImgId, {
		src : this._imagePath + oSrc,
		activeSrc : oActiveSrc
	}).addStyleClass(oImgStyle, true).setParent(this, null, true);
	;
	return this._navImage = navImage;
};

sap.m.ListItemBase.prototype._getDelImage = function(oImgId, oImgStyle, oSrc) {
	if (!this._imagePath)
		if (jQuery.os.ios)
			this._imagePath = jQuery.sap.getModulePath("sap.m", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + "/img/list/ios/";
		else
			this._imagePath = jQuery.sap.getModulePath("sap.m", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + "/img/list/android/";

	var delImage = this._delImage || new sap.m.Image(oImgId, {
		src : this._imagePath + oSrc
	}).addStyleClass(oImgStyle, true).setParent(this, null, true).attachTap(this._delete);
	return this._delImage = delImage;
};

/**
 * @private
 */
sap.m.ListItemBase.prototype.ontap = function(oEvent) {
	var type = this.getType();

	if (this._includeItemInSelection && (this._mode === sap.m.ListMode.SingleSelect || this._mode === sap.m.ListMode.MultiSelect)) {
		// if _includeItemInSelection all tap events will be used for the mode
		// select/delete
		switch (this._mode) {
		case sap.m.ListMode.SingleSelect:
			// check if radiobutton fired the event and therefore do not set the
			// select
			if (oEvent.srcControl && oEvent.srcControl.getId() !== this._radioButton.getId()) {
				this.setSelected(true);
			}
			(sap.ui.getCore().byId(this._listId))._selectTapped(this);
			break;
		case sap.m.ListMode.MultiSelect:
			// check if checkbox fired the event and therefore do not set the select
			if (oEvent.srcControl && oEvent.srcControl.getId() !== this._checkBox.getId()) {
				this.setSelected(!this.isSelected());
			}
			(sap.ui.getCore().byId(this._listId))._selectTapped(this);
			break;
		}
	} else {
		switch (type) {
		// Inactive
		case sap.m.ListType.Inactive:
			break;

		// Active/Navigation
		case sap.m.ListType.Active:
		case sap.m.ListType.Navigation:
			// if a fast tap happens deactivate the touchstart/touchend timers and
			// their logic
			
			//activeHandled checks the control, whether it is handling the active feedback by its own or not... also delete icons won't cause an active feedback
			var activationHandled = this._doActiveHandling(oEvent);
			//check if the controls handles events on its own, imgNav must be handled anyhow
			
			if (activationHandled && (!this._eventHandledByControl || oEvent.srcControl.getId() !== (this.getId() + "-imgNav"))) {
				window.clearTimeout(this._timeoutIdStart);
				window.clearTimeout(this._timeoutIdEnd);
				this._event = oEvent;
				this._active = true;
				this._activeHandling();
				if(type === sap.m.ListType.Navigation){
					this._activeHandlingNav();
				}
				this._activeHandlingInheritor();
				var that = this;
			}
			if (!this._eventHandledByControl) {
				this.fireTap({/* no parameters */});
			}
			if (activationHandled && (!this._eventHandledByControl || oEvent.srcControl.getId() !== (this.getId() + "-imgNav"))) {
				window.setTimeout(function() {
					that._active = false;
					that._activeHandling();
					if(type === sap.m.ListType.Navigation){
						that._inactiveHandlingNav();
					}
					that._inactiveHandlingInheritor();
				}, 180);
			}
			break;

		// Detail
		case sap.m.ListType.Detail:
			if (oEvent.srcControl && oEvent.srcControl.getId() === (this.getId() + "-imgDet")) {
				this.fireDetailTap({/* no parameters */});
			}
			break;

		// DetailAndActive
		case sap.m.ListType.DetailAndActive:
			if (oEvent.srcControl && oEvent.srcControl.getId() === (this.getId() + "-imgDet")) {
				this.fireDetailTap({/* no parameters */});
			} else {
			//activeHandled checks the control, whether it is handling the active feedback by its own or not... also delete icons won't cause an active feedback
				var activationHandled = this._doActiveHandling(oEvent);
				if (activationHandled && (!this._eventHandledByControl)) {
					window.clearTimeout(this._timeoutIdStart);
					window.clearTimeout(this._timeoutIdEnd);
					this._event = oEvent;
					this._active = true;
					this._activeHandling();
					this._activeHandlingInheritor();
					var that = this;
				}
				if (!this._eventHandledByControl) {
					this.fireTap({/* no parameters */});
				}

				if (activationHandled && (!this._eventHandledByControl)) {
					window.setTimeout(function() {
						that._active = false;
						that._activeHandling();
						that._inactiveHandlingInheritor();
					}, 180);
				}
			}
			break;
		default:
		}
	}
};

sap.m.ListItemBase.prototype.ontouchstart = function(oEvent) {
	this._eventHandledByControl = oEvent.originalEvent._sapui_handledByControl;
	this._active = true;
	var that = this;
	var _event = oEvent;

	if (!that._touchEndProxy) {
		that._touchEndProxy = jQuery.proxy(that._ontouchend, that);
	}

	// here also bound to the mouseup mousemove event to enable it working in
	// desktop browsers
	jQuery(window.document).bind("vmouseup touchcancel", that._touchEndProxy);

	if (!that._touchMoveProxy) {
		that._touchMoveProxy = jQuery.proxy(that._ontouchmove, that);
	}

	jQuery(window.document).bind("vmousemove", that._touchMoveProxy);
	// timeout regarding active state when scrolling
	this._timeoutIdStart = window.setTimeout(function() {
		// several fingers could be used
		if (!(that._includeItemInSelection && (that._mode === sap.m.ListMode.SingleSelect || that._mode === sap.m.ListMode.MultiSelect)) && ((_event.targetTouches && _event.targetTouches.length === 1) || !_event.targetTouches)) {
			var type = that.getType();
			switch (type) {
			case sap.m.ListType.Inactive:
			case sap.m.ListType.Detail:
				break;
			case sap.m.ListType.Active:
			case sap.m.ListType.Navigation:
				//activeHandled checks the control, whether it is handling the active feedback by its own or not... also delete icons won't cause an active feedback
				var activationHandled = that._doActiveHandling(oEvent);
				if (activationHandled && (!that._eventHandledByControl || oEvent.srcControl.getId() !== (that.getId() + "-imgNav"))) {
					that._event = oEvent;
					that._activeHandling();
					if(type === sap.m.ListType.Navigation){
						that._activeHandlingNav();
					}
					that._activeHandlingInheritor();
				}
				break;
			case sap.m.ListType.DetailAndActive:
				//activeHandled checks the control, whether it is handling the active feedback by its own or not... also delete icons won't cause an active feedback
				var activationHandled = that._doActiveHandling(oEvent);
				if (activationHandled && oEvent.srcControl.getId() !== (that.getId() + "-imgDet") && (!that._eventHandledByControl)) {
					that._event = oEvent;
					that._activeHandling();
					that._activeHandlingInheritor();
				}
				break;
			default:
			}
		}
	}, 100);
};

// touch move to prevent active state when scrolling
sap.m.ListItemBase.prototype._ontouchmove = function(oEvent) {
	if (this._active || this._timeoutIdStart) {
		// there is movement and therefore no tap...remove active styles
		window.clearTimeout(this._timeoutIdStart);
		this._active = false;
		this._activeHandling();
		if(this.getType() === sap.m.ListType.Navigation){
			this._inactiveHandlingNav();
		}
		this._inactiveHandlingInheritor();
		this._timeoutIdStart = null;
		this._timeoutIdEnd = null;
	}
};

sap.m.ListItemBase.prototype._ontouchend = function(oEvent) {

	// several fingers could be used
	if ((oEvent.targetTouches && oEvent.targetTouches.length === 0) || !oEvent.targetTouches) {
		var type = this.getType();
		var that = this;
		switch (type) {
		case sap.m.ListType.Active:
		case sap.m.ListType.Navigation:
		case sap.m.ListType.DetailAndActive:
			// wait maybe it is a tap
			this._timeoutIdEnd = window.setTimeout(function() {
				that._event = oEvent;
				that._active = false;
				that._activeHandling();
				that._inactiveHandlingNav();
				that._inactiveHandlingInheritor();
			}, 100);
			break;
		case sap.m.ListType.Detail:
		case sap.m.ListType.Inactive:
		default:
		}
		jQuery(window.document).unbind("vmouseup touchcancel", this._touchEndProxy);
		jQuery(window.document).unbind("vmousemove", this._touchMoveProxy);
	}
};

// remove active styles for navigation list items
sap.m.ListItemBase.prototype._inactiveHandlingNav = function() {
	this._active = false;
	// image active state
	if (jQuery.os.ios) {
		var img = sap.ui.getCore().byId(this.getId() + "-imgNav");
		if (img) {
			img.setSrc(this._imagePath + "disclosure_indicator.png");
		}
	}
};

// add active styles for navigation items
sap.m.ListItemBase.prototype._activeHandlingNav = function() {
	// image active state
	if (jQuery.os.ios) {
		var img = sap.ui.getCore().byId(this.getId() + "-imgNav");
		if (img) {
			img.setSrc(this._imagePath + "disclosure_indicator_pressed.png");
		}
	}
};

// hook method for active handling...inheritors should overwrite this method
// when needed
sap.m.ListItemBase.prototype._activeHandlingInheritor = function() {
};

// hook method for inactive handling...inheritors should overwrite this method
// when needed
sap.m.ListItemBase.prototype._inactiveHandlingInheritor = function() {
};

//switch background style...active feedback
sap.m.ListItemBase.prototype._activeHandling = function() {
	this.$().toggleClass('sapMLIBActive', this._active);
};

sap.m.ListItemBase.prototype._doActiveHandling = function(oEvent) {
	if(oEvent.srcControl	&& (!oEvent.srcControl.getActiveHandling || oEvent.srcControl.getActiveHandling && oEvent.srcControl.getActiveHandling() !== false)
		 && oEvent.srcControl.getId() !== (this.getId() + "-imgDel")){
		return true;
	}
	return false;
};
}; // end of sap.m.ListItemBase
if ( !jQuery.sap.isDeclared('sap.m.NavContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.NavContainer.
jQuery.sap.declare("sap.m.NavContainer");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new NavContainer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getDefaultTransitionName defaultTransitionName} : string (default: "slide")</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getPages pages} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getInitialPage initialPage} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.NavContainer#event:navigate navigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.NavContainer#event:afterNavigate afterNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The NavContainer control handles hierarchic navigation between Pages or other fullscreen controls.
 * 
 * All children of this control will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.m.NavContainer
 */
sap.ui.core.Control.extend("sap.m.NavContainer", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"to", "back", "backToPage", "backToTop", "getPage", "getCurrentPage", "getPreviousPage", "addCustomTransition"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"defaultTransitionName" : {type : "string", group : "Appearance", defaultValue : "slide"}
	},
	defaultAggregation : "pages",
	aggregations : {
    	"pages" : {type : "sap.ui.core.Control", multiple : true, singularName : "page"}
	},
	associations : {
		"initialPage" : {type : "sap.ui.core.Control", multiple : false}
	},
	events : {
		"navigate" : {allowPreventDefault : true}, 
		"afterNavigate" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.NavContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.NavContainer.extend
 * @function
 */

sap.m.NavContainer.M_EVENTS = {'navigate':'navigate','afterNavigate':'afterNavigate'};


/**
 * Getter for property <code>height</code>.
 * The height of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.
 *
 * Default value is <code>'100%'</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.m.NavContainer#getHeight
 * @function
 */


/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>'100%'</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.NavContainer#setHeight
 * @function
 */

/**
 * Getter for property <code>width</code>.
 * The width of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.
 *
 * Default value is <code>'100%'</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.NavContainer#getWidth
 * @function
 */


/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>'100%'</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.NavContainer#setWidth
 * @function
 */

/**
 * Getter for property <code>visible</code>.
 * Whether the NavContainer is visible.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.NavContainer#getVisible
 * @function
 */


/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.NavContainer#setVisible
 * @function
 */

/**
 * Getter for property <code>defaultTransitionName</code>.
 * The type of the transition/animation to apply when "to()" is called without defining the transition to use. The default is "slide", other options are: "fade" and "show" and the names of any registered custom transitions.
 *
 * Default value is <code>"slide"</code>
 *
 * @return {string} the value of property <code>defaultTransitionName</code>
 * @public
 * @since 1.7.1
 * @name sap.m.NavContainer#getDefaultTransitionName
 * @function
 */


/**
 * Setter for property <code>defaultTransitionName</code>.
 *
 * Default value is <code>"slide"</code> 
 *
 * @param {string} sDefaultTransitionName  new value for property <code>defaultTransitionName</code>
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @since 1.7.1
 * @name sap.m.NavContainer#setDefaultTransitionName
 * @function
 */
	
/**
 * Getter for aggregation <code>pages</code>.<br/>
 * The content entities between which this NavContainer navigates. These can be of type sap.m.Page, sap.m.Carousel or any other control with fullscreen/page semantics.
 * 
 * These aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}
 * 
 * 
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.NavContainer#getPages
 * @function
 */

/**
 * Inserts a page into the aggregation named <code>pages</code>.
 *
 * @param {sap.ui.core.Control}
 *          oPage the page to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the page should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the page is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the page is inserted at 
 *             the last position        
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.NavContainer#insertPage
 * @function
 */


/**
 * Adds some page <code>oPage</code> 
 * to the aggregation named <code>pages</code>.
 *
 * @param {sap.ui.core.Control}
 *            oPage the page to add; if empty, nothing is inserted
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.NavContainer#addPage
 * @function
 */


/**
 * Removes an page from the aggregation named <code>pages</code>.
 *
 * @param {int | string | sap.ui.core.Control} vPage the page to remove or its index or id
 * @return {sap.ui.core.Control} the removed page or null
 * @public
 * @name sap.m.NavContainer#removePage
 * @function
 */


/**
 * Removes all the controls in the aggregation named <code>pages</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.NavContainer#removeAllPages
 * @function
 */


/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>pages</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oPage the page whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.NavContainer#indexOfPage
 * @function
 */


/**
 * Destroys all the pages in the aggregation 
 * named <code>pages</code>.
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.NavContainer#destroyPages
 * @function
 */

/**
 * This association can be used to define which page is displayed initially. If the given page does not exist or no page is given, the first page which has been added is considered as initial page.
 * This value should be set initially and not set/modified while the application is running.
 * 
 * This could be used not only for the initial display, but also if the user wants to navigate "up to top", so this page serves as a sort of "home/root page".
 *
 * @return {string} Id of the element which is the current target of the <code>initialPage</code> association, or null
 * @public
 * @name sap.m.NavContainer#getInitialPage
 * @function
 */


/**
 * This association can be used to define which page is displayed initially. If the given page does not exist or no page is given, the first page which has been added is considered as initial page.
 * This value should be set initially and not set/modified while the application is running.
 * 
 * This could be used not only for the initial display, but also if the user wants to navigate "up to top", so this page serves as a sort of "home/root page".
 *
 * @param {string | sap.ui.core.Control} vInitialPage 
 *    Id of an element which becomes the new target of this <code>initialPage</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.NavContainer#setInitialPage
 * @function
 */

/**
 * The event is fired when navigation between two pages has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation. 
 *
 * @name sap.m.NavContainer#navigate
 * @event
 * @since 1.7.1
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page which was shown before the current navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page which was shown before the current navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page which will be shown after the current navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page which will be shown after the current navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Whether the "to" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Whether this is a forward navigation, triggered by "to()".
 * @param {boolean} oControlEvent.getParameters.isBack Whether this is a back navigation, triggered by "back()".
 * @param {boolean} oControlEvent.getParameters.isBackToTop Whether this is a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} oControlEvent.getParameters.isBackToPage Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {string} oControlEvent.getParameters.direction How the navigation was triggered, possible values are "to", "back", and "backToTop".
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'navigate' event of this <code>sap.m.NavContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.NavContainer</code>.<br/> itself. 
 *  
 * The event is fired when navigation between two pages has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.NavContainer</code>.<br/> itself.
 *
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @since 1.7.1
 * @name sap.m.NavContainer#attachNavigate
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'navigate' event of this <code>sap.m.NavContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @since 1.7.1
 * @name sap.m.NavContainer#detachNavigate
 * @function
 */


/**
 * Fire event navigate to attached listeners.
 *
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 * * 
 * Expects following event parameters:
 * <ul>
 * <li>'from' of type <code>sap.ui.core.Control</code> The page which was shown before the current navigation.</li>
 * <li>'fromId' of type <code>string</code> The ID of the page which was shown before the current navigation.</li>
 * <li>'to' of type <code>sap.ui.core.Control</code> The page which will be shown after the current navigation.</li>
 * <li>'toId' of type <code>string</code> The ID of the page which will be shown after the current navigation.</li>
 * <li>'firstTime' of type <code>boolean</code> Whether the "to" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.</li>
 * <li>'isTo' of type <code>boolean</code> Whether this is a forward navigation, triggered by "to()".</li>
 * <li>'isBack' of type <code>boolean</code> Whether this is a back navigation, triggered by "back()".</li>
 * <li>'isBackToTop' of type <code>boolean</code> Whether this is a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'direction' of type <code>string</code> How the navigation was triggered, possible values are "to", "back", and "backToTop".</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * @since 1.7.1
 * @name sap.m.NavContainer#fireNavigate
 * @function
 */

/**
 * The event is fired when navigation between two pages has completed. In case of animated transitions this event is fired with some delay after the "navigate" event. 
 *
 * @name sap.m.NavContainer#afterNavigate
 * @event
 * @since 1.7.1
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page which had been shown before navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page which had been shown before navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page which is now shown after navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page which is now shown after navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Whether the "to" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Whether was a forward navigation, triggered by "to()".
 * @param {boolean} oControlEvent.getParameters.isBack Whether this was a back navigation, triggered by "back()".
 * @param {boolean} oControlEvent.getParameters.isBackToTop Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} oControlEvent.getParameters.isBackToPage Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {string} oControlEvent.getParameters.direction How the navigation was triggered, possible values are "to", "back", and "backToTop".
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterNavigate' event of this <code>sap.m.NavContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.NavContainer</code>.<br/> itself. 
 *  
 * The event is fired when navigation between two pages has completed. In case of animated transitions this event is fired with some delay after the "navigate" event. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.NavContainer</code>.<br/> itself.
 *
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @since 1.7.1
 * @name sap.m.NavContainer#attachAfterNavigate
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'afterNavigate' event of this <code>sap.m.NavContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @since 1.7.1
 * @name sap.m.NavContainer#detachAfterNavigate
 * @function
 */


/**
 * Fire event afterNavigate to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'from' of type <code>sap.ui.core.Control</code> The page which had been shown before navigation.</li>
 * <li>'fromId' of type <code>string</code> The ID of the page which had been shown before navigation.</li>
 * <li>'to' of type <code>sap.ui.core.Control</code> The page which is now shown after navigation.</li>
 * <li>'toId' of type <code>string</code> The ID of the page which is now shown after navigation.</li>
 * <li>'firstTime' of type <code>boolean</code> Whether the "to" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.</li>
 * <li>'isTo' of type <code>boolean</code> Whether was a forward navigation, triggered by "to()".</li>
 * <li>'isBack' of type <code>boolean</code> Whether this was a back navigation, triggered by "back()".</li>
 * <li>'isBackToTop' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'direction' of type <code>string</code> How the navigation was triggered, possible values are "to", "back", and "backToTop".</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @protected
 * @since 1.7.1
 * @name sap.m.NavContainer#fireAfterNavigate
 * @function
 */

/**
 * Navigates to the next page (with drill-down semantic) with the given (or default) animation. This creates a new history item inside the NavContainer and allows going back.
 * 
 * Available transitions currently include "slide" (default), "fade", "flip", and "show". None of these is currently making use of any given transitionParameters.
 * 
 * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given data object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property.
 *
 * @name sap.m.NavContainer.prototype.to
 * @function
 * @param {string} 
 *         sPageId
 *         The screen to which drilldown should happen. The ID or the control itself can be given.
 * @param {string} 
 *         sTransitionName
 *         The type of the transition/animation to apply. This parameter can be omitted; then the default is "slide" (horizontal movement from the right).
 * Other options are: "fade", "flip", and "show" and the names of any registered custom transitions.
 * 
 * None of the standard transitions is currently making use of any given transition parameters.
 * @param {object} 
 *         oData

 * @since 1.7.1 *         This optional object can carry any payload data which should be made available to the target page. The "beforeShow" event on the target page will contain this data object as "data" property.
 * 
 * Use case: in scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameters

 * @since 1.7.1 *         This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * 
 * For a proper parameter order, the "data" parameter must be given when the "transitionParameters" parameter is used. (it can be given as "null")
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * The "show", "slide" and "fade" transitions do not use any parameter.

 * @type sap.m.NavContainer
 * @public
 */


/**
 * Navigates back one level. If already on the initial page and there is no place to go back, nothing happens.
 * 
 * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given backData object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property. The original "data" object from the "to" navigation is also available in these event objects.
 *
 * @name sap.m.NavContainer.prototype.back
 * @function
 * @param {object} 
 *         oBackData

 * @since 1.7.1 *         This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as "backData" property. (The original data from the "to()" navigation will still be available as "data" property.)
 * 
 * In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameters

 * @since 1.7.1 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.

 * @type sap.m.NavContainer
 * @public
 */


/**
 * Navigates back to the nearest previous page in the NavContainer history with the given ID. If there is no such page among the previous pages, nothing happens.
 * The transition effect which had been used to get to the current page is inverted and used for this navigation.
 * 
 * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given backData object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property. The original "data" object from the "to" navigation is also available in these event objects.
 *
 * @name sap.m.NavContainer.prototype.backToPage
 * @function
 * @param {string} 
 *         sPageId
 *         The ID of the screen to which back navigation should happen. The nearest page with this ID among the previous pages in the history stack will be used.
 * @param {object} 
 *         oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the "backToPage" navigation. The event on the target page will contain this data object as "backData" property.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameters
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.

 * @type sap.m.NavContainer
 * @public
 * @since 1.7.2
 */


/**
 * Navigates back to the initial/top level (this is the element aggregated as "initialPage", or the first added element). If already on the initial page, nothing happens.
 * The transition effect which had been used to get to the current page is inverted and used for this navigation.
 * 
 * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given backData object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property.
 *
 * @name sap.m.NavContainer.prototype.backToTop
 * @function
 * @param {object} 
 *         oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the "backToTop" navigation. The event on the target page will contain this data object as "backData" property.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameters
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.

 * @type sap.m.NavContainer
 * @public
 * @since 1.7.1
 */


/**
 * Returns the control with the given ID from the "pages" aggregation (if available).
 *
 * @name sap.m.NavContainer.prototype.getPage
 * @function
 * @param {string} 
 *         sId
 *         The ID of the aggregated control to find.

 * @type sap.ui.core.Control
 * @public
 */


/**
 * Returns the currently displayed page-level control.
 *
 * @name sap.m.NavContainer.prototype.getCurrentPage
 * @function

 * @type sap.ui.core.Control
 * @public
 */


/**
 * Returns the previous page (the page from which the user drilled down to the current page with "to()").
 * Note: this is not the page which the user has seen before, but the page which is the target of the next "back()" navigation.
 * If there is no previous page, "undefined" is returned.
 *
 * @name sap.m.NavContainer.prototype.getPreviousPage
 * @function

 * @type sap.ui.core.Control
 * @public
 * @since 1.7.1
 */


/**
 * Adds a custom transition to the NavContainer type (not to a particular instance!). The transition is identified by a "name". Make sure to only use names that will not collide with transitions which may be added to the NavContainer later. A suggestion is to use the prefix "c_" or "_" for your custom transitions to ensure this.
 * 
 * "to" and "back" are the transition functions for the forward and backward navigation.
 * Both will be called with the following parameters:
 * - oFromPage: the Control which is currently being displayed by the NavContainer
 * - oToPage: the Control which should be displayed by the NavContainer after the transition
 * - fCallback: a function which MUST be called when the transition has completed
 * - oTransitionParameters: a data object that can be given by application code when triggering the transition by calling to() or back(); this object could give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration
 * 
 * The contract for "to" and "back" is that they may do an animation of their choice, but it should not take "too long". At the beginning of the transition the target page "oToPage" does have the CSS class "sapMNavItemHidden" which initially hides the target page (visibility:hidden). The transition can do any preparation (e.g. move that page out of the screen or make it transparent) and then should remove this CSS class.
 * After the animation the target page "oToPage" should cover the entire screen and the source page "oFromPage" should not be visible anymore. This page should then have the CSS class "sapMNavItemHidden".
 * For adding/removing this or other CSS classes, the transition can use the addStyleClass/removeStyleClass method, but it should make sure to give "true" as second parameter to avoid re-rendering:
 * oFromPage.addStyleClass("sapMNavItemHidden", true);
 * When the transition is complete, it MUST call the given fCallback method to inform the NavContainer that navigation has finished!
 * 
 * This method can be called on any NavContainer instance or statically on the sap.m.NavContainer type. However, the transition will always be registered for the type (and ALL instances), not for the single instance on which this method was invoked.
 * 
 * Returns the sap.m.NavContainer type if called statically, or "this" (to allow method chaining) if called on a particular NavContainer instance.
 *
 * @name sap.m.NavContainer.prototype.addCustomTransition
 * @function
 * @param {string} 
 *         sName
 *         The name of the transition. This name can be used by the application to choose this transition when navigating "to()" or "back()": the "transitionName" parameter of "NavContainer.to()" corresponds to this name, the back() navigation will automatically use the same transition.
 * 
 * Make sure to only use names that will not collide with transitions which may be added to the NavContainer later. A suggestion is to use the prefix "c_" or "_" for your custom transitions to ensure this.
 * @param {object} 
 *         oTo
 *         The function which will be called by the NavContainer when the application navigates "to()", using this animation's name.
 * 
 * See the documentation of NavContainer.addCustomTransitions for more details about this function.
 * @param {object} 
 *         oBack
 *         The function which will be called by the NavContainer when the application navigates "back()" from a page where it had navigated to using this animation's name.
 * 
 * See the documentation of NavContainer.addCustomTransitions for more details about this function.

 * @type sap.m.NavContainer
 * @public
 */


// Start of sap/m/NavContainer.js
sap.m.NavContainer.prototype.init = function() {
	this._pageStack = [];
	this._mVisitedPages = {};
	this._iTransitionsCompleted = 0; // to track proper callback at the end of transitions
	this._bNeverRendered = true;
};


sap.m.NavContainer.prototype.onBeforeRendering = function() {
	// for the very first rendering
	if (this._bNeverRendered) { // will be set to false after rendering
		
		// special handling for the page which is the first one which is rendered in this NavContainer
		var pageToRenderFirst = this.getCurrentPage();
		var pageId = pageToRenderFirst.getId();
		
		if (!this._mVisitedPages[pageId]) { // events could already be fired by initial "to()" call 
			this._mVisitedPages[pageId] = true;
			
			var oNavInfo = {
					from:null,
					fromId:null,
					to:pageToRenderFirst,
					toId:pageId,
					firstTime:true,
					isTo:false,
					isBack:false,
					isBackToPage:false,
					isBackToTop:false,
					direction:"initial"
			};
			
			var oEvent = jQuery.Event("BeforeFirstShow", oNavInfo);
			oEvent.srcControl = this;
			oEvent.data = {};
			oEvent.backData = {};
			pageToRenderFirst._handleEvent(oEvent);
			
			oEvent = jQuery.Event("BeforeShow", oNavInfo);
			oEvent.srcControl = this;
			oEvent.data = {};
			oEvent.backData = {};
			pageToRenderFirst._handleEvent(oEvent);
		}
	}
};

sap.m.NavContainer.prototype.onAfterRendering = function() {
	// for the very first rendering
	if (this._bNeverRendered) {
		this._bNeverRendered = false;
		delete this._bNeverRendered;
		
		// special handling for the page which is the first one which is rendered in this NavContainer
		var pageToRenderFirst = this.getCurrentPage();
		var pageId = pageToRenderFirst.getId();
		
		var oNavInfo = {
				from:null,
				fromId:null,
				to:pageToRenderFirst,
				toId:pageId,
				firstTime:true,
				isTo:false,
				isBack:false,
				isBackToTop:false,
				isBackToPage:false,
				direction:"initial"
		};
		
		var oEvent = jQuery.Event("AfterShow", oNavInfo);
		oEvent.srcControl = this;
		oEvent.data = {};
		oEvent.backData = {};
		pageToRenderFirst._handleEvent(oEvent);
	}
};

/**
 * Returns the page that should act as initial page - either the one designated as such, or, if it does not exist,
 * the first page (index 0 in the aggregation). Returns null if no page is aggregated.
 *
 * @private
 */
sap.m.NavContainer.prototype._getActualInitialPage = function() {
	var pageId = this.getInitialPage();
	if (pageId) {
		var page = sap.ui.getCore().byId(pageId);
		if (page) {
			return page;
		} else {
			jQuery.sap.log.error("NavContainer: control with ID '" + pageId + "' was set as 'initialPage' but was not found as a DIRECT child of this NavContainer (number of current children: " + this.getPages().length + ").");
		}
	}
	var pages = this.getPages();
	return (pages.length > 0 ? pages[0] : null);
};


//*** API methods ***

sap.m.NavContainer.prototype.getPage = function(pageId) {
	var aPages = this.getPages();
	for (var i = 0; i < aPages.length; i++) {
		if (aPages[i] && (aPages[i].getId() == pageId)) {
			return aPages[i];
		}
	}
	return null;
};


sap.m.NavContainer.prototype._ensurePageStackInitialized = function() {
	if (this._pageStack.length === 0) {
		var page = this._getActualInitialPage(); // TODO: with bookmarking / deep linking this is the initial, but not the "home"/root page
		this._pageStack.push({id:page.getId(), mode:"initial", data:{}});
	}
	return this._pageStack;
};

sap.m.NavContainer.prototype.getCurrentPage = function() {
	var stack = this._ensurePageStackInitialized();

	return this.getPage(stack[stack.length-1].id);
};

sap.m.NavContainer.prototype.getPreviousPage = function() {
	var stack = this._ensurePageStackInitialized();
	
	if (stack.length > 1) {
		return this.getPage(stack[stack.length-2].id);
		
	} else if (stack.length == 1) { // the current one is the only page on the stack
		return undefined;
		
	} else {
		jQuery.sap.log.error("page stack is empty but should have been initialized");
	}
};


sap.m.NavContainer.prototype._afterTransitionCallback = function(oNavInfo, oData, oBackData) {
	var oEvent = jQuery.Event("AfterShow", oNavInfo);
	oEvent.data = oData || {};
	oEvent.backData = oBackData || {};
	oEvent.srcControl = this; // store the element on the event (aligned with jQuery syntax)
	oNavInfo.to._handleEvent(oEvent);
	
	oEvent = jQuery.Event("AfterHide", oNavInfo);
	oEvent.srcControl = this; // store the element on the event (aligned with jQuery syntax)
	oNavInfo.from._handleEvent(oEvent);
	
	this.fireAfterNavigate(oNavInfo);
	this._iTransitionsCompleted++;
	this._bNavigating = false;
	// TODO: destroy HTML? Remember to destroy ALL HTML of several pages when backToTop has been called
};


sap.m.NavContainer.prototype.to = function(pageId, transitionName, data, oTransitionParameters) {
	if (pageId instanceof sap.ui.core.Control) {
		pageId = pageId.getId();
	}

	// fix parameters
	if (typeof(transitionName) !== "string") {
		// transitionName is omitted, shift parameters
		oTransitionParameters = data;
		data = transitionName;
	}
	transitionName = transitionName || this.getDefaultTransitionName();
	oTransitionParameters = oTransitionParameters || {};
	data = data || {};

	// make sure the initial page is on the stack
	this._ensurePageStackInitialized();

	var oFromPage = this.getCurrentPage();
	if (oFromPage && (oFromPage.getId() === pageId)) { // cannot navigate to the page that is already current
		jQuery.sap.log.warning(this.toString() + ": Cannot navigate to page " + pageId + " because this is the current page.");
		return this;
	}
	if (this._bNavigating) {
		jQuery.sap.log.warning(this.toString() + ": Cannot navigate to page " + pageId + " because another navigation is already in progress.");
		return this;
	}
	var oToPage = this.getPage(pageId);

	if (oToPage) {
		
		var oNavInfo = {
				from:oFromPage,
				fromId:oFromPage.getId(),
				to:oToPage,
				toId:pageId,
				firstTime:!this._mVisitedPages[pageId],
				isTo:true,
				isBack:false,
				isBackToTop:false,
				isBackToPage:false,
				direction:"to"
		};
		var bContinue = this.fireNavigate(oNavInfo);
		if (bContinue) { // ok, let's do the navigation
		
			// TODO: let one of the pages also cancel navigation?
			var oEvent = jQuery.Event("BeforeHide", oNavInfo);
			oEvent.srcControl = this; // store the element on the event (aligned with jQuery syntax)
			// no data needed for hiding
			oFromPage._handleEvent(oEvent);
			
			if (!this._mVisitedPages[pageId]) { // if this page has not been shown before
				oEvent = jQuery.Event("BeforeFirstShow", oNavInfo);
				oEvent.srcControl = this;
				oEvent.data = data || {};
				oEvent.backData = {};
				oToPage._handleEvent(oEvent);
			}
			
			oEvent = jQuery.Event("BeforeShow", oNavInfo);
			oEvent.srcControl = this;
			oEvent.data = data || {};
			oEvent.backData = {};
			oToPage._handleEvent(oEvent);

			
			this._pageStack.push({id:pageId,mode:transitionName,data:data}); // this actually causes/is the navigation
			this._mVisitedPages[pageId] = true;
	
			if (!this.getDomRef()) { // the wanted animation has been recorded, but when the NavContainer is not rendered, we cannot animate, so just return
				jQuery.sap.log.info("'Hidden' 'to' navigation in not-rendered NavContainer " + this.toString());
				return this;
			}
	
			// render the page that should get visible
			var oToPageDomRef;
			if (!(oToPageDomRef = oToPage.getDomRef()) || sap.ui.core.RenderManager.isPreservedContent(oToPageDomRef)) {
				oToPage.addStyleClass("sapMNavItemRendering", true);
				jQuery.sap.log.debug("Rendering 'to' page '" + oToPage.toString() + "' for 'to' navigation");
				var rm = sap.ui.getCore().createRenderManager();
				rm.render(oToPage, this.getDomRef());
				rm.destroy();
				oToPage.addStyleClass("sapMNavItemHidden", true).removeStyleClass("sapMNavItemRendering", true);
			}
	
			var oTransition = sap.m.NavContainer.transitions[transitionName] || sap.m.NavContainer.transitions["slide"];
	
			// Track proper invocation of the callback  TODO: only do this during development?
			var iCompleted = this._iTransitionsCompleted;
			var that = this;
			window.setTimeout(function(){
				if (that && (that._iTransitionsCompleted < iCompleted + 1)) {
					jQuery.sap.log.warning("Transition '" + transitionName + "' 'to' was triggered five seconds ago, but has not yet invoked the end-of-transition callback.");
				}
			}, 5000);
	
			this._bNavigating = true;
			oTransition.to(oFromPage, oToPage, jQuery.proxy(function(){this._afterTransitionCallback(oNavInfo, data);}, this), oTransitionParameters); // trigger the transition
			
		} else {
			jQuery.sap.log.info("Navigation to page with ID '" + pageId + "' has been aborted by the application");
		}

	} else {
		jQuery.sap.log.warning("Navigation triggered to page with ID '" + pageId + "', but this page is not known/aggregated by " + this);
	}
	return this;
};

// TODO: track and queue invalidations occurring during the animation


sap.m.NavContainer.prototype.back = function(backData, oTransitionParameters) {
	this._backTo("back", backData, oTransitionParameters);
	return this;
};

sap.m.NavContainer.prototype.backToPage = function(pageId, backData, oTransitionParameters) {
	this._backTo("backToPage", backData, oTransitionParameters, pageId);
	return this;
};

sap.m.NavContainer.prototype.backToTop = function(backData, oTransitionParameters) {
	this._backTo("backToTop", backData, oTransitionParameters);
	return this;
};


sap.m.NavContainer.prototype._backTo = function(sType, backData, oTransitionParameters, sRequestedPageId) {
	if (this._pageStack.length <= 1) {
		// there is no place to go back

		// but then the assumption is that the only page on the stack is the initial one and has not been navigated to. Check this:
		if (this._pageStack.length === 1 && this._pageStack[0].mode != "initial") {
			throw new Error("Initial page not found on the stack. How did this happen?");
		}
		return this;

	} else { // normal back navigation
		if (this._bNavigating) {
			jQuery.sap.log.warning(this.toString() + ": Cannot navigate back because another navigation is already in progress.");
			return this;
		}
		
		var oFromPageInfo = this._pageStack[this._pageStack.length-1];
		var mode = oFromPageInfo.mode;
		var oFromPage = this.getPage(oFromPageInfo.id);
		var oToPage;
		var oToPageData;
		
		if (sType === "backToTop") {
			oToPage = this._getActualInitialPage();
			oToPageData = null;
			
		} else if (sType === "backToPage") {
			var info = this._findClosestPreviousPageInfo(sRequestedPageId);
			if (!info) {
				jQuery.sap.log.error(this.toString() + ": Cannot navigate backToPage('" + sRequestedPageId + "') because target page was not found among the previous pages.");
				return this;
			}
			oToPage = sap.ui.getCore().byId(info.id);
			if (!oToPage) {
				jQuery.sap.log.error(this.toString() + ": Cannot navigate backToPage('" + sRequestedPageId + "') because target page does not exist anymore.");
				return this;
			}
			oToPageData = info.data;
			
		} else { // normal "back"
			oToPage = this.getPreviousPage();
			oToPageData = this._pageStack[this._pageStack.length-2].data;
		}
		
		if(!oToPage) {
			jQuery.sap.log.error("NavContainer back navigation: target page is not defined or not aggregated by this NavContainer. Aborting navigation.");
			return;
		}

		var oToPageId = oToPage.getId();
		backData = backData || {};
		oTransitionParameters = oTransitionParameters || {};
		
		var oNavInfo = {
			from:oFromPage,
			fromId:oFromPage.getId(),
			to:oToPage,
			toId:oToPageId,
			firstTime:!this._mVisitedPages[oToPageId],
			isTo:false,
			isBack:(sType === "back"),
			isBackToPage:(sType === "backToPage"),
			isBackToTop:(sType === "backToTop"),
			direction:sType
		};
		var bContinue = this.fireNavigate(oNavInfo);
		if (bContinue) { // ok, let's do the navigation
			
			var oEvent = jQuery.Event("BeforeHide", oNavInfo);
			oEvent.srcControl = this; // store the element on the event (aligned with jQuery syntax)
			// no data needed for hiding
			oFromPage._handleEvent(oEvent);
			
			if (!this._mVisitedPages[oToPageId]) { // if this page has not been shown before
				oEvent = jQuery.Event("BeforeFirstShow", oNavInfo);
				oEvent.srcControl = this;
				oEvent.backData = backData || {};
				// the old data from the forward navigation should not exist because there was never a forward navigation
				oEvent.data = {};
				oToPage._handleEvent(oEvent);
			}
			
			oEvent = jQuery.Event("BeforeShow", oNavInfo);
			oEvent.srcControl = this;
			oEvent.backData = backData || {};
			oEvent.data =  oToPageData || {}; // the old data from the forward navigation
			oToPage._handleEvent(oEvent);

			this._pageStack.pop(); // this actually causes/is the navigation
			this._mVisitedPages[oToPageId] = true;
			
			if (sType === "backToTop") { // if we should navigate to top, just clean up the whole stack
				this._pageStack = [];
				this.getCurrentPage(); // this properly restores the initial page on the stack
				
			} else if (sType === "backToPage") {
				while (this._pageStack[this._pageStack.length-1].id !== sRequestedPageId) { // by now it is guaranteed that we will find it
					this._pageStack.pop();
				}
			}

			if (!this.getDomRef()) { // the wanted animation has been recorded, but when the NavContainer is not rendered, we cannot animate, so just return
				jQuery.sap.log.info("'Hidden' back navigation in not-rendered NavContainer " + this.toString());
				return this;
			}
	
			var oTransition = sap.m.NavContainer.transitions[mode] || sap.m.NavContainer.transitions["slide"];
	
			// Track proper invocation of the callback  TODO: only do this during development?
			var iCompleted = this._iTransitionsCompleted;
			var that = this;
			window.setTimeout(function(){
				if (that && (that._iTransitionsCompleted < iCompleted + 1)) {
					jQuery.sap.log.warning("Transition '" + mode + "' 'back' was triggered five seconds ago, but has not yet invoked the end-of-transition callback.");
				}
			}, 5000);
			
			this._bNavigating = true;
			
			// make sure the to-page is rendered
			var oToPageDomRef;
			if (!(oToPageDomRef = oToPage.getDomRef()) || sap.ui.core.RenderManager.isPreservedContent(oToPageDomRef)) {
				oToPage.addStyleClass("sapMNavItemRendering", true);
				jQuery.sap.log.debug("Rendering 'to' page '" + oToPage.toString() + "' for back navigation");
				var rm = sap.ui.getCore().createRenderManager();
				var childPos = this.$().children().index(oFromPage.getDomRef());
				rm.renderControl(oToPage);
				rm.flush(this.getDomRef(), false, childPos);
				rm.destroy();
				oToPage.addStyleClass("sapMNavItemHidden", true).removeStyleClass("sapMNavItemRendering", true);
			}
			
			// trigger the transition
			oTransition.back(oFromPage, oToPage, jQuery.proxy(function(){this._afterTransitionCallback(oNavInfo, oToPageData, backData);}, this), oTransitionParameters); // trigger the transition
		}
	}
	return this;
};

sap.m.NavContainer.prototype._findClosestPreviousPageInfo = function(sRequestedPreviousPageId) {
	for (var i = this._pageStack.length-2; i >= 0; i--) {
		var info = this._pageStack[i];
		if (info.id === sRequestedPreviousPageId) {
			return info;
		}
	}
	return null;
};


sap.m.NavContainer.transitions = sap.m.NavContainer.transitions || {}; // make sure the object exists


//*** SHOW Transition ***

sap.m.NavContainer.transitions["show"] = {
	to: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
		oToPage.removeStyleClass("sapMNavItemHidden", true); // remove the "hidden" class which has been added by the NavContainer before the transition was called
		oFromPage.addStyleClass("sapMNavItemHidden", true);
		fCallback();
	},
	
	back: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
		oToPage.removeStyleClass("sapMNavItemHidden", true);
		oFromPage.addStyleClass("sapMNavItemHidden", true); // instantly hide the previous page
		fCallback();
	}
};


//*** SLIDE Transition ***

sap.m.NavContainer.transitions["slide"] = {

	to: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
		// set the style classes that represent the initial state
		oToPage.addStyleClass("sapMNavItemRight", true);     // the page to navigate to should be placed just right of the visible area
		oToPage.removeStyleClass("sapMNavItemHidden", true); // remove the "hidden" class now which has been added by the NavContainer before the animation was called

		// iPhone needs some time... there is no animation without waiting
		window.setTimeout(function(){
			
			var bOneTransitionFinished = false;
			var fAfterTransition = null; // make Eclipse aware that this variable is defined
			fAfterTransition = function() {
				if (!bOneTransitionFinished) {
					// the first one of both transitions finished
					bOneTransitionFinished = true;
				} else {
					// the second transition now also finished => clean up
					oFromPage.detachBrowserEvent("webkitTransitionEnd transitionend msTransitionEnd", fAfterTransition);
					oToPage.detachBrowserEvent("webkitTransitionEnd transitionend msTransitionEnd", fAfterTransition);
					
					// clean up the style classes
					oToPage.removeStyleClass("sapMNavItemSliding", true);
					oFromPage.removeStyleClass("sapMNavItemSliding", true).addStyleClass("sapMNavItemHidden", true).removeStyleClass("sapMNavItemLeft", true);

					// notify the NavContainer that the animation is complete
					fCallback();
				}
			};
			
			oFromPage.attachBrowserEvent("webkitTransitionEnd transitionend msTransitionEnd", fAfterTransition);
			oToPage.attachBrowserEvent("webkitTransitionEnd transitionend msTransitionEnd", fAfterTransition);
			
			// set the new style classes that represent the end state (and thus start the transition)
			oToPage.addStyleClass("sapMNavItemSliding", true).removeStyleClass("sapMNavItemRight", true);
			oFromPage.addStyleClass("sapMNavItemSliding", true).addStyleClass("sapMNavItemLeft", true);

		}, 60); // this value has been found by testing on actual devices; with "10" there are frequent "no-animation" issues, with "100" there are none, with "50" there are very few
	},

	back: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
		// set the style classes that represent the initial state
		oToPage.addStyleClass("sapMNavItemLeft", true);     // the page to navigate back to should be placed just left of the visible area
		oToPage.removeStyleClass("sapMNavItemHidden", true); // remove the "hidden" class now which has been added by the NavContainer before the animation was called

		// iPhone needs some time... there is no animation without waiting
		window.setTimeout(function() {
			
			var bOneTransitionFinished = false;
			var fAfterTransition = null; // make Eclipse aware that this variable is defined
			fAfterTransition = function() {
				if (!bOneTransitionFinished) {
					// the first one of both transitions finished
					bOneTransitionFinished = true;
				} else {
					// the second transition now also finished => clean up
					oFromPage.detachBrowserEvent("webkitTransitionEnd transitionend msTransitionEnd", fAfterTransition);
					oToPage.detachBrowserEvent("webkitTransitionEnd transitionend msTransitionEnd", fAfterTransition);
					
					// clean up the style classes
					oToPage.removeStyleClass("sapMNavItemSliding", true);
					oFromPage.removeStyleClass("sapMNavItemSliding", true).addStyleClass("sapMNavItemHidden", true).removeStyleClass("sapMNavItemRight", true);

					// notify the NavContainer that the animation is complete
					fCallback();
				}
			};
			
			oFromPage.attachBrowserEvent("webkitTransitionEnd transitionend msTransitionEnd", fAfterTransition);
			oToPage.attachBrowserEvent("webkitTransitionEnd transitionend msTransitionEnd", fAfterTransition);
			
			// set the new style classes that represent the end state (and thus start the transition)
			oToPage.addStyleClass("sapMNavItemSliding", true).removeStyleClass("sapMNavItemLeft", true); // transition from left position to normal/center position starts now
			oFromPage.addStyleClass("sapMNavItemSliding", true).addStyleClass("sapMNavItemRight", true); // transition from normal position to right position starts now

		}, 100); // this value has been found by testing on actual devices; with "10" there are frequent "no-animation" issues, with "100" there are none, with "50" there are very few
	}
};


//*** FADE Transition ***

sap.m.NavContainer.transitions["fade"] = {

		to: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
			// set the style classes that represent the initial state
			oToPage.addStyleClass("sapMNavItemTransparent", true);
			oToPage.removeStyleClass("sapMNavItemHidden", true);

			// iPhone needs some time for rendering, there is no animation without waiting
			window.setTimeout(function(){
				
				// the code to be executed after the new page has completed fading in
				var fAfterTransition = null; // make Eclipse aware that this variable is defined
				fAfterTransition = function() {
					oToPage.detachBrowserEvent("webkitTransitionEnd transitionend msTransitionEnd", fAfterTransition);
					
					// clean up the style classes
					oFromPage.addStyleClass("sapMNavItemHidden", true);
					oToPage.removeStyleClass("sapMNavItemFading", true).removeStyleClass("sapMNavItemOpaque", true);

					// notify the NavContainer that the animation is complete
					fCallback();
				};
				
				oToPage.attachBrowserEvent("webkitTransitionEnd transitionend msTransitionEnd", fAfterTransition);
				
				// set the new style classes that represent the end state (and thus start the transition)
				oToPage.addStyleClass("sapMNavItemFading", true).removeStyleClass("sapMNavItemTransparent", true).addStyleClass("sapMNavItemOpaque");
				
			}, 10);
		},

		back: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
			// set the style classes that represent the initial state
			oFromPage.addStyleClass("sapMNavItemOpaque", true);
			oToPage.removeStyleClass("sapMNavItemHidden", true);

			// iPhone needs some time for rendering, there is no animation without waiting
			window.setTimeout(function() {
				
				// the code to be executed after the new page has completed fading in
				var fAfterTransition = null; // make Eclipse aware that this variable is defined
				fAfterTransition = function() {
					oFromPage.detachBrowserEvent("webkitTransitionEnd transitionend msTransitionEnd", fAfterTransition);
					
					// clean up the style classes
					oFromPage.removeStyleClass("sapMNavItemFading", true).addStyleClass("sapMNavItemHidden", true); // TODO: destroy HTML?
					oFromPage.removeStyleClass("sapMNavItemTransparent", true);

					// notify the NavContainer that the animation is complete
					fCallback();
				};
				
				oFromPage.attachBrowserEvent("webkitTransitionEnd transitionend msTransitionEnd", fAfterTransition);
				
				// set the new style classes that represent the end state (and thus start the transition)
				oFromPage.addStyleClass("sapMNavItemFading", true).removeStyleClass("sapMNavItemOpaque", true);
				oFromPage.addStyleClass("sapMNavItemTransparent", true);

			}, 10);
		}
};


//*** FLIP Transition ***

sap.m.NavContainer.transitions["flip"] = {

	to: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
		// set the style classes that represent the initial state
		oToPage.addStyleClass("sapMNavItemFlipNext", true);     // the page to navigate to should be placed just right of the visible area
		oToPage.removeStyleClass("sapMNavItemHidden", true); // remove the "hidden" class now which has been added by the NavContainer before the animation was called

		// iPhone needs some time... there is no animation without waiting
		window.setTimeout(function(){
			
			var bOneTransitionFinished = false;
			var fAfterTransition = null; // make Eclipse aware that this variable is defined
			fAfterTransition = function() {
				if (!bOneTransitionFinished) {
					// the first one of both transitions finished
					bOneTransitionFinished = true;
				} else {
					// the second transition now also finished => clean up
					oFromPage.detachBrowserEvent("webkitTransitionEnd transitionend msTransitionEnd", fAfterTransition);
					oToPage.detachBrowserEvent("webkitTransitionEnd transitionend msTransitionEnd", fAfterTransition);
					
					// clean up the style classes
					oToPage.removeStyleClass("sapMNavItemFlipping", true);
					oFromPage.removeStyleClass("sapMNavItemFlipping", true).addStyleClass("sapMNavItemHidden", true).removeStyleClass("sapMNavItemFlipPrevious", true);

					// notify the NavContainer that the animation is complete
					fCallback();
				}
			};
			
			oFromPage.attachBrowserEvent("webkitTransitionEnd transitionend msTransitionEnd", fAfterTransition);
			oToPage.attachBrowserEvent("webkitTransitionEnd transitionend msTransitionEnd", fAfterTransition);
			
			// set the new style classes that represent the end state (and thus start the transition)
			oToPage.addStyleClass("sapMNavItemFlipping", true).removeStyleClass("sapMNavItemFlipNext", true);
			oFromPage.addStyleClass("sapMNavItemFlipping", true).addStyleClass("sapMNavItemFlipPrevious", true);

		}, 60); // this value has been found by testing on actual devices; with "10" there are frequent "no-animation" issues, with "100" there are none, with "50" there are very few
	},

	back: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
		// set the style classes that represent the initial state
		oToPage.addStyleClass("sapMNavItemFlipPrevious", true);     // the page to navigate back to should be placed just left of the visible area
		oToPage.removeStyleClass("sapMNavItemHidden", true); // remove the "hidden" class now which has been added by the NavContainer before the animation was called

		// iPhone needs some time... there is no animation without waiting
		window.setTimeout(function() {
			
			var bOneTransitionFinished = false;
			var fAfterTransition = null; // make Eclipse aware that this variable is defined
			fAfterTransition = function() {
				if (!bOneTransitionFinished) {
					// the first one of both transitions finished
					bOneTransitionFinished = true;
				} else {
					// the second transition now also finished => clean up
					oFromPage.detachBrowserEvent("webkitTransitionEnd transitionend msTransitionEnd", fAfterTransition);
					oToPage.detachBrowserEvent("webkitTransitionEnd transitionend msTransitionEnd", fAfterTransition);
					
					// clean up the style classes
					oToPage.removeStyleClass("sapMNavItemFlipping", true);
					oFromPage.removeStyleClass("sapMNavItemFlipping", true).addStyleClass("sapMNavItemHidden", true).removeStyleClass("sapMNavItemFlipNext", true);

					// notify the NavContainer that the animation is complete
					fCallback();
				}
			};
			
			oFromPage.attachBrowserEvent("webkitTransitionEnd transitionend msTransitionEnd", fAfterTransition);
			oToPage.attachBrowserEvent("webkitTransitionEnd transitionend msTransitionEnd", fAfterTransition);
			
			// set the new style classes that represent the end state (and thus start the transition)
			oToPage.addStyleClass("sapMNavItemFlipping", true).removeStyleClass("sapMNavItemFlipPrevious", true); // transition from left position to normal/center position starts now
			oFromPage.addStyleClass("sapMNavItemFlipping", true).addStyleClass("sapMNavItemFlipNext", true); // transition from normal position to right position starts now

		}, 60); // this value has been found by testing on actual devices; with "10" there are frequent "no-animation" issues, with "100" there are none, with "50" there are very few
	}
};


sap.m.NavContainer.prototype.addCustomTransition = function(sName, fTo, fBack) {
	if (sap.m.NavContainer.transitions[sName]) {
		jQuery.sap.log.warning("Transition with name " + sName + " already exists in " + this + ". It is now being replaced by custom transition.");
	}
	
	sap.m.NavContainer.transitions[sName] = {to:fTo, back:fBack};
	return this;
};
sap.m.NavContainer.addCustomTransition = sap.m.NavContainer.prototype.addCustomTransition;



// ----------------- code for tracking and avoiding invalidation --------------------------

/**
 * Forces invalidation and rerendering (.invalidate() is disabled)
 * @private
 */
sap.m.NavContainer.prototype.forceInvalidation = sap.m.NavContainer.prototype.invalidate;

sap.m.NavContainer.prototype.invalidate = function(oSource) {

	if (oSource == this) {
		// does not happen because the source is only given when propagating to a parent

	} else if (!oSource) {
		// direct invalidation of the NavContainer; this means a property has been modified
		this.forceInvalidation(); // let invalidation occur

	} else if (oSource instanceof sap.ui.core.Control) {
		// an aggregated control is invalidated
		var bIsInPages = false,
			aPages = this.getPages(),
			l = aPages.length;
			
		for (var i = 0; i < l; i++) {
			if (aPages[i] === oSource) {
				bIsInPages = true;
				break;
			}
		}
		
		if (bIsInPages && !(oSource.getId() === this.getCurrentPage())) {
			// the invalidation source is a non-current page, so do not rerender anything
		} else {
			// TODO: there will be more cases where invalidation is not required...
			this.forceInvalidation();
		}
		
	} else { 
		// TODO: which cases are ending up here?
		this.forceInvalidation();
		
	}
};

sap.m.NavContainer.prototype.addPage = function(oPage) {
	oPage.addStyleClass("sapMNavItem");
	this.addAggregation("pages", oPage, true);
	return this;
};

sap.m.NavContainer.prototype.insertPage = function(oPage, iIndex) {
	oPage.addStyleClass("sapMNavItem");
	this.insertAggregation("pages", oPage, true);
	return this;
};



// documentation of the pseudo events (beforeShow, afterShow, beforeHide etc.)

/**
 * sap.m.NavContainerChild is an artificial interface with the only purpose to bear the documentation of 
 * pseudo events triggered by sap.m.NavContainer on its child controls when navigation occures and child controls are displayed/hidden.
 * 
 * Interested parties outside the child control can listen to one or more of these events by registering a Delegate:
 * <pre>
 * page1.addDelegate({
 *    onBeforeShow: function(evt) {
 *       // page1 is about to be shown; act accordingly - if required you can read event information from the evt object
 *    },
 *    onAfterHide: function(evt) {
 *       // ...
 *    }
 * });
 * </pre>
 * 
 * @name sap.m.NavContainerChild
 * @interface 
 * @public
*/


/**
 * This event is fired before the NavContainer shows this child control for the first time.
 * @event
 * @param {sap.ui.core.Control} oEvent.srcControl the NavContainer firing the event
 * @param {object} oEvent.data the data object which has been passed with the "to" navigation, or an empty object
 * @param {object} oEvent.backData the data object which has been passed with the back navigation, or an empty object
 * @name sap.m.NavContainerChild.prototype.BeforeFirstShow
 * @public
*/

/**
 * This event is fired every time before the NavContainer shows this child control. In case of animated transitions this 
 * event is fired before the transition starts.
 * @event
 * @param {sap.ui.core.Control} oEvent.srcControl the NavContainer firing the event
 * @param {object} oEvent.data the data object which has been passed with the "to" navigation, or an empty object
 * @param {object} oEvent.backData the data object which has been passed with the back navigation, or an empty object
 * @name sap.m.NavContainerChild.prototype.BeforeShow
 * @public
*/

/**
 * This event is fired every time when the NavContainer has made this child control visible. In case of animated transitions this 
 * event is fired after the transition finishes. This control is now being displayed and not animated anymore.
 * @event
 * @param {sap.ui.core.Control} oEvent.srcControl the NavContainer firing the event
 * @param {object} oEvent.data the data object which has been passed with the "to" navigation, or an empty object
 * @param {object} oEvent.backData the data object which has been passed with the back navigation, or an empty object
 * @name sap.m.NavContainerChild.prototype.AfterShow
 * @public
*/

/**
 * This event is fired every time before the NavContainer hides this child control. In case of animated transitions this 
 * event is fired before the transition starts.
 * @event
 * @param {sap.ui.core.Control} oEvent.srcControl the NavContainer firing the event
 * @name sap.m.NavContainerChild.prototype.BeforeHide
 * @public
*/

/**
 * This event is fired every time when the NavContainer has made this child control invisible. In case of animated transitions this 
 * event is fired after the transition finishes. This control is now no longer being displayed and not animated anymore.
 * @event
 * @param {sap.ui.core.Control} oEvent.srcControl the NavContainer firing the event
 * @name sap.m.NavContainerChild.prototype.AfterHide
 * @public
*/

}; // end of sap.m.NavContainer
if ( !jQuery.sap.isDeclared('sap.m.Page') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Page.
jQuery.sap.declare("sap.m.Page");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Page.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getShowNavButton showNavButton} : boolean (default: false)</li>
 * <li>{@link #getShowHeader showHeader} : boolean (default: true)</li>
 * <li>{@link #getNavButtonText navButtonText} : string</li>
 * <li>{@link #getEnableScrolling enableScrolling} : boolean (default: true)</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getBackgroundDesign backgroundDesign} : sap.m.PageBackgroundDesign (default: sap.m.PageBackgroundDesign.Standard)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li>
 * <li>{@link #getCustomHeader customHeader} : sap.m.Bar</li>
 * <li>{@link #getFooter footer} : sap.m.Bar</li>
 * <li>{@link #getSubHeader subHeader} : sap.m.Bar</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Page#event:navButtonTap navButtonTap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A page is a basic container for a mobile application screen. Usually one page is displayed at a time (in landscape mode or on tablets depending on the layout two pages might be displayed side-by-side).
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.m.Page
 */
sap.ui.core.Control.extend("sap.m.Page", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"scrollTo"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"title" : {type : "string", group : "Data", defaultValue : null},
		"showNavButton" : {type : "boolean", group : "Appearance", defaultValue : false},
		"showHeader" : {type : "boolean", group : "Appearance", defaultValue : true},
		"navButtonText" : {type : "string", group : "Misc", defaultValue : null},
		"enableScrolling" : {type : "boolean", group : "Behavior", defaultValue : true},
		"icon" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},
		"backgroundDesign" : {type : "sap.m.PageBackgroundDesign", group : "Appearance", defaultValue : sap.m.PageBackgroundDesign.Standard}
	},
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}, 
    	"customHeader" : {type : "sap.m.Bar", multiple : false}, 
    	"footer" : {type : "sap.m.Bar", multiple : false}, 
    	"subHeader" : {type : "sap.m.Bar", multiple : false}
	},
	events : {
		"navButtonTap" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Page with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Page.extend
 * @function
 */

sap.m.Page.M_EVENTS = {'navButtonTap':'navButtonTap'};


/**
 * Getter for property <code>title</code>.
 * The title text appearing in the page header bar.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.Page#getTitle
 * @function
 */


/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#setTitle
 * @function
 */

/**
 * Getter for property <code>showNavButton</code>.
 * A nav button will be rendered on the left area of header bar if this property is set to true.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showNavButton</code>
 * @public
 * @name sap.m.Page#getShowNavButton
 * @function
 */


/**
 * Setter for property <code>showNavButton</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowNavButton  new value for property <code>showNavButton</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#setShowNavButton
 * @function
 */

/**
 * Getter for property <code>showHeader</code>.
 * Whether this page shall have a header.
 * If set to true, either the control under the "customHeader" aggregation is used, or if there is no such control, a Header control is constructed from the properties "title", "showNavButton", "navButtonText" and "icon" depending on the platform.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showHeader</code>
 * @public
 * @name sap.m.Page#getShowHeader
 * @function
 */


/**
 * Setter for property <code>showHeader</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowHeader  new value for property <code>showHeader</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#setShowHeader
 * @function
 */

/**
 * Getter for property <code>navButtonText</code>.
 * The text of the nav button when running in iOS (if shown) in case it deviates from the default, which is "Back".
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>navButtonText</code>
 * @public
 * @name sap.m.Page#getNavButtonText
 * @function
 */


/**
 * Setter for property <code>navButtonText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNavButtonText  new value for property <code>navButtonText</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#setNavButtonText
 * @function
 */

/**
 * Getter for property <code>enableScrolling</code>.
 * Whether the Page takes special measures to make page content scrollable and keep headers fixed.
 * If set to false, there will be no scrolling at all; for performance reasons this is highly recommended when scrolling is not needed.
 * 
 * The Page only allows vertical scrolling because horizontal scrolling is discouraged in general for full-page content. If it still needs to be achieved, disable the Page scrolling and use a ScrollContainer as full-page content of the Page. This allows you to freely configure scrolling. It can also be used to create horizontally-scrolling sub-areas of (vertically-scrolling) Pages.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enableScrolling</code>
 * @public
 * @name sap.m.Page#getEnableScrolling
 * @function
 */


/**
 * Setter for property <code>enableScrolling</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnableScrolling  new value for property <code>enableScrolling</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#setEnableScrolling
 * @function
 */

/**
 * Getter for property <code>icon</code>.
 * the icon that is rendered in the page header bar in non-iOS platforms
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.m.Page#getIcon
 * @function
 */


/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#setIcon
 * @function
 */

/**
 * Getter for property <code>backgroundDesign</code>.
 * This property is used to set the background color of a page. When a list is placed inside a page, the value "List" should be used to display a gray background. "Standard", with the value white, is used as default if not specified.
 *
 * Default value is <code>Standard</code>
 *
 * @return {sap.m.PageBackgroundDesign} the value of property <code>backgroundDesign</code>
 * @public
 * @name sap.m.Page#getBackgroundDesign
 * @function
 */


/**
 * Setter for property <code>backgroundDesign</code>.
 *
 * Default value is <code>Standard</code> 
 *
 * @param {sap.m.PageBackgroundDesign} oBackgroundDesign  new value for property <code>backgroundDesign</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#setBackgroundDesign
 * @function
 */
	
/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content of this page
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.Page#getContent
 * @function
 */

/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#insertContent
 * @function
 */


/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#addContent
 * @function
 */


/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.m.Page#removeContent
 * @function
 */


/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.Page#removeAllContent
 * @function
 */


/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.Page#indexOfContent
 * @function
 */


/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#destroyContent
 * @function
 */
	
/**
 * Getter for aggregation <code>customHeader</code>.<br/>
 * The (optional) custom header of this page.
 * Use this aggregation only when a custom header is constructed where the default header consisting of title text + nav button is not sufficient.
 * If this aggregation is set, the simple properties "title", "showNavButton", "NavButtonText" and "icon" are not used.
 * 
 * @return {sap.m.Bar}
 * @public
 * @name sap.m.Page#getCustomHeader
 * @function
 */

/**
 * Setter for the aggregated <code>customHeader</code>.
 * @param oCustomHeader {sap.m.Bar}
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#setCustomHeader
 * @function
 */


/**
 * Destroys the customHeader in the aggregation 
 * named <code>customHeader</code>.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#destroyCustomHeader
 * @function
 */
	
/**
 * Getter for aggregation <code>footer</code>.<br/>
 * The (optional) footer of this page. It is always located at the bottom of the page
 * 
 * @return {sap.m.Bar}
 * @public
 * @name sap.m.Page#getFooter
 * @function
 */

/**
 * Setter for the aggregated <code>footer</code>.
 * @param oFooter {sap.m.Bar}
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#setFooter
 * @function
 */


/**
 * Destroys the footer in the aggregation 
 * named <code>footer</code>.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#destroyFooter
 * @function
 */
	
/**
 * Getter for aggregation <code>subHeader</code>.<br/>
 * a subHeader will be rendered directly under the header
 * 
 * @return {sap.m.Bar}
 * @public
 * @name sap.m.Page#getSubHeader
 * @function
 */

/**
 * Setter for the aggregated <code>subHeader</code>.
 * @param oSubHeader {sap.m.Bar}
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#setSubHeader
 * @function
 */


/**
 * Destroys the subHeader in the aggregation 
 * named <code>subHeader</code>.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#destroySubHeader
 * @function
 */

/**
 * this event is fired when Nav Button is tapped 
 *
 * @name sap.m.Page#navButtonTap
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'navButtonTap' event of this <code>sap.m.Page</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Page</code>.<br/> itself. 
 *  
 * this event is fired when Nav Button is tapped 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Page</code>.<br/> itself.
 *
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#attachNavButtonTap
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'navButtonTap' event of this <code>sap.m.Page</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#detachNavButtonTap
 * @function
 */


/**
 * Fire event navButtonTap to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Page#fireNavButtonTap
 * @function
 */

/**
 * Scrolls to the given position. Only available if enableScrolling is set to "true".
 *
 * @name sap.m.Page.prototype.scrollTo
 * @function
 * @param {int} 
 *         iY
 *         The vertical pixel position to scroll to.
 * Scrolling down happens with positive values.
 * @param {int} 
 *         iTime
 *         The duration of animated scrolling.
 * To scroll immediately without animation, give 0 as value. 0 is also the default value, when this optional parameter is omitted.

 * @type sap.m.Page
 * @public
 */


// Start of sap/m/Page.js
sap.m.Page.prototype.init = function() {
	this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.m");
	if (this.getNavButtonText() == ""){
		this.setNavButtonText(this._rb.getText("PAGE_NAVBUTTON_TEXT"));
	}
};

// Return true if scrolling is allowed
sap.m.Page.prototype._hasScrolling = function() {
	return !(jQuery.browser.msie && jQuery.browser.version < 9) && this.getEnableScrolling();
};

sap.m.Page.prototype.onBeforeRendering = function() {
	if(this._oScroller && !this._hasScrolling()){
		this._oScroller.destroy();
		this._oScroller = null;
	}
	else if( this._hasScrolling() && !this._oScroller){
		jQuery.sap.require("sap.ui.core.delegate.ScrollEnablement");
		this._oScroller = new sap.ui.core.delegate.ScrollEnablement(this, this.getId() + "-scroll", {
			horizontal: false,
			vertical: true,
			zynga: false,
			preventDefault: false,
			nonTouchScrolling: true
		});
	}
};

/**
 * Called when the control is destroyed.
 *
 * @private
 */
sap.m.Page.prototype.exit = function() {
	if(this._oScroller){
		this._oScroller.destroy();
		this._oScroller = null;
	}
	if (this._headerTitle){
		this._headerTitle.destroy();
		this._headerTitle = null;
	}
	if (this._navBtn){
		this._navBtn.destroy();
		this._navBtn = null;
	}
	if (this._appIcon){
		this._appIcon.destroy();
		this._appIcon = null;
	}
	if (this._internalHeader){
		this._internalHeader.destroy();
		this._internalHeader = null;
	}
};

sap.m.Page.prototype.setBackgroundDesign = function(sBgDesign) {
	var bScrolling = this._hasScrolling();
	var sBgDesignOld = this.getBackgroundDesign();
	this.setProperty("backgroundDesign", sBgDesign, true);
	if (bScrolling){
		jQuery.sap.byId( this.getId() + "-scroll").removeClass('sapMPageBg'+ sBgDesignOld).addClass('sapMPageBg' + this.getBackgroundDesign());
	} else {
		jQuery.sap.byId( this.getId() + "-cont").removeClass('sapMPageBg'+ sBgDesignOld).addClass('sapMPageBg' + this.getBackgroundDesign());
	}
	return this;
}

sap.m.Page.prototype.setTitle = function(sTitle) {
	this._headerTitle = this._headerTitle || new sap.m.Label(this.getId() +"-title", {text: sTitle});
	this._headerTitle.setText(sTitle);
	if(jQuery.os.ios){
		this._updateHeaderContent(this._headerTitle, 'middle', 0);
	} else {
		this._titleIndex = this._titleIndex || 0;
		this._updateHeaderContent(this._headerTitle, 'left', this._titleIndex);
	}
	this.setProperty("title", sTitle, true);
	return this;
};

sap.m.Page.prototype.setShowNavButton = function (bShowNavBtn) {
	this.setProperty("showNavButton", bShowNavBtn, true);
	this._navBtn = this._navBtn || new sap.m.Button(this.getId() + "-navButton", {tap: jQuery.proxy(this.fireNavButtonTap, this)});
	if(jQuery.os.ios){
		this._navBtn.setType(sap.m.ButtonType.Back);
		this._navBtn.setText(this.getNavButtonText()); 
	} else {
		this._navBtn.setType(sap.m.ButtonType.Up);
	}
	if (bShowNavBtn){
		if (!jQuery.os.ios && this.getIcon()){
			this._navBtn.setIcon(this.getIcon());	
		}
		if (this._appIcon){
			this._updateHeaderContent(this._appIcon, 'left', -1);
		}
		this._updateHeaderContent(this._navBtn, 'left', 0);
	} else {
		// remove back button from header bar
		this._updateHeaderContent(this._navBtn, 'left', -1);
		if (!jQuery.os.ios && this.getIcon()){
			this._appIcon = this._appIcon || new sap.m.Image(this.getId()+"-icon", {src: this.getIcon()});
			this._updateHeaderContent(this._appIcon, 'left', 0);
		}
	}
	return this;
};

sap.m.Page.prototype.setNavButtonText = function (sText) {
	this._navBtn = this._navBtn || new sap.m.Button(this.getId() + "-navButton", {tap: jQuery.proxy(this.fireNavButtonTap, this)});
	if (sText == ""){
		sText = this._rb.getText("PAGE_NAVBUTTON_TEXT");
	}
	if(jQuery.os.ios){
		this._navBtn.setText(sText);
	}
	this.setProperty("navButtonText", sText, true);
	return this;
};

sap.m.Page.prototype.setIcon = function (sIconSrc) {
	if (!jQuery.os.ios){
		if (this.getShowNavButton()){
			this._navBtn = this._navBtn || new sap.m.Button(this.getId() + "-navButton", {tap: jQuery.proxy(this.fireNavButtonTap, this)});
			this._navBtn.setIcon(sIconSrc);	
			if (this._appIcon){
				this._updateHeaderContent(this._appIcon, 'left', -1);
			}
		} else {
			this._appIcon = this._appIcon || new sap.m.Image(this.getId()+"-icon", {src: sIconSrc});
			this._appIcon.setSrc(sIconSrc);
			if (this._navBtn){
				this._updateHeaderContent(this._navBtn, 'left', -1);
			}
			this._updateHeaderContent(this._appIcon, 'left', 0);
		}
		this._titleIndex = 1;
	}
	this.setProperty("icon", sIconSrc, true);
	return this;
};

/**
 * Update content of internal header
 * @param oContent: control to be added
 * @param sContentPosition: position where the control should be located, possible values left/middle/right
 * @param iContentIndex: the order of the control to be placed. If set to -1, the control will be removed from the header
 * @private 
 */
sap.m.Page.prototype._updateHeaderContent = function (oContent, sContentPosition, iContentIndex){
	if (this._internalHeader){
		switch (sContentPosition){
		case 'left':
			if (iContentIndex == -1){
				this._internalHeader.removeContentLeft(oContent);
			} else {
				if (this._internalHeader.indexOfContentLeft(oContent)!= iContentIndex){
					this._internalHeader.insertContentLeft(oContent, iContentIndex);
					this._internalHeader.invalidate(); // workaround for bOutput problem
				}
			}
			break;
		case 'middle':
			if (iContentIndex == -1){
				this._internalHeader.removeContentMiddle(oContent);
			} else {
				if (this._internalHeader.indexOfContentMiddle(oContent)!= iContentIndex){
					this._internalHeader.insertContentMiddle(oContent, iContentIndex);
					this._internalHeader.invalidate();
				}
			}
			break;
		case 'right':
			if (iContentIndex == -1){
				this._internalHeader.removeContentRight(oContent);
			} else {
				if (this._internalHeader.indexOfContentRight(oContent)!= iContentIndex){
					this._internalHeader.insertContentRight(oContent, iContentIndex);
					this._internalHeader.invalidate();
				}
			}
			break;
		default:
			break;
		}
	}
};

/**
 * Create internal header
 * @private
 */

sap.m.Page.prototype._getInternalHeader= function() {
	if (!this._internalHeader){
		this._internalHeader = new sap.m.Bar(this.getId() + "-intHeader");
		this._internalHeader.setParent(this, 'internalHeader', true);
	}
	if(jQuery.os.ios){
		if (this.getShowNavButton() && this._navBtn){
			this._updateHeaderContent(this._navBtn, 'left', 0);
		}
		if (this.getTitle() && this._headerTitle){
			this._updateHeaderContent(this._headerTitle, 'middle', 0);
		}
	} else {
		if (this.getShowNavButton() && this._navBtn){
			this._updateHeaderContent(this._navBtn, 'left', 0);
			this._titleIndex = 1;
		} else {
			if(this.getIcon() && this._appIcon){
				this._updateHeaderContent(this._appIcon, 'left', 0);
				this._titleIndex = 1;
			}
		}
		if (this.getTitle() && this._headerTitle){
			this._titleIndex = this._titleIndex || 0;
			this._updateHeaderContent(this._headerTitle, 'left', this._titleIndex);
		}
	}
	this._internalHeader._context = 'header';
	return this._internalHeader;
};

/**
 * Returns the custom or internal header
 * @private
 */
sap.m.Page.prototype._getAnyHeader = function() {
	var oCustomHeader = this.getCustomHeader();
	if (oCustomHeader) {
		oCustomHeader._context = 'header';
		// return aggregated header, if it exists
		return oCustomHeader.addStyleClass('sapMPageHeader').addStyleClass("sapMHeader-CTX");
	} else {
		return this._getInternalHeader().addStyleClass('sapMPageHeader').addStyleClass("sapMHeader-CTX");
	}
};


//*** API Methods ***

sap.m.Page.prototype.scrollTo = function(y, time) {
	if (this._oScroller && this.getDomRef()) { // only if rendered
		this._oScroller.scrollTo(0, y, time);
	} else {
		this._oScroller._scrollX = 0;
		this._oScroller._scrollY = y; // remember to apply later
	}
	return this;
};

}; // end of sap.m.Page
if ( !jQuery.sap.isDeclared('sap.m.Popover') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Popover.
jQuery.sap.declare("sap.m.Popover");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Popover.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPlacement placement} : sap.m.PlacementType (default: sap.m.PlacementType.Right)</li>
 * <li>{@link #getShowHeader showHeader} : boolean (default: true)</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getModal modal} : boolean (default: false)</li>
 * <li>{@link #getOffsetX offsetX} : int (default: 0)</li>
 * <li>{@link #getOffsetY offsetY} : int (default: 0)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li>
 * <li>{@link #getCustomHeader customHeader} : sap.ui.core.Control</li>
 * <li>{@link #getFooter footer} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getLeftButton leftButton} : string | sap.m.Button</li>
 * <li>{@link #getRightButton rightButton} : string | sap.m.Button</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Popover#event:afterOpen afterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Popover#event:afterClose afterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Popover#event:beforeOpen beforeOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Popover#event:beforeClose beforeClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Popover is to present information temporarily but in a way that does not take over the entire screen. The popover content is layered on top of your existing content and it remains visible until the user taps outside of the popover when modal is set to false or you explicitly dismiss it when modal is set to true. The switching between modal and non-modal can also be done when the popover is already opened.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.m.Popover
 */
sap.ui.core.Control.extend("sap.m.Popover", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"close", "openBy"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"placement" : {type : "sap.m.PlacementType", group : "Behavior", defaultValue : sap.m.PlacementType.Right},
		"showHeader" : {type : "boolean", group : "Appearance", defaultValue : true},
		"title" : {type : "string", group : "Appearance", defaultValue : null},
		"modal" : {type : "boolean", group : "Behavior", defaultValue : false},
		"offsetX" : {type : "int", group : "Appearance", defaultValue : 0},
		"offsetY" : {type : "int", group : "Appearance", defaultValue : 0}
	},
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}, 
    	"customHeader" : {type : "sap.ui.core.Control", multiple : false}, 
    	"footer" : {type : "sap.ui.core.Control", multiple : false}
	},
	associations : {
		"leftButton" : {type : "sap.m.Button", multiple : false}, 
		"rightButton" : {type : "sap.m.Button", multiple : false}
	},
	events : {
		"afterOpen" : {}, 
		"afterClose" : {}, 
		"beforeOpen" : {}, 
		"beforeClose" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Popover with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Popover.extend
 * @function
 */

sap.m.Popover.M_EVENTS = {'afterOpen':'afterOpen','afterClose':'afterClose','beforeOpen':'beforeOpen','beforeClose':'beforeClose'};


/**
 * Getter for property <code>placement</code>.
 * This is the information about on which side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom. The default value is sap.m.PlacementType.Right.
 *
 * Default value is <code>Right</code>
 *
 * @return {sap.m.PlacementType} the value of property <code>placement</code>
 * @public
 * @name sap.m.Popover#getPlacement
 * @function
 */


/**
 * Setter for property <code>placement</code>.
 *
 * Default value is <code>Right</code> 
 *
 * @param {sap.m.PlacementType} oPlacement  new value for property <code>placement</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#setPlacement
 * @function
 */

/**
 * Getter for property <code>showHeader</code>.
 * If a header should be shown at the top of the popover.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showHeader</code>
 * @public
 * @name sap.m.Popover#getShowHeader
 * @function
 */


/**
 * Setter for property <code>showHeader</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowHeader  new value for property <code>showHeader</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#setShowHeader
 * @function
 */

/**
 * Getter for property <code>title</code>.
 * Title text appears in the header. This property will be ignored when showHeader is set to false.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.Popover#getTitle
 * @function
 */


/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#setTitle
 * @function
 */

/**
 * Getter for property <code>modal</code>.
 * If the popover will not be closed when tapping outside the popover. It also blocks any interaction with the background. The default value is false.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>modal</code>
 * @public
 * @name sap.m.Popover#getModal
 * @function
 */


/**
 * Setter for property <code>modal</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bModal  new value for property <code>modal</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#setModal
 * @function
 */

/**
 * Getter for property <code>offsetX</code>.
 * The offset for the popover placement in the x axis. It's with unit pixel.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>offsetX</code>
 * @public
 * @name sap.m.Popover#getOffsetX
 * @function
 */


/**
 * Setter for property <code>offsetX</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iOffsetX  new value for property <code>offsetX</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#setOffsetX
 * @function
 */

/**
 * Getter for property <code>offsetY</code>.
 * The offset for the popover placement in the y axis. It's with unit pixel.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>offsetY</code>
 * @public
 * @name sap.m.Popover#getOffsetY
 * @function
 */


/**
 * Setter for property <code>offsetY</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iOffsetY  new value for property <code>offsetY</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#setOffsetY
 * @function
 */
	
/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content inside the popover.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.Popover#getContent
 * @function
 */

/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#insertContent
 * @function
 */


/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#addContent
 * @function
 */


/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.m.Popover#removeContent
 * @function
 */


/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.Popover#removeAllContent
 * @function
 */


/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.Popover#indexOfContent
 * @function
 */


/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#destroyContent
 * @function
 */
	
/**
 * Getter for aggregation <code>customHeader</code>.<br/>
 * Any control that needed to be displayed in the header area. When this is set, the showHeader property is ignored, and only this customHeader is shown on the top of popover.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.m.Popover#getCustomHeader
 * @function
 */

/**
 * Setter for the aggregated <code>customHeader</code>.
 * @param oCustomHeader {sap.ui.core.Control}
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#setCustomHeader
 * @function
 */


/**
 * Destroys the customHeader in the aggregation 
 * named <code>customHeader</code>.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#destroyCustomHeader
 * @function
 */
	
/**
 * Getter for aggregation <code>footer</code>.<br/>
 * This is optional footer which is shown on the bottom of the popover.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.m.Popover#getFooter
 * @function
 */

/**
 * Setter for the aggregated <code>footer</code>.
 * @param oFooter {sap.ui.core.Control}
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#setFooter
 * @function
 */


/**
 * Destroys the footer in the aggregation 
 * named <code>footer</code>.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#destroyFooter
 * @function
 */

/**
 * LeftButton is shown at the left edge of the bar in iOS, and at the right side of the bar for the other platforms. Please set this to null if you want to remove the left button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.
 *
 * @return {string} Id of the element which is the current target of the <code>leftButton</code> association, or null
 * @public
 * @name sap.m.Popover#getLeftButton
 * @function
 */


/**
 * LeftButton is shown at the left edge of the bar in iOS, and at the right side of the bar for the other platforms. Please set this to null if you want to remove the left button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.
 *
 * @param {string | sap.m.Button} vLeftButton 
 *    Id of an element which becomes the new target of this <code>leftButton</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#setLeftButton
 * @function
 */

/**
 * RightButton is always shown at the right edge of the bar. Please set this to null if you want to remove the right button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.
 *
 * @return {string} Id of the element which is the current target of the <code>rightButton</code> association, or null
 * @public
 * @name sap.m.Popover#getRightButton
 * @function
 */


/**
 * RightButton is always shown at the right edge of the bar. Please set this to null if you want to remove the right button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.
 *
 * @param {string | sap.m.Button} vRightButton 
 *    Id of an element which becomes the new target of this <code>rightButton</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#setRightButton
 * @function
 */

/**
 * This event will be fired after the popover is opened. 
 *
 * @name sap.m.Popover#afterOpen
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This refers to the control which opens the popover.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterOpen' event of this <code>sap.m.Popover</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Popover</code>.<br/> itself. 
 *  
 * This event will be fired after the popover is opened. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code>.<br/> itself.
 *
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#attachAfterOpen
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'afterOpen' event of this <code>sap.m.Popover</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#detachAfterOpen
 * @function
 */


/**
 * Fire event afterOpen to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code> This refers to the control which opens the popover.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Popover#fireAfterOpen
 * @function
 */

/**
 * This event will be fired after the popover is closed. 
 *
 * @name sap.m.Popover#afterClose
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This refers to the control which opens the popover.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterClose' event of this <code>sap.m.Popover</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Popover</code>.<br/> itself. 
 *  
 * This event will be fired after the popover is closed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code>.<br/> itself.
 *
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#attachAfterClose
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'afterClose' event of this <code>sap.m.Popover</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#detachAfterClose
 * @function
 */


/**
 * Fire event afterClose to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code> This refers to the control which opens the popover.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Popover#fireAfterClose
 * @function
 */

/**
 * This event will be fired before the popover is opened. 
 *
 * @name sap.m.Popover#beforeOpen
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This refers to the control which opens the popover.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'beforeOpen' event of this <code>sap.m.Popover</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Popover</code>.<br/> itself. 
 *  
 * This event will be fired before the popover is opened. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code>.<br/> itself.
 *
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#attachBeforeOpen
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'beforeOpen' event of this <code>sap.m.Popover</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#detachBeforeOpen
 * @function
 */


/**
 * Fire event beforeOpen to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code> This refers to the control which opens the popover.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Popover#fireBeforeOpen
 * @function
 */

/**
 * This event will be fired before the popover is closed. 
 *
 * @name sap.m.Popover#beforeClose
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This refers to the control which opens the popover.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'beforeClose' event of this <code>sap.m.Popover</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Popover</code>.<br/> itself. 
 *  
 * This event will be fired before the popover is closed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code>.<br/> itself.
 *
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#attachBeforeClose
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'beforeClose' event of this <code>sap.m.Popover</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#detachBeforeClose
 * @function
 */


/**
 * Fire event beforeClose to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code> This refers to the control which opens the popover.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Popover#fireBeforeClose
 * @function
 */

/**
 * Close the popover
 *
 * @name sap.m.Popover.prototype.close
 * @function

 * @type void
 * @public
 */


/**
 * Open the popover.
 *
 * @name sap.m.Popover.prototype.openBy
 * @function
 * @param {object} 
 *         oControl
 *         This is the control to which the popover will be placed. It can be not only a UI5 control, but also an existing dom reference. The side of the placement depends on the placement property set in the popover.

 * @type void
 * @public
 */


// Start of sap/m/Popover.js
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained



/* =========================================================== */
/*                   begin: lifecycle methods                  */
/* =========================================================== */
/**
 * Initializes the popover control
 * @private
 */
sap.m.Popover.prototype.init = function(){
	// The offset of the arrow must be more than _arrowOffsetThreshold from the border of the popover content
	this._arrowOffsetThreshold = 15; // 10 (rounded corner) + 5 (rotate)
	
	this._marginTopInit = false;
	// The following 4 values are the margins which are used to avoid making the popover very near to the border of the screen
	this._marginTop = jQuery.os.ios ? 44 : 48; //This is the default value, and dynamic calculation will be done in afterRendering
	this._marginLeft = 10;
	this._marginRight = 10;
	this._marginBottom = 10;
	
	this._$window = jQuery(window);

	this.oPopup = new sap.ui.core.Popup();
	this.oPopup.setShadow(true);
	this.oPopup.setAutoClose(true);
	this.oPopup.setAnimations(this._openAnimation, this._closeAnimation);
	
	// This is data used to position the popover depending on the placement property
	this._placements = [sap.m.PlacementType.Top, sap.m.PlacementType.Right, sap.m.PlacementType.Bottom, sap.m.PlacementType.Left];
	this._myPositions = ["center bottom", "begin center", "center top", "end center"];
	this._atPositions = ["center top", "end center", "center bottom", "begin center"];
	this._offsets = ["0 -18", "18 0", "0 18", "-18 0"];
	
	this._arrowOffset = 18;
	
	
	// Make this.oPopup call this._setArrowPosition each time after its position is changed
	this._fSetArrowPosition = jQuery.proxy(this._setArrowPosition, this);
	
	//the orientationchange event listener
	this._fOrientationChange = jQuery.proxy(this._onOrientationChange, this);
	
	var that = this;
	this.oPopup._applyPosition = function(oPosition){
		sap.ui.core.Popup.prototype._applyPosition.call(this, oPosition);
		that._fSetArrowPosition();
	}
};

sap.m.Popover.prototype.onBeforeRendering = function() {
	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
};	

sap.m.Popover.prototype.onAfterRendering = function(){
	var $openedBy, $page, $header;
	
	//calculate the height of the header in the current page
	//only for the first time calling after rendering
	if(!this._marginTopInit){
		this._marginTop = 2;
		if(this._oOpenBy){
			$openedBy = (this._oOpenBy instanceof sap.ui.core.Control) ? this._oOpenBy.$() : jQuery(this._oOpenBy);
			
			//first check if the openedBy isn't inside a header
			if(!($openedBy.closest("header.sapMBar").length > 0)){
				$page = $openedBy.closest(".sapMPage");
				if($page.length > 0){
					$header = $page.children("header.sapMBar");
					if($header.length > 0){
						this._marginTop += $header.outerHeight();
					}
				}
			}
			this._marginTopInit = true;
		}
	}
};

/**
 * Destroys the popover control
 * @private
 */
sap.m.Popover.prototype.exit = function(){
	this.oPopup.close();
	this.oPopup.destroy();
	this.oPopup = null;
	
	if(this._internalHeader){
		this._internalHeader.destroy();
		this._internalHeader = null;
	}
	
	if(this._headerTitle){
		this._headerTitle.destroy();
	}
	
	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
	
	this._$window.unbind("resize", this._fOrientationChange);
};
/* =========================================================== */
/*                   end: lifecycle methods                    */
/* =========================================================== */



/* =========================================================== */
/*                   begin: API method                         */
/* =========================================================== */
/**
 * Opens the popover and set the popover position according to the {placement} property
 * around the {oControl} parameter.
 *
 * @param {object} oControl The control to which the popover is aligned based on the {placement} property
 * @public
 *
 */
sap.m.Popover.prototype.openBy = function(oControl){
	// If already opened with the needed content then return
	var oPopup = this.oPopup,
		oParentDomRef, iPlacePos;
		
	if (oPopup.isOpen()){
		if(this._oOpenBy === oControl) {
			//if the popover is open, and is opening by the same control again, just return
			return;
		}else{
			//if the popover is open, and is opening by another control, then first close it and open later.
			this.close();
			this.$().css("visibility", "hidden");
		}
	}
	
	if(!oControl){
		return;
	}
	
	if(!this._oOpenBy || oControl !== this._oOpenBy){
		this._oOpenBy = oControl;
	}

	this.fireBeforeOpen({openBy: this._oOpenBy});
	
	oPopup.attachEvent("opened", this._handleOpened, this);
	
	// Open popup
	iPlacePos = jQuery.inArray(this.getPlacement(), this._placements);
	if(iPlacePos > -1){
		oParentDomRef = (this._oOpenBy instanceof sap.ui.core.Control) ? this._oOpenBy.getDomRef() : this._oOpenBy;
		oPopup.setContent(this);
		oPopup.setPosition(this._myPositions[iPlacePos], this._atPositions[iPlacePos], oParentDomRef, this._calcOffset(this._offsets[iPlacePos]), "fit");
		var that = this;
		var fCheckAndOpen = function(){
			if(oPopup.getOpenState() === sap.ui.core.OpenState.CLOSING){
				setTimeout(fCheckAndOpen, 150);
			}else{
				oPopup.open();
				//bind the resize event to window
				that._$window.bind("resize", that._fOrientationChange);
			}
		}
		fCheckAndOpen();
	}else{
		jQuery.sap.log.error(this.getPlacement() + "is not a valid value! It can only be top, right, bottom or left");
	}
	
};

/**
 * Closes the popover when it's already opened.
 * @public
 */
sap.m.Popover.prototype.close = function(){
	var eOpenState = this.oPopup.getOpenState();
	if(!(eOpenState === sap.ui.core.OpenState.CLOSED || eOpenState === sap.ui.core.OpenState.CLOSING)){
		this.fireBeforeClose({openBy: this._oOpenBy});
		this.oPopup.close();
	}
};
/* =========================================================== */
/*                     end: API method                         */
/* =========================================================== */


/* =========================================================== */
/*                      begin: event handlers                  */
/* =========================================================== */
sap.m.Popover.prototype._onOrientationChange = function(){
	var ePopupState = this.oPopup.getOpenState();
	if(!(ePopupState === sap.ui.core.OpenState.OPEN)){
		return;
	}
	this.oPopup._applyPosition(this.oPopup._oLastPosition);
};

/**
 * Register the listener to close the popover when user taps outside both of the popover and the control that opens the popover.
 * @private
 */
sap.m.Popover.prototype._handleOpened = function(){
	this.oPopup.detachEvent("opened", this._handleOpened, this);
	this.oPopup.attachEvent("closed", this._handleClosed, this);
	
	//recalculate the arrow position when the size of the popover changes.
	this._sResizeListenerId = sap.ui.core.ResizeHandler.register(this.getDomRef(),  this._fSetArrowPosition);
	
	this.fireAfterOpen({openBy: this._oOpenBy});
};

sap.m.Popover.prototype._handleClosed = function(){
	this.oPopup.detachEvent("closed", this._handleClosed, this);

	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
	this.fireAfterClose({openBy: this._oOpenBy});
};
/* =========================================================== */
/*                      end: event handlers                  */
/* =========================================================== */



/* =========================================================== */
/*                      begin: internal methods                  */
/* =========================================================== */
sap.m.Popover.prototype._hasNavContent = function(){
	var aContent = this.getAggregation("content");
	if(jQuery.isArray(aContent) && aContent.length === 1 && aContent[0] instanceof sap.m.NavContainer){
		return true;
	}else{
		return false;
	}
};


sap.m.Popover.prototype._calcOffset = function(sOffset){
	var iOffsetX = this.getOffsetX(),
		iOffsetY = this.getOffsetY();
	
	var aParts = sOffset.split(" ");
	return  (parseInt(aParts[0], 10) + iOffsetX) + " " + (parseInt(aParts[1], 10) + iOffsetY);
};

/**
 * Rearrange the arrow and the popover position.
 * @private
 */
sap.m.Popover.prototype._setArrowPosition = function(){
	var ePopupState = this.oPopup.getOpenState();
	if(!(ePopupState === sap.ui.core.OpenState.OPEN || ePopupState === sap.ui.core.OpenState.OPENING)){
		return;
	}

	var $parent = (this._oOpenBy instanceof sap.ui.core.Control) ? this._oOpenBy.$() : jQuery(this._oOpenBy),
		$this = this.$(),
		sPlacement = this.getPlacement(),
		$arrow = jQuery.sap.byId(this.getId() + "-arrow"),
		$offset = $this.offset(),
		iOffsetX = this.getOffsetX(),
		iOffsetY = this.getOffsetY(),
		iWidth = $this.outerWidth(),
		iHeight = $this.outerHeight(),
		iPosArrow;
		
	//calculates the current window borders
	var iWindowLeft = this._$window.scrollLeft(),
		iWindowTop = this._$window.scrollTop(),
		iWindowRight = this._$window.width(),
		iWindowBottom = this._$window.height();
	
	var iMarginLeft = this._marginLeft,
		iMarginRight = this._marginRight,
		iMarginTop = this._marginTop,
		iMarginBottom = this._marginBottom;
	
	//make the popover never cover the control or dom node that opens the popvoer
	switch(sPlacement){
		case sap.m.PlacementType.Left:
			iMarginRight = this._$window.width() - $parent.offset().left + this._arrowOffset - this.getOffsetX();
			break;
		case sap.m.PlacementType.Right:
			iMarginLeft = $parent.offset().left + $parent.outerWidth() + this._arrowOffset + this.getOffsetX();
			break;
		case sap.m.PlacementType.Top:
			iMarginBottom = this._$window.height() - $parent.offset().top + this._arrowOffset - this.getOffsetY();
			break;
		case sap.m.PlacementType.Bottom:
			iMarginTop = $parent.offset().top + $parent.outerHeight() + this._arrowOffset + this.getOffsetY();
			break;
	}
	
	//determines if the popover is crossed the margin along the borders in each direction	
	var bOverLeft = ($offset.left - iWindowLeft) <= iMarginLeft,
		bOverRight = (iWindowRight - $offset.left - iWidth) <= iMarginRight,
		bOverTop = ($offset.top - iWindowTop) <= iMarginTop,
		bOverBottom = (iWindowBottom - $offset.top - iHeight) <= iMarginBottom;
	
	function applyOffset(left, right, top, bottom){
//		var iWidth = $this.outerWidth(),
//			iHeight = $this.outerHeight();
		
		if(sPlacement === sap.m.PlacementType.Left || sPlacement === sap.m.PlacementType.Right){
			if(left){
				$this.css("left", iMarginLeft).css("right", "");
			}
			if(right){
				$this.css("right", iMarginRight).css("left", "");
			}
			if(top && bottom){
				$this.css("top", iMarginTop).css("bottom", "");
			}else{
				if(top){
					$this.css("top", iMarginTop).css("bottom", "");
				}
				if(bottom){
					$this.css("bottom", iMarginBottom).css("top", "");
				}
			}
		}
		if(sPlacement === sap.m.PlacementType.Top || sPlacement === sap.m.PlacementType.Bottom){
			if(top){
				$this.css("top", iMarginTop).css("bottom", "");
			}
			if(bottom){
				$this.css("bottom", iMarginBottom).css("top", "");
			}
			
			if(left && right){
				if(($parent.offset().left + $parent.outerWidth() / 2) < (jQuery(window).width() / 2)){
					$this.css("left", iMarginLeft).css("right", "");
				}else{
					$this.css("right", iMarginRight).css("left", "");
				}
			}else{
				if(left){
					$this.css("left", iMarginLeft).css("right", "");
				}
				if(right){
					$this.css("right", iMarginRight).css("left", "");
				}
			}
		}
	}
		
	switch(sPlacement){
		case sap.m.PlacementType.Left:
			applyOffset(false, bOverRight, bOverTop, bOverBottom);
			break;
		case sap.m.PlacementType.Right:
			applyOffset(bOverLeft, false, bOverTop, bOverBottom);
			break;
		case sap.m.PlacementType.Top:
			applyOffset(bOverLeft, bOverRight, false, bOverBottom);
			break;
		case sap.m.PlacementType.Bottom:
			applyOffset(bOverLeft, bOverRight, bOverTop, false);
			break;
	}
	
	//set arrow offset
	if(sPlacement === sap.m.PlacementType.Left || sPlacement === sap.m.PlacementType.Right){
		iPosArrow = $parent.offset().top - $this.offset().top - parseInt($this.css("border-top-width"))  + iOffsetY + 0.5 * ($parent.outerHeight(false) - $arrow.outerHeight(false));
		iPosArrow = Math.max(iPosArrow, this._arrowOffsetThreshold);
		iPosArrow = Math.min(iPosArrow, iHeight - this._arrowOffsetThreshold - $arrow.outerHeight());
		$arrow.css("top", iPosArrow);
	}else if(sPlacement === sap.m.PlacementType.Top || sPlacement === sap.m.PlacementType.Bottom){
		iPosArrow = $parent.offset().left - $this.offset().left - parseInt($this.css("border-left-width")) + iOffsetX + 0.5 * ($parent.outerWidth(false) - $arrow.outerWidth(false));
		iPosArrow = Math.max(iPosArrow, this._arrowOffsetThreshold);
		iPosArrow = Math.min(iPosArrow, iWidth - this._arrowOffsetThreshold - $arrow.outerWidth());
		$arrow.css("left", iPosArrow);
	}
	
	//set arrow style
	switch(sPlacement){
		case sap.m.PlacementType.Left:
//			$arrow.css("right", parseInt($arrow.css("right"), 10) - parseInt($this.css("border-right-width"), 10));
			$arrow.addClass("sapMPopoverArrRight");
			break;
			
		case sap.m.PlacementType.Right:
//			$arrow.css("left", parseInt($arrow.css("left"), 10) - parseInt($this.css("border-left-width"), 10));
			$arrow.addClass("sapMPopoverArrLeft");
			break;
			
		case sap.m.PlacementType.Top:
//			$arrow.css("bottom", parseInt($arrow.css("bottom"), 10) - parseInt($this.css("border-bottom-width"), 10));
			$arrow.addClass("sapMPopoverArrDown");
			break;
			
		case sap.m.PlacementType.Bottom:
//			$arrow.css("top", parseInt($arrow.css("top"), 10) - parseInt($this.css("border-top-width"), 10));
			$arrow.addClass("sapMPopoverArrUp");
			break;
	}
};


/**
 * Determine if the {oDomNode} is inside the popover or inside the control that opens the popover
 * @private
 */
sap.m.Popover.prototype._isPopupElement = function(oDOMNode) {
	var oParentDomRef = (this._oOpenBy instanceof sap.ui.core.Control) ? this._oOpenBy.getDomRef() : this._oOpenBy;
	return !!(jQuery(oDOMNode).closest(sap.ui.getCore().getStaticAreaRef()).length) || !!(jQuery(oDOMNode).closest(oParentDomRef).length);
};

/**
 * If customHeader is set, this will return the customHeaer. Otherwise it creates a header and put the
 * title and buttons if needed inside, and finally return this newly create header.
 * @private
 */
sap.m.Popover.prototype._getAnyHeader = function(){
	if(this.getCustomHeader()){
		return this.getCustomHeader().addStyleClass("sapMHeader-CTX", true);
	}else{
		if(this.getShowHeader()){
			this._createInternalHeader();
			return this._internalHeader.addStyleClass("sapMHeader-CTX", true);
		}
	}
};

sap.m.Popover.prototype._createInternalHeader = function(){
	if(!this._internalHeader){
		this._internalHeader = new sap.m.Bar(this.getId() + "-intHeader");
		this._internalHeader.setParent(this, "internalHeader", false);
		return true;
	}else{
		return false;
	}
};

sap.m.Popover.prototype._openAnimation = function($Ref, iRealDuration, fnOpened){
	setTimeout(function(){
		$Ref.addClass("sapMPopoverAnimation sapMPopoverTransparent");
		$Ref.css("display", "block");
		// has to be done in a timeout to ensure transition properties are set
		setTimeout(function(){
			$Ref.bind("webkitTransitionEnd", function(){
				$Ref.unbind("webkitTransitionEnd");
				$Ref.removeClass("sapMPopoverAnimation sapMPopoverOpaque");
				fnOpened();
			});
			$Ref.addClass("sapMPopoverOpaque").removeClass("sapMPopoverTransparent");
		}, 0);
	}, 0);
};

sap.m.Popover.prototype._closeAnimation = function($Ref, iRealDuration, fnClose){
	$Ref.addClass("sapMPopoverAnimation sapMPopoverOpaque");
	//// has to be done in a timeout to ensure transition properties are set
	setTimeout(function(){
		$Ref.bind("webkitTransitionEnd", function(){
			$Ref.unbind("webkitTransitionEnd");
			$Ref.removeClass("sapMPopoverAnimation sapMPopoverTransparent");
			fnClose();
		}).addClass("sapMPopoverTransparent").removeClass("sapMPopoverOpaque");
	}, 0);
};
/* =========================================================== */
/*                      end: internal methods                  */
/* =========================================================== */


/* ==================================================== */
/*                      begin: Setters                  */
/* ==================================================== */
/**
 * Set the placement of the popover.
 * @public
 *
 */
sap.m.Popover.prototype.setPlacement = function(sPlacement){
	this.setProperty("placement", sPlacement, true);
	return this;
};

/**
 * The setter of the title property. If you want to show a header in the popover, don't forget to
 * set the {showHeader} to true.
 * @public
 */
sap.m.Popover.prototype.setTitle = function(sTitle){
	if(sTitle){
		this.setProperty("title", sTitle, true);
		if(this._headerTitle){
			this._headerTitle.setText(sTitle);
		}else{
			this._headerTitle = new sap.m.Label(this.getId() + "-title", {
				text: this.getTitle()
			});
			
			this._createInternalHeader();
			
			if(jQuery.os.ios){
				this._internalHeader.addContentMiddle(this._headerTitle);
			}else{
				this._internalHeader.addContentLeft(this._headerTitle);
			}
		}
	}
	
	return this;
};


/**
 * The setter of the cancelButton. If you want to show a cancel button in the popover, don't forget to
 * set the {showHeader} to true.
 * @public
 */
sap.m.Popover.prototype.setLeftButton = function(oButton){
	if(typeof(oButton) === "string"){
		oButton = sap.ui.getCore().byId(oButton);
	}

	var oOldLeftButton = sap.ui.getCore().byId(this.getLeftButton());

	if(oOldLeftButton === oButton){
		return this;
	}
	
	this._createInternalHeader();
	
	if(oButton){
		if(jQuery.os.ios){
			if(oOldLeftButton){
				this._internalHeader.removeAggregation("contentLeft", oOldLeftButton, true);
			}
			this._internalHeader.addAggregation("contentLeft", oButton, true);
		}else{
			if(oOldLeftButton){
				this._internalHeader.removeAggregation("contentRight", oOldLeftButton, true);
			}
			this._internalHeader.insertAggregation("contentRight", oButton, 0, true);
		}
		this._internalHeader.invalidate();
	}else{
		if(jQuery.os.ios){
			this._internalHeader.removeContentLeft(oOldLeftButton);
		}else{
			this._internalHeader.removeContentRight(oOldLeftButton);
		}
	}
	
	this.setAssociation("leftButton", oButton, true);
	return this;
};

/**
 * The setter of the doneButton. If you want to show a done button in the popover, don't forget to
 * set the {showHeader} to true.
 * @public
 */
sap.m.Popover.prototype.setRightButton = function(oButton){
	if(typeof(oButton) === "string"){
		oButton = sap.ui.getCore().byId(oButton);
	}
	
	var oOldRightButton = sap.ui.getCore().byId(this.getRightButton());

	if(oOldRightButton === oButton){
		return this;
	}
	
	this._createInternalHeader();
	
	if(oButton){
		if(oOldRightButton){
			this._internalHeader.removeAggregation("contentRight", oOldRightButton, true);
		}
		this._internalHeader.insertAggregation("contentRight", oButton, 1, true);
		this._internalHeader.invalidate();
	}else{
		this._internalHeader.removeContentRight(oOldRightButton);
	}
	
	this.setAssociation("rightButton", oButton, true);
	return this;
};


sap.m.Popover.prototype.setShowHeader = function(bValue){
	if(bValue === this.getShowHeader() || this.getCustomHeader()){
		return this;
	}
	
	if(bValue){
		//when internal header is created, show header
		//if not, the header will be created when setting title, leftButton, or rightButton
		//the latest time of the header creation before it's rendered is in the renderer, calling get any header.
		if(this._internalHeader){
			this._internalHeader.$().show();
		}
	}else{
		if(this._internalHeader){
			this._internalHeader.$().hide();
		}
	}
	
	//skip the rerendering
	this.setProperty("showHeader", bValue, true);
	
	return this;
};
/**
 * This overwrites the default setter of the property modal to avoid rerendering the whole popover control.
 */
sap.m.Popover.prototype.setModal = function(bModal){
	if(bModal === this.getModal()){
		return this;
	}
	
	this.oPopup.setModal(bModal, "sapMPopoverBLayer");
	this.setProperty("modal", bModal, true);
	
	return this;
};



sap.m.Popover.prototype.setOffsetX = function(iValue){
	var ePopupState = this.oPopup.getOpenState(),
		oLastPosition, iPlacePos;
	
	this.setProperty("offsetX", iValue, true);
	
	if(!(ePopupState === sap.ui.core.OpenState.OPEN)){
		return this;
	}
	
	oLastPosition = this.oPopup._oLastPosition;
	iPlacePos = jQuery.inArray(this.getPlacement(), this._placements);	
	
	if(iPlacePos > -1){
		oLastPosition.offset = this._calcOffset(this._offsets[iPlacePos]);
		this.oPopup._applyPosition(oLastPosition);
	}
	
	return this;
};

sap.m.Popover.prototype.setOffsetY = function(iValue){
	var ePopupState = this.oPopup.getOpenState(),
		oLastPosition, iPlacePos;
	
	this.setProperty("offsetY", iValue, true);
	
	if(!(ePopupState === sap.ui.core.OpenState.OPEN)){
		return this;
	}
	
	oLastPosition = this.oPopup._oLastPosition;
	iPlacePos = jQuery.inArray(this.getPlacement(), this._placements);
	
	if(iPlacePos > -1){
		oLastPosition.offset = this._calcOffset(this._offsets[iPlacePos]);
		this.oPopup._applyPosition(oLastPosition);
	}
	
	return this;
};
/* ==================================================== */
/*                      end: Setters                  */
/* ==================================================== */
}; // end of sap.m.Popover
if ( !jQuery.sap.isDeclared('sap.m.RadioButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.RadioButton.
jQuery.sap.declare("sap.m.RadioButton");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new RadioButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getSelected selected} : boolean (default: false)</li>
 * <li>{@link #getGroupName groupName} : string (default: 'sapMRbDefaultGroup')</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '')</li>
 * <li>{@link #getActiveHandling activeHandling} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.RadioButton#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Generally, you would create at least two radio button controls which should have the same GroupName;
 * by this, you provide a limited choice for the user. Triggers an Event when User makes a change.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.m.RadioButton
 */
sap.ui.core.Control.extend("sap.m.RadioButton", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"setActiveState"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"selected" : {type : "boolean", group : "Data", defaultValue : false},
		"groupName" : {type : "string", group : "Behavior", defaultValue : 'sapMRbDefaultGroup'},
		"text" : {type : "string", group : "Appearance", defaultValue : null},
		"textDirection" : {type : "sap.ui.core.TextDirection", group : "Appearance", defaultValue : sap.ui.core.TextDirection.Inherit},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : ''},
		"activeHandling" : {type : "boolean", group : "Appearance", defaultValue : true}
	},
	events : {
		"select" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.RadioButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.RadioButton.extend
 * @function
 */

sap.m.RadioButton.M_EVENTS = {'select':'select'};


/**
 * Getter for property <code>visible</code>.
 * Invisible radio buttons are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.RadioButton#getVisible
 * @function
 */


/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RadioButton#setVisible
 * @function
 */

/**
 * Getter for property <code>enabled</code>.
 * Disabled controls are displayed in another color.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.m.RadioButton#getEnabled
 * @function
 */


/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RadioButton#setEnabled
 * @function
 */

/**
 * Getter for property <code>selected</code>.
 * Specifies the select state of the radio button
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>selected</code>
 * @public
 * @name sap.m.RadioButton#getSelected
 * @function
 */


/**
 * Setter for property <code>selected</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bSelected  new value for property <code>selected</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RadioButton#setSelected
 * @function
 */

/**
 * Getter for property <code>groupName</code>.
 * Name of the radio button group the current radio button belongs to. You can define a new name for the group.
 * If no new name is specified, this radio button belongs to the sapMRbDefaultGroup per default. Default behavior of a radio button in a group is that when one of the radio buttons in a group is selected, all others are unselected.
 *
 * Default value is <code>'sapMRbDefaultGroup'</code>
 *
 * @return {string} the value of property <code>groupName</code>
 * @public
 * @name sap.m.RadioButton#getGroupName
 * @function
 */


/**
 * Setter for property <code>groupName</code>.
 *
 * Default value is <code>'sapMRbDefaultGroup'</code> 
 *
 * @param {string} sGroupName  new value for property <code>groupName</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RadioButton#setGroupName
 * @function
 */

/**
 * Getter for property <code>text</code>.
 * Defines the text displayed next to the RadioButton
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.RadioButton#getText
 * @function
 */


/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RadioButton#setText
 * @function
 */

/**
 * Getter for property <code>textDirection</code>.
 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
 *
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code>
 *
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * @name sap.m.RadioButton#getTextDirection
 * @function
 */


/**
 * Setter for property <code>textDirection</code>.
 *
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code> 
 *
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RadioButton#setTextDirection
 * @function
 */

/**
 * Getter for property <code>width</code>.
 * Width of Label
 *
 * Default value is <code>''</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.RadioButton#getWidth
 * @function
 */


/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RadioButton#setWidth
 * @function
 */

/**
 * Getter for property <code>activeHandling</code>.
 * this is a flag to switch on activeHandling, when it is switch
 * ed off, there will not be visual changes on active state. Default value is 'true'
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>activeHandling</code>
 * @public
 * @name sap.m.RadioButton#getActiveHandling
 * @function
 */


/**
 * Setter for property <code>activeHandling</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bActiveHandling  new value for property <code>activeHandling</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RadioButton#setActiveHandling
 * @function
 */

/**
 * Event is triggered when the user makes a change on the radio button. 
 *
 * @name sap.m.RadioButton#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.RadioButton</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.RadioButton</code>.<br/> itself. 
 *  
 * Event is triggered when the user makes a change on the radio button. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.RadioButton</code>.<br/> itself.
 *
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RadioButton#attachSelect
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.RadioButton</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RadioButton#detachSelect
 * @function
 */


/**
 * Fire event select to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.RadioButton#fireSelect
 * @function
 */

/**
 * Method to set a RadioButton's state to active or inactive.
 *
 * @name sap.m.RadioButton.prototype.setActiveState
 * @function
 * @param {boolean} 
 *         bActive
 *         boolean to set the active state to true or false

 * @type void
 * @public
 */


// Start of sap/m/RadioButton.js
/**
 * This file defines behavior for the control,
 */

/**
 * Function is called when radiobutton is tapped.
 * 
 * @private
 */
sap.m.RadioButton.prototype.ontap = function(oEvent) {
	if (this.getEnabled()) {
		if (!this.getSelected()) {
			this.setSelected(true);
			this.fireSelect({/* no parameters */});
		}
	}else{
		// readOnly or disabled -> don't allow browser to switch RadioButton on
		//oEvent.preventDefault();
	}
};
/**
 * Function is called when radiobutton is being touched. Only necessary for Android/Black-Berry.
 * 
 * @private
 */
sap.m.RadioButton.prototype.ontouchstart = function(oEvent) {
	//for control who need to know if they should handle events from the CheckBox control
	oEvent.originalEvent._sapui_handledByControl = true
	if(this.getEnabled() && this.getActiveHandling()) {
		this.$().toggleClass('sapMRbBTouched', true);
	}
}
	
sap.m.RadioButton.prototype.ontouchend = function(oEvent) {
	this.$().toggleClass('sapMRbBTouched', false);
}


// #############################################################################		
// Overwritten methods that are also generated in RadioButton.API.js		
// #############################################################################		

/*	
 * Overwrite the definition from RadioButton.API.js		
 */
sap.m.RadioButton.prototype.setSelected = function(bSelected) {
	
	var bSelectedOld = this.getSelected();

	this.setProperty("selected", bSelected, true); // No re-rendering

	if (bSelected) { // If this radio button is selected, explicitly deselect the other radio buttons of the same group
		if (this.getGroupName() && (this.getGroupName() !== "")) { // Do it only if groupName is set
			// TODO: Add control references to some static list when they are constructed, in order to avoid searching every time
			var others = jQuery("input[name='"+ this.getGroupName() +"']:radio");
			for (var i = 0; i < others.length; i++) {
				var other = others[i];
				// Recommendation is that the HTML radio button has an ID ending with "-RB"
				if (other.id && (other.id.length > 3) && (other.id.substr(other.id.length-3) === "-RB")) {
					// The SAPUI5 control is known by an ID without the "-RB" suffix
					var oControl = sap.ui.getCore().getElementById(other.id.substr(0, other.id.length-3));
					if (oControl instanceof sap.m.RadioButton && (oControl !== this)) {
						oControl.setSelected(false);
					}
				}
			}
		}
	}
	if ((bSelectedOld !== bSelected) && this.getDomRef()){
		
			jQuery.sap.byId(this.getId()).toggleClass('sapMRbSel', bSelected).attr('aria-checked', bSelected);
	if(bSelected){
		jQuery.sap.domById(this.getId()+'-RB').checked = true;
		jQuery.sap.domById(this.getId()+'-RB').setAttribute('checked', 'checked');
	}else{
		jQuery.sap.domById(this.getId()+'-RB').checked = false;
		jQuery.sap.domById(this.getId()+'-RB').removeAttribute('checked');
	}
	}

	return this;
};

sap.m.RadioButton.prototype.setActiveState = function(bActive) {
	this.$().toggleClass('sapMRbBTouched', bActive);
}

sap.m.RadioButton.prototype.setText = function(sText){
	this.setProperty("text", sText, true);	
	if(this._oLabel){
		this._oLabel.setText(this.getText());
	}else{
		this._createLabel("text", this.getText());
	}
	return this;
};

sap.m.RadioButton.prototype.setWidth = function(sWidth){
	this.setProperty("width", sWidth, true);	
	if(this._oLabel){
		this._oLabel.setWidth(this.getWidth());
	}else{
		this._createLabel("width", this.getWidth());
	}
	return this;
};

sap.m.RadioButton.prototype.setTextDirection = function(sDirection){
	this.setProperty("textDirection", sDirection, true);	
	if(this._oLabel){			
		this._oLabel.setTextDirection(this.getTextDirection());
	}else{
		this._createLabel("textDirection", this.getTextDirection());
	}
	return this;
};

sap.m.RadioButton.prototype.exit = function() {
	if(this._oLabel){
		this._oLabel.destroy();
	}
};

sap.m.RadioButton.prototype._createLabel = function(prop, value){
	this._oLabel = new sap.m.Label(this.getId() + "-label", {
					}).addStyleClass("sapMRbBLabel").setParent(this, null, true);
	this._oLabel.setProperty(prop, value, false);
};
}; // end of sap.m.RadioButton
if ( !jQuery.sap.isDeclared('sap.m.ScrollContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ScrollContainer.
jQuery.sap.declare("sap.m.ScrollContainer");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new ScrollContainer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 'auto')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: 'auto')</li>
 * <li>{@link #getHorizontal horizontal} : boolean (default: true)</li>
 * <li>{@link #getVertical vertical} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The ScrollContainer is a control that can display arbitrary content within a limited screen area and provides touch scrolling to make all content accessible.
 * 
 * Note that it is not recommended to have nested scrolling areas that scroll into the same direction (e.g. a ScrollContainer that scrolls vertically inside a Page control with scrolling enabled). This is currently not considered a valid use-case of a good UI and the behavior will feel wrong.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.m.ScrollContainer
 */
sap.ui.core.Control.extend("sap.m.ScrollContainer", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"scrollTo"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : 'auto'},
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : 'auto'},
		"horizontal" : {type : "boolean", group : "Behavior", defaultValue : true},
		"vertical" : {type : "boolean", group : "Behavior", defaultValue : false}
	},
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}
	}
}});


/**
 * Creates a new subclass of class sap.m.ScrollContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ScrollContainer.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible scroll containers are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.ScrollContainer#getVisible
 * @function
 */


/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ScrollContainer#setVisible
 * @function
 */

/**
 * Getter for property <code>width</code>.
 * The width of the ScrollContainer.
 * If not set, it consumes the complete available width, behaving like normal HTML block elements. If only vertical scrolling is enabled, make sure the content always fits or wraps.
 *
 * Default value is <code>auto</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.ScrollContainer#getWidth
 * @function
 */


/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>auto</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ScrollContainer#setWidth
 * @function
 */

/**
 * Getter for property <code>height</code>.
 * The height of the ScrollContainer.
 * By default the height equals the content height. If only horizontal scrolling is used, do not set the height or make sure the height is always larger than the height of the content.
 * 
 * Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.
 *
 * Default value is <code>auto</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.m.ScrollContainer#getHeight
 * @function
 */


/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>auto</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ScrollContainer#setHeight
 * @function
 */

/**
 * Getter for property <code>horizontal</code>.
 * Whether horizontal scrolling should be possible.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>horizontal</code>
 * @public
 * @name sap.m.ScrollContainer#getHorizontal
 * @function
 */


/**
 * Setter for property <code>horizontal</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bHorizontal  new value for property <code>horizontal</code>
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ScrollContainer#setHorizontal
 * @function
 */

/**
 * Getter for property <code>vertical</code>.
 * Whether vertical scrolling should be possible.
 * 
 * Note that this is off by default because typically a Page is used as fullscreen element which can handle vertical scrolling. If this is not the case and vertical scrolling is required, this flag needs to be set to "true".
 * Important: it is not supported to have nested controls that both enable scrolling into the same dimension.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>vertical</code>
 * @public
 * @name sap.m.ScrollContainer#getVertical
 * @function
 */


/**
 * Setter for property <code>vertical</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bVertical  new value for property <code>vertical</code>
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ScrollContainer#setVertical
 * @function
 */
	
/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content of the ScrollContainer.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.ScrollContainer#getContent
 * @function
 */

/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ScrollContainer#insertContent
 * @function
 */


/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ScrollContainer#addContent
 * @function
 */


/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.m.ScrollContainer#removeContent
 * @function
 */


/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.ScrollContainer#removeAllContent
 * @function
 */


/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.ScrollContainer#indexOfContent
 * @function
 */


/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ScrollContainer#destroyContent
 * @function
 */

/**
 * Scrolls to the given position.
 * When called while the control is not rendered (yet), the scrolling position is still applied, but there is no animation.
 *
 * @name sap.m.ScrollContainer.prototype.scrollTo
 * @function
 * @param {int} 
 *         iX
 *         The horizontal pixel position to scroll to.
 * Scrolling to the right happens with positive values.
 * If only vertical scrolling is enabled, give 0 as value.
 * @param {int} 
 *         iY
 *         The vertical pixel position to scroll to.
 * Scrolling down happens with positive values.
 * If only horizontal scrolling is enabled, give 0 as value.
 * @param {int} 
 *         iTime
 *         The duration of animated scrolling.
 * To scroll immediately without animation, give 0 as value. 0 is also the default value, when this optional parameter is omitted.

 * @type sap.m.ScrollContainer
 * @public
 */


// Start of sap/m/ScrollContainer.js

/*
 * Better nested scrolling capabilities can be added to iScroll like this (in the _move method).
 * eDir is the direction into which scrolling is handled (if locked) and bOutside is true when we are outside the scolling boundary already; both
 * need to be initialized a couple of lines before this code.
 * 
 * 		e._handled = e._handled || {};
 *		if (e._handled[eDir]) { // current direction already handled
 *			return;
 *		}
 *		
 *		// add information about what this handler handles
 *		e._handled.x = e._handled.x || ((eDir == "x") && !bOutside);
 *		e._handled.y = e._handled.y || ((eDir == "y") && !bOutside);
 *		
 */

/*
 * TODO:
 * - events when scrolling is ongoing
 */


sap.m.ScrollContainer.prototype.init = function() {
	jQuery.sap.require("sap.ui.core.delegate.ScrollEnablement");
	this._oScroller = new sap.ui.core.delegate.ScrollEnablement(this, this.getId() + "-scroll", {
		horizontal: true,
		vertical: false,
		zynga: false,
		preventDefault: false,
		nonTouchScrolling: true
	});
	// TODO: do the resize listening only when ScrollContainer becomes visible and unbind when getting visible
};

sap.m.ScrollContainer.prototype.onBeforeRendering = function() {
	// properties are not known during init
	this._oScroller.setHorizontal(this.getHorizontal());
	this._oScroller.setVertical(this.getVertical());
};


/**
 * Called when the control is destroyed.
 *
 * @private
 */
sap.m.ScrollContainer.prototype.exit = function() {
	if(this._oScroller){
		this._oScroller.destroy();
		this._oScroller = null;
	}
};



//*** API Methods ***

sap.m.ScrollContainer.prototype.scrollTo = function(x, y, time) {
	if (this._oScroller){
		if(this.getDomRef()) { // only if rendered
			this._oScroller.scrollTo(x, y, time);
		} else {
			this._oScroller._scrollX = x; // remember for later rendering
			this._oScroller._scrollY = y;
		}
	}
	return this;
};


sap.m.ScrollContainer.prototype.setHorizontal = function(horizontal) {
	this._oScroller.setHorizontal(horizontal);
	this.setProperty("horizontal", horizontal, true); // no rerendering
};

sap.m.ScrollContainer.prototype.setVertical = function(vertical) {
	this._oScroller.setVertical(vertical);
	this.setProperty("vertical", vertical, true); // no rerendering
};

}; // end of sap.m.ScrollContainer
if ( !jQuery.sap.isDeclared('sap.m.SearchField') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.SearchField.
jQuery.sap.declare("sap.m.SearchField");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new SearchField.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getValue value} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getMaxLength maxLength} : int (default: 0)</li>
 * <li>{@link #getPlaceholder placeholder} : string</li>
 * <li>{@link #getShowMagnifier showMagnifier} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.SearchField#event:search search} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Enables users to input a search string.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.m.SearchField
 */
sap.ui.core.Control.extend("sap.m.SearchField", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"value" : {type : "string", group : "Data", defaultValue : null, bindable : "bindable"},
		"width" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"maxLength" : {type : "int", group : "Behavior", defaultValue : 0},
		"placeholder" : {type : "string", group : "Misc", defaultValue : null},
		"showMagnifier" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	events : {
		"search" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.SearchField with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.SearchField.extend
 * @function
 */

sap.m.SearchField.M_EVENTS = {'search':'search'};


/**
 * Getter for property <code>value</code>.
 * Input Value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>value</code>
 * @public
 * @name sap.m.SearchField#getValue
 * @function
 */


/**
 * Setter for property <code>value</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sValue  new value for property <code>value</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#setValue
 * @function
 */

/**
 * Binder for property <code>value</code>.
 *
 * @param {string} sPath path to a property in the model 
 * @param {function} [fnFormatter=null] the formatter function
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way) 
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#bindValue
 * @function
 */


/**
 * Unbinder for property <code>value</code>.
 *
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#unbindValue
 * @function

 */

/**
 * Getter for property <code>width</code>.
 * Defines the width of the input.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.SearchField#getWidth
 * @function
 */


/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#setWidth
 * @function
 */

/**
 * Getter for property <code>enabled</code>.
 * Boolean property to enable the control (default is true).
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.m.SearchField#getEnabled
 * @function
 */


/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#setEnabled
 * @function
 */

/**
 * Getter for property <code>visible</code>.
 * Invisible inputs are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.SearchField#getVisible
 * @function
 */


/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#setVisible
 * @function
 */

/**
 * Getter for property <code>maxLength</code>.
 * Maximum number of characters. Value '0' means the feature is switched off.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>maxLength</code>
 * @public
 * @name sap.m.SearchField#getMaxLength
 * @function
 */


/**
 * Setter for property <code>maxLength</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iMaxLength  new value for property <code>maxLength</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#setMaxLength
 * @function
 */

/**
 * Getter for property <code>placeholder</code>.
 * Text shown when no value available.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>placeholder</code>
 * @public
 * @name sap.m.SearchField#getPlaceholder
 * @function
 */


/**
 * Setter for property <code>placeholder</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sPlaceholder  new value for property <code>placeholder</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#setPlaceholder
 * @function
 */

/**
 * Getter for property <code>showMagnifier</code>.
 * Set to false to hide the magnifier icon.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showMagnifier</code>
 * @public
 * @name sap.m.SearchField#getShowMagnifier
 * @function
 */


/**
 * Setter for property <code>showMagnifier</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowMagnifier  new value for property <code>showMagnifier</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#setShowMagnifier
 * @function
 */

/**
 * Event which is fired when the user triggers a search. 
 *
 * @name sap.m.SearchField#search
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.query The search query string.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'search' event of this <code>sap.m.SearchField</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SearchField</code>.<br/> itself. 
 *  
 * Event which is fired when the user triggers a search. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.SearchField</code>.<br/> itself.
 *
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#attachSearch
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'search' event of this <code>sap.m.SearchField</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#detachSearch
 * @function
 */


/**
 * Fire event search to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'query' of type <code>string</code> The search query string.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.SearchField#fireSearch
 * @function
 */

// Start of sap/m/SearchField.js
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained

sap.ui.core.EnabledPropagator.apply(sap.m.SearchField.prototype, [true]);

sap.m.SearchField.prototype.init = function(){
	// TODO: suggestions and search provider
};

sap.m.SearchField.prototype.onBeforeRendering = function() {
	jQuery(this.getDomRef())
		.unbind("search", this.onSearch)
		.unbind("change", this.onChange);
};

sap.m.SearchField.prototype.onAfterRendering = function() {
	jQuery(this.getDomRef())
		.bind("search", jQuery.proxy(this.onSearch, this))
		.bind("change", jQuery.proxy(this.onChange, this));
};


sap.m.SearchField.prototype.ontouchstart = function(oEvent) {
	//for control who need to know if they should handle events from the searchfield control
	oEvent.originalEvent._sapui_handledByControl = true;
	
	if (!this.getEnabled()) return;
	var oSrc = oEvent.srcElement;

	if(oSrc.id == this.getId()+"-reset"){
		var oInput = jQuery.sap.domById(this.getId() + "-I"),
			value = "";
		oInput.value = value;
		this.setProperty("value", value, true);
		this.fireSearch({query: value});
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};

/**
 * Process the search event
 *
 * When a user deletes the search string using the "x" button,
 * change event is not fired.
 * Call setValue() to ensure that the value property is updated.
 *
 * @private
 */
sap.m.SearchField.prototype.onSearch = function(event){
	var value = jQuery.sap.domById(this.getId() + "-I").value;
	jQuery.sap.log.debug("SearchField: on search. Value:" + value);
	this.setProperty("value", value, true);
	this.fireSearch({query: value});
};

/**
 * Process the change event
 * @private
 */
sap.m.SearchField.prototype.onChange = function(event){
	var value = jQuery.sap.domById(this.getId() + "-I").value;
	jQuery.sap.log.debug("SearchField: on change. Value:" + value);
	this.setProperty("value", value, true);
};

}; // end of sap.m.SearchField
if ( !jQuery.sap.isDeclared('sap.m.SegmentedButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.SegmentedButton.
jQuery.sap.declare("sap.m.SegmentedButton");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new SegmentedButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getButtons buttons} : sap.m.Button[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSelectedButton selectedButton} : string | sap.m.Button</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.SegmentedButton#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A SegmentedButton Control is a horizontal control made of multiple buttons which can display a title or an image. It automatically resizes the buttons to fit proportionally within the control. When no width is set, the control uses the available width.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.m.SegmentedButton
 */
sap.ui.core.Control.extend("sap.m.SegmentedButton", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"createButton"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"width" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true}
	},
	defaultAggregation : "buttons",
	aggregations : {
    	"buttons" : {type : "sap.m.Button", multiple : true, singularName : "button"}
	},
	associations : {
		"selectedButton" : {type : "sap.m.Button", multiple : false}
	},
	events : {
		"select" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.SegmentedButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.SegmentedButton.extend
 * @function
 */

sap.m.SegmentedButton.M_EVENTS = {'select':'select'};


/**
 * Getter for property <code>width</code>.
 * Set the width of the SegmentedButton control. If not set, it consumes the complete available width.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.SegmentedButton#getWidth
 * @function
 */


/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SegmentedButton#setWidth
 * @function
 */

/**
 * Getter for property <code>visible</code>.
 * boolean property to make the control visible or invisible
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.SegmentedButton#getVisible
 * @function
 */


/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SegmentedButton#setVisible
 * @function
 */
	
/**
 * Getter for aggregation <code>buttons</code>.<br/>
 * Buttons of the SegmentedButton control
 * 
 * @return {sap.m.Button[]}
 * @public
 * @name sap.m.SegmentedButton#getButtons
 * @function
 */

/**
 * Inserts a button into the aggregation named <code>buttons</code>.
 *
 * @param {sap.m.Button}
 *          oButton the button to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the button should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the button is inserted at 
 *             the last position        
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SegmentedButton#insertButton
 * @function
 */


/**
 * Adds some button <code>oButton</code> 
 * to the aggregation named <code>buttons</code>.
 *
 * @param {sap.m.Button}
 *            oButton the button to add; if empty, nothing is inserted
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SegmentedButton#addButton
 * @function
 */


/**
 * Removes an button from the aggregation named <code>buttons</code>.
 *
 * @param {int | string | sap.m.Button} vButton the button to remove or its index or id
 * @return {sap.m.Button} the removed button or null
 * @public
 * @name sap.m.SegmentedButton#removeButton
 * @function
 */


/**
 * Removes all the controls in the aggregation named <code>buttons</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.Button[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.SegmentedButton#removeAllButtons
 * @function
 */


/**
 * Checks for the provided <code>sap.m.Button</code> in the aggregation named <code>buttons</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.m.Button}
 *            oButton the button whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.SegmentedButton#indexOfButton
 * @function
 */


/**
 * Destroys all the buttons in the aggregation 
 * named <code>buttons</code>.
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SegmentedButton#destroyButtons
 * @function
 */

/**
 * Pointer to the selected button of a SegmentedButton control.
 *
 * @return {string} Id of the element which is the current target of the <code>selectedButton</code> association, or null
 * @public
 * @name sap.m.SegmentedButton#getSelectedButton
 * @function
 */


/**
 * Pointer to the selected button of a SegmentedButton control.
 *
 * @param {string | sap.m.Button} vSelectedButton 
 *    Id of an element which becomes the new target of this <code>selectedButton</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SegmentedButton#setSelectedButton
 * @function
 */

/**
 * Event is fired when the user selects a button, which returns the id and button object 
 *
 * @name sap.m.SegmentedButton#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.m.Button} oControlEvent.getParameters.button Reference to the button that has just been selected
 * @param {string} oControlEvent.getParameters.id Id of the button which has just been selected
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.SegmentedButton</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SegmentedButton</code>.<br/> itself. 
 *  
 * Event is fired when the user selects a button, which returns the id and button object 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.SegmentedButton</code>.<br/> itself.
 *
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SegmentedButton#attachSelect
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.SegmentedButton</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SegmentedButton#detachSelect
 * @function
 */


/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'button' of type <code>sap.m.Button</code> Reference to the button that has just been selected</li>
 * <li>'id' of type <code>string</code> Id of the button which has just been selected</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.SegmentedButton#fireSelect
 * @function
 */

/**
 * Convenient method to add a button with a text as title OR an URI for an icon. Using both is not supported.
 *
 * @name sap.m.SegmentedButton.prototype.createButton
 * @function
 * @param {string} 
 *         sText
 *         Set the text of a SegmentedButton button.
 * @param {sap.ui.core.URI} 
 *         sIcon
 *         Icon to be displayed as graphical element within the button.
 * 
 * Density related image will be loaded if image with density awareness name in format [imageName]@[densityValue].[extension] is provided.
 * @param {boolean} 
 *         bEnabled
 *         Boolean property to enable the control (default is true). Buttons that are disabled have other colors than enabled ones, depending on custom settings

 * @type void
 * @public
 */


// Start of sap/m/SegmentedButton.js
sap.m.SegmentedButton.prototype.init = function() {
	if(jQuery.os.android || jQuery.os.blackberry) {
		sap.m.SegmentedButton.prototype.ontouchstart = this._ontouchstart;
		sap.m.SegmentedButton.prototype.ontouchend = this._ontouchend;
	}
	//bind the resize event to window
	jQuery(window).resize(jQuery.proxy(this._fHandleResize, this));
};
/**
 *	This function is called after Rendering which triggers the width calculation of
 *	the SegmentedButton buttons. The timeout is needed, because otherwise the returned width of
 *	the parent element is wrong. (Number is bigger than the actual screen width). This is only needed
 *	after page reload. On desktop browsers no timeout is needed, therefore the speed of mobile browsers
 *	is too slow to finish calculation and rendering the page before the get width function is called.
 */
sap.m.SegmentedButton.prototype.onAfterRendering = function() {
	var that = this;
	//Flag if control is inside the bar. If inside bar the buttons always use the width they need.
	this._bInsideBar = (this.$().closest('.sapMBar').length > 0) ? true : false;
	setTimeout(function(){
		that._fCalcBtnWidth();
	},0);
	
};
/**
 * Called after the theme has been switched, required for new width calc
 * @private
 */
sap.m.SegmentedButton.prototype.onThemeChanged = function(oEvent){
	this._fCalcBtnWidth();
};
/**
 * This function is called to manually set the width of each segmentedbutton button 
 * on the basis of the widest item after they have been rendered or an orientation change/theme change
 * took place. 
 * @private
 */
sap.m.SegmentedButton.prototype._fCalcBtnWidth = function() {
	var iItm = this.getButtons().length,
		aBtnWidth = [],
		iMaxWidth = 5,
		$this = this.$(),
		iInnerWidth = $this.children('#' + this.getButtons()[0].getId()).outerWidth(true)-$this.children('#' + this.getButtons()[0].getId()).width(),
		//Outerwidth of control, if developer manually sets margin or padding to the control itself
		iCntOutWidth = $this.outerWidth(true) - $this.width();
		//if parent width is bigger than actual screen width set parent width to screen width => android 2.3
		var iParentWidth = (window.screen.width < $this.parent().width()) ? window.screen.width : $this.parent().width();
	if(this.getWidth() && this.getWidth().indexOf("%") === -1) {
		iMaxWidth = parseInt(this.getWidth()) / iItm;
		for(var i = 0; i < iItm; i++) {
			aBtnWidth.push($this.children('#' + this.getButtons()[i].getId()).outerWidth()-$this.children('#' + this.getButtons()[i].getId()).width());	
		}
		var iMaxOuterWidth = Math.max.apply(null, aBtnWidth);
		iMaxWidth = iMaxWidth - iMaxOuterWidth;
	} else {
		for(var i = 0; i < iItm; i++) {
			aBtnWidth.push($this.children('#' + this.getButtons()[i].getId()).outerWidth(true));	
		}
		iMaxWidth = Math.max.apply(null, aBtnWidth);
		if (((iParentWidth -iCntOutWidth) > iMaxWidth * iItm || this._bInsideBar) && this.getWidth().indexOf("%") === -1) {
			iMaxWidth = iMaxWidth - iInnerWidth;
		} else {
			iMaxWidth = (iParentWidth-iCntOutWidth) / iItm;
			iMaxWidth = iMaxWidth - iInnerWidth;
		}
	}
	for(var i = 0; i < iItm; i++) {
		if (!isNaN(iMaxWidth))
			$this.children('#' + this.getButtons()[i].getId()).width(iMaxWidth).css('visibility', 'visible');			
	}
};
/**
 * The orientationchange event listener
*/
sap.m.SegmentedButton.prototype._fHandleResize = function() {
	//check if control is hidden (not shown) when resize event is fired. Happens when keyboard is shown on another page, for example.
	if(this.$().is(":visible")) {
		if(!this.getWidth() || this.getWidth().indexOf("%") !== -1) {
			for(var i = 0; i < this.getButtons().length; i++) {			
				this.$().children('#' + this.getButtons()[i].getId()).width('').css('visibility', 'hidden');	
			}
			this._fCalcBtnWidth();
		}
	}
};
/**
 * Convenient method to add a button with a text as title or an uri for an icon. 
 * Only one is allowed.
 *
 * @param {sap.ui.core/string}
 *         sText defines the title text of the newly created button
 * @param {sap.ui.core/URI}
 *        sURI defines the icon uri of the button
 * @param {boolean}
 *        [bEnabled] sets the enabled status of the button
 * @param {function}
 *        [fTapListener] sets callback function for tap events
 * @return
 * @type {sap.m.Button}
 * @public
 */
sap.m.SegmentedButton.prototype.createButton = function(sText, sURI, bEnabled) {
	var oButton = new sap.m.Button();
	
	if(sURI === null && sText !== null){
		oButton.setText(sText);
	}else if(sURI !== null && sText === null){
		oButton.setIcon(sURI);
	}else
		throw new Error("in control: " + this.toString() + ": method createButton() just accepts text or icon");
	if(bEnabled || bEnabled === undefined) {
		oButton.setEnabled(true);
	}else {
		oButton.setEnabled(false);
	}
	this.addButton(oButton);

	return oButton;
};

sap.m.SegmentedButton.prototype.addButton = function(oButton) {
var that = this;
	oButton.attachTap(function(oEvent){
		that.$().children().removeClass('sapMSegBBtnSel');
		oEvent.getSource().$().addClass('sapMSegBBtnSel');
		if (that.getSelectedButton() !== oEvent.getSource().getId()) {
			that.setAssociation('selectedButton', oEvent.getSource(), true);
			that.fireSelect({button:oEvent.getSource(), id: oEvent.getSource().getId()});
		}
	});
	this.addAggregation('buttons',oButton);
	return this;
};

sap.m.SegmentedButton.prototype.insertButton = function(oButton) {
	var that = this;
	oButton.attachTap(function(oEvent){
		that.$().children().removeClass('sapMSegBBtnSel');
		oEvent.getSource().$().addClass('sapMSegBBtnSel');
		if (that.getSelectedButton() !== oEvent.getSource().getId()) {
			that.setAssociation('selectedButton', oEvent.getSource(), true);
			that.fireSelect({button:oEvent.getSource(), id: oEvent.getSource().getId()});
		}
	});
	this.insertAggregation('buttons',oButton);
	return this;
};

sap.m.SegmentedButton.prototype._ontouchstart = function(oEvent) {
	if (oEvent.srcControl.getEnabled())
		jQuery(oEvent.target).toggleClass('sapMSegBBtnTouched', true);
};

sap.m.SegmentedButton.prototype._ontouchend = function(oEvent) {
	if (oEvent.srcControl.getEnabled())
		jQuery(oEvent.target).toggleClass('sapMSegBBtnTouched', false);
};
}; // end of sap.m.SegmentedButton
if ( !jQuery.sap.isDeclared('sap.m.Select') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Select.
jQuery.sap.declare("sap.m.Select");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Select.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getName name} : string (default: "")</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: "auto")</li>
 * <li>{@link #getMaxWidth maxWidth} : sap.ui.core.CSSSize (default: "100%")</li>
 * <li>{@link #getTitle title} : string (default: "")</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.ui.core.Item[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSelectedItem selectedItem} : string | sap.ui.core.Item</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Select#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The select control is built on a native html select element; it provides a list of predefined items that allows end users to choose options.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.m.Select
 */
sap.ui.core.Control.extend("sap.m.Select", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"name" : {type : "string", group : "Misc", defaultValue : ""},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"width" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : "auto"},
		"maxWidth" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : "100%"},
		"title" : {type : "string", group : "Misc", defaultValue : ""}
	},
	aggregations : {
    	"items" : {type : "sap.ui.core.Item", multiple : true, singularName : "item"}
	},
	associations : {
		"selectedItem" : {type : "sap.ui.core.Item", multiple : false}
	},
	events : {
		"change" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Select with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Select.extend
 * @function
 */

sap.m.Select.M_EVENTS = {'change':'change'};


/**
 * Getter for property <code>name</code>.
 * The name to be used in the HTML code (e.g. for HTML forms that send data to the server via submit).
 *
 * Default value is <code>""</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * @name sap.m.Select#getName
 * @function
 */


/**
 * Setter for property <code>name</code>.
 *
 * Default value is <code>""</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#setName
 * @function
 */

/**
 * Getter for property <code>visible</code>.
 * Determines whether the control is visible or not.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.Select#getVisible
 * @function
 */


/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#setVisible
 * @function
 */

/**
 * Getter for property <code>enabled</code>.
 * Determines whether the user can change the selected value.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.m.Select#getEnabled
 * @function
 */


/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#setEnabled
 * @function
 */

/**
 * Getter for property <code>width</code>.
 * Defines the width of the select control. This value can be provided in %, em, px… and all possible CSS measures.
 *
 * Default value is <code>"auto"</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.Select#getWidth
 * @function
 */


/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>"auto"</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#setWidth
 * @function
 */

/**
 * Getter for property <code>maxWidth</code>.
 * Defines the maximum width of the select control. This value can be provided in %, em, px… and all possible CSS measures.
 *
 * Default value is <code>"100%"</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>maxWidth</code>
 * @public
 * @name sap.m.Select#getMaxWidth
 * @function
 */


/**
 * Setter for property <code>maxWidth</code>.
 *
 * Default value is <code>"100%"</code> 
 *
 * @param {sap.ui.core.CSSSize} sMaxWidth  new value for property <code>maxWidth</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#setMaxWidth
 * @function
 */

/**
 * Getter for property <code>title</code>.
 * Represents advisory information for the element, such as would be appropriate for a tooltip.
 *
 * Default value is <code>""</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.Select#getTitle
 * @function
 */


/**
 * Setter for property <code>title</code>.
 *
 * Default value is <code>""</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#setTitle
 * @function
 */
	
/**
 * Getter for aggregation <code>items</code>.<br/>
 * Items of the Item control.
 * 
 * @return {sap.ui.core.Item[]}
 * @public
 * @name sap.m.Select#getItems
 * @function
 */

/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Item}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#insertItem
 * @function
 */


/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Item}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#addItem
 * @function
 */


/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.ui.core.Item} vItem the item to remove or its index or id
 * @return {sap.ui.core.Item} the removed item or null
 * @public
 * @name sap.m.Select#removeItem
 * @function
 */


/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Item[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.Select#removeAllItems
 * @function
 */


/**
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Item}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.Select#indexOfItem
 * @function
 */


/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#destroyItems
 * @function
 */

/**
 * The selected item.
 *
 * @return {string} Id of the element which is the current target of the <code>selectedItem</code> association, or null
 * @public
 * @name sap.m.Select#getSelectedItem
 * @function
 */


/**
 * The selected item.
 *
 * @param {string | sap.ui.core.Item} vSelectedItem 
 *    Id of an element which becomes the new target of this <code>selectedItem</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#setSelectedItem
 * @function
 */

/**
 * This event will be triggered when the user changes the selected item. 
 *
 * @name sap.m.Select#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Item} oControlEvent.getParameters.selectedItem The selected item.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.Select</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Select</code>.<br/> itself. 
 *  
 * This event will be triggered when the user changes the selected item. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Select</code>.<br/> itself.
 *
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#attachChange
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.Select</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#detachChange
 * @function
 */


/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selectedItem' of type <code>sap.ui.core.Item</code> The selected item.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Select#fireChange
 * @function
 */

// Start of sap/m/Select.js
sap.m.Select.prototype._sNoData = sap.ui.getCore().getLibraryResourceBundle("sap.m").getText("SELECT_NO_DATA");

/* =========================================================== */
/*                   begin: lifecycle methods                  */
/* =========================================================== */

/**
 * Required adaptations before rendering.
 *
 * @private
 * @param {jQuery.EventObject} oEvent The event object
 */
sap.m.Select.prototype.onBeforeRendering = function(oEvent) {
	var aItems = this.getItems(),
		sSelectedItemId = this.getAssociation("selectedItem");

	if (aItems.length) {

		//	if there is no selected item
		if (sSelectedItemId === null) {

			//  select the first item and suppress re-rendering
			this.setAssociation("selectedItem", aItems[0].getId(), true);
		} else {
			if (!this._isSelectedItemAggregate(aItems, sSelectedItemId)) {
				jQuery.sap.log.warning("sap.m.Select.prototype.onBeforeRendering(): the selected item is not a valid item aggregation on " + this);
			}
		}
	} else {
		jQuery.sap.log.warning("sap.m.Select.prototype.onBeforeRendering(): the select does not contain any item on " + this);
	}

	if (this._$SltNative instanceof jQuery && this._$SltNative.length) {
		this._$SltNative.unbind("change.select", this._handleChange);
	}
};

/**
 * Required adaptations after rendering.
 *
 * @private
 * @param {jQuery.EventObject} oEvent The event object
 */
sap.m.Select.prototype.onAfterRendering = function() {

	// jQuery DOM reference to the select control root
	this._$SltCont = this.$();

	// jQuery DOM reference to the native select using inside the control
	this._$SltNative = this._$SltCont.children("select");

	// jQuery DOM collection with all select options
	this._$SltOptions = this._$SltNative.children("option");

	// jQuery DOM reference with the selected option
	this._$SeletedItem = this._$SltOptions.filter(":selected");

	// jQuery DOM reference to the span using to show the text from the current selected item
	this._$SltText = this._$SltCont.children("span.sapMSltText");

	if (this._$SltNative.length) {

		// register a listener to the select change event
		this._$SltNative.bind("change.select", jQuery.proxy(this._handleChange, this));

		this._$SltNative.css("font", this._$SltText.css("font"));

		if (this.getWidth() === "auto") {
			this._$SltCont.width(this._$SltNative.width() + parseFloat(this._$SltText.css("padding-right"), 10) + parseFloat(this._$SltText.css("padding-left"), 10));
		}
	}

	this._$SltNative.width("100%");
};

/* =========================================================== */
/*                   end: lifecycle methods                    */
/* =========================================================== */


/* =========================================================== */
/*                      begin: event handlers                  */
/* =========================================================== */

/**
 * Handle the touch start event happening on the select.
 *
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.m.Select.prototype.ontouchstart = function(oEvent) {

	//	for control who need to know if they should handle events from the select control
	oEvent.originalEvent._sapui_handledByControl = true;
	
	// add active state
	this._$SltCont.addClass("sapMSltPressed");
};

/**
 * Handle the touch end event on the select.
 *
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.m.Select.prototype.ontouchend = function() {

	// remove active state
	this._$SltCont.removeClass("sapMSltPressed");
};

/**
 * Handle the change event on the select.
 *
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.m.Select.prototype._handleChange = function() {
	var $NewSeletedItem = this._$SltOptions.filter(":selected"),
		sItemId	= $NewSeletedItem.attr("id"),
		oItem = sap.ui.getCore().byId(sItemId);

	// remove the old attribute selected
	this._$SeletedItem.removeAttr("selected");	//  for screen readers

	// add the new attribute selected
	$NewSeletedItem.attr("selected", "selected");	//  for screen readers

	// update the selected item
	this._$SeletedItem = $NewSeletedItem;

	// update the association
	this.setAssociation("selectedItem", sItemId, true);

	this._$SltText.text(oItem.getText());

	this.fireChange({ selectedItem : oItem });
};

/* ============================================================ */
/*                      end: event handlers                  	*/
/* ============================================================ */


/* =========================================================== */
/*                      begin: internal methods                */
/* =========================================================== */

sap.m.Select.prototype._isSelectedItemAggregate = function(aItems, sSelectedItemId) {
	var i;

	for (i = 0; i < aItems.length; i++) {
		if (sSelectedItemId === aItems[i].getId()) {
			return true;
		}
	}

	return false;
};

/* =========================================================== */
/*                      end: internal methods                  */
/* =========================================================== */


/* =========================================================== */
/*                   begin: API method                         */
/* =========================================================== */

sap.m.Select.prototype.getSelectedItem = function() {
	var sSelectedItemId = this.getAssociation("selectedItem");

	return (sSelectedItemId === null) ? null : sap.ui.getCore().byId(sSelectedItemId);
};

sap.m.Select.prototype.removeAllItems = function() {
	this.setAssociation("selectedItem", null, false);

	return this.removeAllAggregation("items", false);
};

sap.m.Select.prototype.removeItem = function(vItem) {
	if (typeof vItem === "string") {
		vItem = sap.ui.getCore().byId(vItem);
	}

	if (!(vItem instanceof sap.ui.core.Item)) {
		jQuery.sap.log.error('sap.m.Select.prototype.removeItem(): vItem must be a sap.ui.core.Item object or a valid item id on ' + this);
		return;
	}

	// if the item is selected
	if (vItem.getId() === this.getAssociation("selectedItem")) {
		this.setAssociation("selectedItem", null, false);
	}

	// remove the item from the select
	return this.removeAggregation("items", vItem, false);
};

/* =========================================================== */
/*                     end: API method                         */
/* =========================================================== */
}; // end of sap.m.Select
if ( !jQuery.sap.isDeclared('sap.m.Slider') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Slider.
jQuery.sap.declare("sap.m.Slider");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Slider.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: "100%")</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getName name} : string (default: "")</li>
 * <li>{@link #getMin min} : int (default: 0)</li>
 * <li>{@link #getMax max} : int (default: 100)</li>
 * <li>{@link #getStep step} : int (default: 1)</li>
 * <li>{@link #getProgress progress} : boolean (default: true)</li>
 * <li>{@link #getValue value} : int (default: 0)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Slider#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Slider#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A slider is a user interface control that enables the user to adjust values in a specified numerical range.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.m.Slider
 */
sap.ui.core.Control.extend("sap.m.Slider", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"stepUp", "stepDown"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"width" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : "100%"},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"name" : {type : "string", group : "Misc", defaultValue : ""},
		"min" : {type : "int", group : "Data", defaultValue : 0},
		"max" : {type : "int", group : "Data", defaultValue : 100},
		"step" : {type : "int", group : "Data", defaultValue : 1},
		"progress" : {type : "boolean", group : "Misc", defaultValue : true},
		"value" : {type : "int", group : "Data", defaultValue : 0}
	},
	events : {
		"change" : {}, 
		"liveChange" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Slider with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Slider.extend
 * @function
 */

sap.m.Slider.M_EVENTS = {'change':'change','liveChange':'liveChange'};


/**
 * Getter for property <code>width</code>.
 * Defines the width of the slider element, this value can be provided in %, em, px… and all possible CSS measures.
 *
 * Default value is <code>"100%"</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.Slider#getWidth
 * @function
 */


/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>"100%"</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#setWidth
 * @function
 */

/**
 * Getter for property <code>enabled</code>.
 * Boolean property to enable the slider.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.m.Slider#getEnabled
 * @function
 */


/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#setEnabled
 * @function
 */

/**
 * Getter for property <code>visible</code>.
 * Defines the visibility for the slider.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.Slider#getVisible
 * @function
 */


/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#setVisible
 * @function
 */

/**
 * Getter for property <code>name</code>.
 * The name property to be used in the HTML code for the slider (e.g. for HTML forms that send data to the server via submit).
 *
 * Default value is <code>""</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * @name sap.m.Slider#getName
 * @function
 */


/**
 * Setter for property <code>name</code>.
 *
 * Default value is <code>""</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#setName
 * @function
 */

/**
 * Getter for property <code>min</code>.
 * The minimum value of the slider.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>min</code>
 * @public
 * @name sap.m.Slider#getMin
 * @function
 */


/**
 * Setter for property <code>min</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iMin  new value for property <code>min</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#setMin
 * @function
 */

/**
 * Getter for property <code>max</code>.
 * The maximum value of the slider.
 *
 * Default value is <code>100</code>
 *
 * @return {int} the value of property <code>max</code>
 * @public
 * @name sap.m.Slider#getMax
 * @function
 */


/**
 * Setter for property <code>max</code>.
 *
 * Default value is <code>100</code> 
 *
 * @param {int} iMax  new value for property <code>max</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#setMax
 * @function
 */

/**
 * Getter for property <code>step</code>.
 * Define the size of every one step the slider takes between min and max.
 * 
 * The step needs to be a positive integer; if a negative number is provider, the default value will take place.
 * 
 * If the width of the slider converted to pixels is less than the range (max – min), the value will be rounded to multiples of the step size.
 *
 * Default value is <code>1</code>
 *
 * @return {int} the value of property <code>step</code>
 * @public
 * @name sap.m.Slider#getStep
 * @function
 */


/**
 * Setter for property <code>step</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {int} iStep  new value for property <code>step</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#setStep
 * @function
 */

/**
 * Getter for property <code>progress</code>.
 * Show a progress bar for the slider.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>progress</code>
 * @public
 * @name sap.m.Slider#getProgress
 * @function
 */


/**
 * Setter for property <code>progress</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bProgress  new value for property <code>progress</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#setProgress
 * @function
 */

/**
 * Getter for property <code>value</code>.
 * Define the value of the slider. If this value is lower than the minimum permited, the minimum will be override the value, or if the value is higher than maximun, the maximum will be override the value.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>value</code>
 * @public
 * @name sap.m.Slider#getValue
 * @function
 */


/**
 * Setter for property <code>value</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iValue  new value for property <code>value</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#setValue
 * @function
 */

/**
 * This event is triggered after the end user finishes interacting, if there is any change. 
 *
 * @name sap.m.Slider#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.value The current value of the slider after a change.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.Slider</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Slider</code>.<br/> itself. 
 *  
 * This event is triggered after the end user finishes interacting, if there is any change. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Slider</code>.<br/> itself.
 *
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#attachChange
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.Slider</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#detachChange
 * @function
 */


/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>int</code> The current value of the slider after a change.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Slider#fireChange
 * @function
 */

/**
 * This event is triggered during the dragging period, each time the slider value changes. 
 *
 * @name sap.m.Slider#liveChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.value The current value of the slider after a live change.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.Slider</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Slider</code>.<br/> itself. 
 *  
 * This event is triggered during the dragging period, each time the slider value changes. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Slider</code>.<br/> itself.
 *
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#attachLiveChange
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.Slider</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#detachLiveChange
 * @function
 */


/**
 * Fire event liveChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>int</code> The current value of the slider after a live change.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Slider#fireLiveChange
 * @function
 */

/**
 * Changes the slider’s value by the value given in the step attribute, multiplied by n.
 * 
 * The default value for n is 1.
 *
 * @name sap.m.Slider.prototype.stepUp
 * @function
 * @param {int} 
 *         iN
 *         The number of steps the slider goes up.

 * @type void
 * @public
 */


/**
 * Changes the slider’s value by the value given in the step attribute, multiplied by n.
 * 
 * The default value for n is 1.
 *
 * @name sap.m.Slider.prototype.stepDown
 * @function
 * @param {int} 
 *         iN
 *         The number of steps the slider goes down.

 * @type void
 * @public
 */


// Start of sap/m/Slider.js
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained


sap.m.Slider.prototype._aVEvents = ["_ontouchstart", "_ontouchmove", "_ontouchend"];
sap.m.Slider.prototype._aEvents = ["ontouchstart", "ontouchmove", "ontouchend"];

/* =========================================================== */
/*                   begin: lifecycle methods                  */
/* =========================================================== */

/**
 * Required adaptations before rendering.
 *
 * @private
 */
sap.m.Slider.prototype.onBeforeRendering = function() {
	var iMax = this.getMax(),
		iMin = this.getMin(),
		iStep = this.getStep(),
		bMinbiggerThanMax = false,
		bError = false;

	/**
	 *	functional dependencies:
	 *
	 *	min				-> max
	 *	max				-> min
	 *
	 *	max, min		-> step
	 *	max, min, step	-> value
	 *
	 */

	// if the minimum is lower than or equal to the maximum, log a warning
	if (iMin >= iMax) {
		bMinbiggerThanMax = true;
		bError = true;
		jQuery.sap.log.warning("Property wrong min: " + iMin + " >= max: " + iMax + " on " + this);
	}

	// if the step is negative set to 1 and log a warning
	if (iStep < 1) {
		jQuery.sap.log.warning("The step could not be negative on " + this);
		iStep = 1;

		// update the step to 1 and suppress re-rendering
		this.setProperty("step", iStep, true);
	}

	// the step can't be bigger than slider range, log a warning
	if ((iStep > (iMax - iMin)) && !bMinbiggerThanMax) {
		bError = true;
		jQuery.sap.log.warning("Property wrong step: " + iStep + " > max: " + iMax + " - " + "min: " + iMin + " on " + this);
	}

	// update the value only if there aren't errors
	if (!bError) {
		this.setValue(this.getValue());

		// this is the current % value for the slider progress bar
		this.iProgressValue = this._getPercentageFromValue(this.getValue());
	}
};

/**
 * Required adaptations after rendering.
 *
 * @private
 * @param {jQuery.EventObject} oEvent The event object
 */
sap.m.Slider.prototype.onAfterRendering = function() {

	// bind only if the slider is enabled
	(this.getEnabled()) ? this._bindEvents() : this._unbindEvents();

	// slider control container jQuery selector
	this._$SldContainer = this.$();

	// slider jQuery selector
	this._$Sld = this._$SldContainer.children(".sapMSld");

	// thumb jQuery selector
	this._$Thumb = this._$Sld.children(".sapMSldThumb");

	// native input type range jQuery selector
	this._$Input = this._$SldContainer.children("input[type=range]");
};

/* =========================================================== */
/*                   end: lifecycle methods                    */
/* =========================================================== */


/* =========================================================== */
/*                      begin: event handlers                  */
/* =========================================================== */

/**
 * Handle the touch start event happening on the slider.
 *
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.m.Slider.prototype._ontouchstart = function(oEvent) {
	var $Target = jQuery(oEvent.target),
		iMin = this.getMin(),
		iValue;

	//	for control who need to know if they should handle events from the slider control
	oEvent.originalEvent._sapui_handledByControl = true;

	if (oEvent.targetTouches.length > 1) {		// suppress multiTouch events
		return;
	}

	// update the slider measures, those values may change in orientation change
	this._calcMeasures();

	// initialization
	this._iDiffX = this._fSldPaddingRight;
	this._iStartValue = this.getValue();

	// add active state
	this._$Sld.addClass("sapMSldPressed");

	if ($Target.is(this._$Thumb) || $Target.parent().is(this._$Thumb)) {	// if the target is the slider thumb

		/*  This property is needed only by the ontouchmove handle.
			When a touch start event occurs, its value is calculated
			by subtracting the thumb position left from the slider
			control target pageX.
			This is the necessary amount to be subtracted when the
			ontouchmove	event handle is fired.
			The result is a better dragging experience that behaves
			much more in the way that the user expects. */
		this._iDiffX = oEvent.targetTouches[0].pageX - this._$Thumb.offset().left;
	} else {
		iValue = Math.round((((oEvent.targetTouches[0].pageX - this._fSldPaddingRight - this._iSldOffsetLeft) / this._iSldWidth) * (this.getMax() - iMin)) +  iMin);

		// update the slider value
		this.setValue(iValue);
	}
};

/**
 * Handle the touch move event on the slider.
 *
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.m.Slider.prototype._ontouchmove = function(oEvent) {
	var iMin = this.getMin(),
		iValue = this.getValue(),
		iNewValue = Math.round((((oEvent.targetTouches[0].pageX - this._iDiffX - this._iSldOffsetLeft) / this._iSldWidth) * (this.getMax() - iMin)) +  iMin);

	// validate, update the the slider value and the UI
	this.setValue(iNewValue);

	// new value validated
	iNewValue = this.getValue();

	if (iValue !== iNewValue) {
		this.fireLiveChange({value:iNewValue});
	}
};

/**
 * Handle the touch end event on the slider.
 *
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.m.Slider.prototype._ontouchend = function() {

	// remove active state
	this._$Sld.removeClass("sapMSldPressed");

	if (this._iStartValue !== this.getValue()) {	// if the value if not the same
		this.fireChange({value:this.getValue()});
	}

	// remove unused properties
	delete this._iDiffX;
	delete this._iStartValue;
};

/* ============================================================ */
/*                      end: event handlers                  	*/
/* ============================================================ */


/* =========================================================== */
/*                      begin: internal methods                */
/* =========================================================== */

// configuration data
sap.m.Slider.prototype._sBackgroundSizeRemainder = (function() {
	switch (jQuery.os.os) {
	case "ios":
		return "% 0.4375em, 100%";
		break;
	case "android":
	case "blackberry":
		return "% 0.1875em";
		break;

	// no default
	};
})();

/**
 * Calculate slider measures.
 *
 * @private
 */
sap.m.Slider.prototype._calcMeasures = function() {

	// slider width
	this._iSldWidth = this._$SldContainer.width();

	// slider padding right
	this._fSldPaddingRight = parseFloat(this._$SldContainer.css("padding-right"), 10);

	// slider offset left
	this._iSldOffsetLeft = this._$SldContainer.offset().left;

	// thumb width
	this._iThumbWidth = this._$Thumb.width();
};

/**
 * Bind events.
 *
 * @private
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 */
sap.m.Slider.prototype._bindEvents = function() {
	var i;

	for (i = 0; i < this._aVEvents.length; i++) {
		this[this._aEvents[i]] = this[this._aVEvents[i]];
	}

	return this;
};

/**
 * Unbind events.
 *
 * @private
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 */
sap.m.Slider.prototype._unbindEvents = function() {
	var i;

	for (i = 0; i < this._aVEvents.length; i++) {
		this[this._aEvents[i]] = null;
	}

	return this;
};

/**
 * Calculate percentage.
 *
 * @param {int} iValue the value from the slider
 * @private
 * @returns {int} percent
 */
sap.m.Slider.prototype._getPercentageFromValue = function(iValue) {
	var iMin = this.getMin();
	// never round this number
	return ((iValue - iMin) / (this.getMax() - iMin)) * 100;
};

sap.m.Slider.prototype._validateStep = function(n) {
	return (typeof n === "undefined") ? 1 : this.validateProperty("value", n);
};

/* =========================================================== */
/*                      end: internal methods                  */
/* =========================================================== */


/* =========================================================== */
/*                   begin: API method                         */
/* =========================================================== */

sap.m.Slider.prototype.stepUp = function(n) {
	return this.setValue(this.getValue() + (this._validateStep(n) * this.getStep()));
};

sap.m.Slider.prototype.stepDown = function(n) {
	return this.setValue(this.getValue() - (this._validateStep(n) * this.getStep()));
};

/**
 * Change the slider value.
 *
 * @param {float} value
 * @public
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 */
sap.m.Slider.prototype.setValue = function(iValue) {
	var iMax = this.getMax(),
		iMin = this.getMin(),
		iStep = this.getStep(),
		iCurrentVal = this.getValue(),
		iRemainder = Math.abs(iValue % iStep),
		iPerValue;

	iValue = this.validateProperty("value", iValue);

	// round the value to the nearest step
	iValue = (iRemainder >= iStep / 2) ? iValue + iStep - iRemainder : iValue - iRemainder;

	// validate that the value is between maximum and minimum
	iValue = (iValue > iMax) ? iMax : (iValue < iMin) ? iMin : iValue;

	// update the value and suppress re-rendering
	this.setProperty("value", iValue, true);

	// if the value if the same, suppress DOM modifications and event fire
	if (iCurrentVal === this.getValue()) {
		return this;
	}

	if (this._$Sld instanceof jQuery) {

		// update the input type range value
		this._$Input.attr("value", iValue);

		iPerValue = this._getPercentageFromValue(iValue);

		if (this.getProgress()) {

			// update the progress bar value
			this._$Sld.css("-webkit-background-size", iPerValue + this._sBackgroundSizeRemainder);
		}

		// update the thumb position
		this._$Thumb.css("left", iPerValue + "%");
	}

	return this;
};

/* =========================================================== */
/*                     end: API method                         */
/* =========================================================== */
}; // end of sap.m.Slider
if ( !jQuery.sap.isDeclared('sap.m.StandardListItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.StandardListItem.
jQuery.sap.declare("sap.m.StandardListItem");



/**
 * Constructor for a new StandardListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getDescription description} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getIconInset iconInset} : boolean (default: true)</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The StandardListItem is a list item providing image, titel and description.
 * @extends sap.m.ListItemBase
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.m.StandardListItem
 */
sap.m.ListItemBase.extend("sap.m.StandardListItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"description" : {type : "string", group : "Misc", defaultValue : null},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"iconInset" : {type : "boolean", group : "Appearance", defaultValue : true},
		"iconDensityAware" : {type : "boolean", group : "Misc", defaultValue : true},
		"activeIcon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.m.StandardListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.StandardListItem.extend
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * List item text
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.StandardListItem#getTitle
 * @function
 */


/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardListItem#setTitle
 * @function
 */

/**
 * Getter for property <code>description</code>.
 * Description
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>description</code>
 * @public
 * @name sap.m.StandardListItem#getDescription
 * @function
 */


/**
 * Setter for property <code>description</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDescription  new value for property <code>description</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardListItem#setDescription
 * @function
 */

/**
 * Getter for property <code>icon</code>.
 * List item icon
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.m.StandardListItem#getIcon
 * @function
 */


/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardListItem#setIcon
 * @function
 */

/**
 * Getter for property <code>iconInset</code>.
 * If false image will not be shown as embedded icon. Instead it will take the full height of the listitem.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>iconInset</code>
 * @public
 * @name sap.m.StandardListItem#getIconInset
 * @function
 */


/**
 * Setter for property <code>iconInset</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIconInset  new value for property <code>iconInset</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardListItem#setIconInset
 * @function
 */

/**
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * @name sap.m.StandardListItem#getIconDensityAware
 * @function
 */


/**
 * Setter for property <code>iconDensityAware</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIconDensityAware  new value for property <code>iconDensityAware</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardListItem#setIconDensityAware
 * @function
 */

/**
 * Getter for property <code>activeIcon</code>.
 * List item active icon
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>activeIcon</code>
 * @public
 * @name sap.m.StandardListItem#getActiveIcon
 * @function
 */


/**
 * Setter for property <code>activeIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sActiveIcon  new value for property <code>activeIcon</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardListItem#setActiveIcon
 * @function
 */

// Start of sap/m/StandardListItem.js
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained


/**
 * Function is called when listItem is tapped.
 * 
 * @param {jQuery.Event}
 *          oEvent
 */

sap.m.StandardListItem.prototype.exit = function() {
	if (this._image) {
		this._image.destroy();
	}
	
	sap.m.ListItemBase.prototype.exit.apply(this, arguments);
};


/**
 * @private
 */
sap.m.StandardListItem.prototype._getImage = function(oImgId, oImgStyle, oSrc, oIconDensityAware) {
	var image = this._image;
	if(image)
	{
		image.setSrc(oSrc);
		image.setDensityAware(oIconDensityAware);
	}
	else
	{
		image = new sap.m.Image(oImgId, {
			src : oSrc,
			densityAware : oIconDensityAware
		}).addStyleClass(oImgStyle, true).setParent(this, null, true);
	}
	return this._image = image;
};

// overwrite base method to hook into the active handling
sap.m.StandardListItem.prototype._activeHandlingInheritor = function() {
	var img = sap.ui.getCore().byId(this.getId() + "-img");
	if (img && this.getActiveIcon()) {
			img.setSrc(this.getActiveIcon());
	}
};

// overwrite base method to hook into the inactive handling
sap.m.StandardListItem.prototype._inactiveHandlingInheritor = function() {
	var img = sap.ui.getCore().byId(this.getId() + "-img");
	if (img) {
			img.setSrc(this.getIcon());
	}
};
}; // end of sap.m.StandardListItem
if ( !jQuery.sap.isDeclared('sap.m.Switch') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Switch.
jQuery.sap.declare("sap.m.Switch");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Switch.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getState state} : boolean (default: false)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getName name} : string (default: "")</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Switch#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A switch is a user interface control on mobile devices that is used for change between binary states. The user can also drag the button handle or tap to change the state.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.m.Switch
 */
sap.ui.core.Control.extend("sap.m.Switch", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"state" : {type : "boolean", group : "Misc", defaultValue : false},
		"enabled" : {type : "boolean", group : "Data", defaultValue : true},
		"name" : {type : "string", group : "Misc", defaultValue : ""}
	},
	events : {
		"change" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Switch with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Switch.extend
 * @function
 */

sap.m.Switch.M_EVENTS = {'change':'change'};


/**
 * Getter for property <code>visible</code>.
 * Invisible switches are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.Switch#getVisible
 * @function
 */


/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Switch#setVisible
 * @function
 */

/**
 * Getter for property <code>state</code>.
 * The state of the switch true is "on" or false is "off".
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>state</code>
 * @public
 * @name sap.m.Switch#getState
 * @function
 */


/**
 * Setter for property <code>state</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bState  new value for property <code>state</code>
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Switch#setState
 * @function
 */

/**
 * Getter for property <code>enabled</code>.
 * Whether the switch is enabled.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.m.Switch#getEnabled
 * @function
 */


/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Switch#setEnabled
 * @function
 */

/**
 * Getter for property <code>name</code>.
 * The name to be used in the HTML code for the switch (e.g. for HTML forms that send data to the server via submit).
 *
 * Default value is <code>""</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * @name sap.m.Switch#getName
 * @function
 */


/**
 * Setter for property <code>name</code>.
 *
 * Default value is <code>""</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Switch#setName
 * @function
 */

/**
 * Triggered when a switch changes the state. 
 *
 * @name sap.m.Switch#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.state The new state of the switch.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.Switch</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Switch</code>.<br/> itself. 
 *  
 * Triggered when a switch changes the state. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Switch</code>.<br/> itself.
 *
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Switch#attachChange
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.Switch</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Switch#detachChange
 * @function
 */


/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'state' of type <code>boolean</code> The new state of the switch.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Switch#fireChange
 * @function
 */

// Start of sap/m/Switch.js
sap.m.Switch.prototype._aVEvents = ["_ontouchstart", "_ontouchmove", "_ontouchend", "_ontouchcancel"];
sap.m.Switch.prototype._aEvents = ["ontouchstart", "ontouchmove", "ontouchend", "ontouchcancel"];

// the milliseconds it takes the transition from one state to another
sap.m.Switch.prototype._iTransitionTime = 175;

// a boolean property to indicate android and blackberry style.
sap.m.Switch.prototype._bAndroidStyle = !!(jQuery.os.android || jQuery.os.blackberry);

// a boolean property to indicate if transition or not.
sap.m.Switch.prototype._bTransition = !!(jQuery.os.ios);

/* =========================================================== */
/*                   begin: lifecycle methods                  */
/* =========================================================== */

/**
 * Initialization hook for the switch.
 *
 * @private
 */
sap.m.Switch.prototype.init = function() {
	var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.m");

	//	switch text translated
	this._sOn = oRb.getText("SWITCH_ON");
	this._sOff = oRb.getText("SWITCH_OFF");

	if (this._bAndroidStyle) {
		this._aVEvents.push("_onswiperight", "_onswipeleft");
		this._aEvents.push("onswiperight", "onswipeleft");
	}
};

/**
 * Required adaptations after rendering.
 *
 * @private
 * @param {jQuery.EventObject} oEvent The event object
 */
sap.m.Switch.prototype.onAfterRendering = function() {

	// bind only if the switch is enabled
	if (this.getEnabled()) {
		this._bindEvents();
	}

	// switch jQuery DOM reference
	this._$Swt = this.$();

	// the maximum offset in x-axis for the switch children elements
	this._iOffsetX = (jQuery.os.ios) ? 1 : (this._bAndroidStyle) ? 7 : 0;

	// switch width
	this._iSwtWidth = this._$Swt.width();

	// switch midpoint
	this._iSwtMp = Math.round(this._iSwtWidth / 2);

	// switch button jQuery DOM reference
	this._$Btn = this._$Swt.children(".sapMSwtBtn");

	// switch button outerWidth
	this._iBtnOuterWidth = this._$Btn.outerWidth(true);

	// switch button width
	this._iBtnWidth = this._$Btn.width();

	// switch button midpoint
	this._iBtnMp = Math.round(this._iBtnOuterWidth / 2);

	// the maximum left position for the switch button
	this._iBtnMaxLeft = (this._iSwtWidth - this._iBtnOuterWidth) + this._iOffsetX;

	// the minimum left position for the switch button
	this._iBtnMinLeft = -this._iOffsetX;

	// checkbox jQuery DOM reference
	this._$Checkbox = this._$Swt.children("input[type=checkbox]");

	if (jQuery.os.ios) {

		// switch text ON jQuery DOM reference
		this._$TextOn = this._$Swt.children('.sapMSwtTextOn');

		// the maximum text indent for the "ON" state
		this._iTextOnIndentMax = 13;

		// the minimum text indent for the "OFF" state
		this._iTextOnIndentMin = -37;

		// switch text OFF jQuery DOM reference
		this._$TextOff = this._$Swt.children('.sapMSwtTextOff');
	}
};

/* =========================================================== */
/*                   end: lifecycle methods                    */
/* =========================================================== */


/* =========================================================== */
/*                      begin: event handlers                  */
/* =========================================================== */

/**
 * Handle the swipe right event happening on the switch.
 *
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.m.Switch.prototype._onswiperight = function(oEvent) {
	this.setState(true, true);
};

/**
 * Handle the swipe left event happening on the switch.
 *
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.m.Switch.prototype._onswipeleft = function(oEvent) {
	this.setState(false, true);
};

/**
 * Handle the touch start event happening on the switch.
 *
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.m.Switch.prototype._ontouchstart = function(oEvent) {
	var oTargetTouch = oEvent.targetTouches[0];

	//	For control who need to know if they should handle
	//	events from the switch control.
	oEvent.originalEvent._sapui_handledByControl = true;

	//	Only process single touches. If there is already a touch
	//	happening or two simultaneous touches, then just ignore them.
	//
	//	Important to note that oEvent.targetTouches.length is related
	//	to the current target DOM element, it could be the control
	//	container or its children elements.
	//
	//	Also note that oEvent.touches.length is related to
	//	the UI-Area because event delegation.
	if (sap.m.touch.countContained(oEvent.touches, this.getId()) > 1) {
		return;
	}

	this._iActiveTouch = oTargetTouch.identifier;

	//	add active state
	this._$Swt.addClass("sapMSwtPressed");

	this._bTempState = this.getState();
	this._iStarTouchPageX = oTargetTouch.pageX;
	this._iCurrentTouchPageX = this._iStarTouchPageX;
	this._iDiffX = this._iStarTouchPageX - this._$Btn.position().left;
	this._bTargetBtn = jQuery(oEvent.target).is(this._$Btn);
	this._bDrag = false;

	if (this._bTransition) {
		this._$Swt.removeClass("sapMSwtTrans");
	}
};

/**
 * Handle the touch move event on the switch.
 *
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.m.Switch.prototype._ontouchmove = function(oEvent) {
	var oTouch,
		iTextIndent,
		iTouchPageX,
		iDragDistance,
		iLeftPos,
		iBtnCenter,
		fnTouch = sap.m.touch;

	//	the active touch should always be in the list of touches
	jQuery.sap.assert(fnTouch.find(oEvent.touches, this._iActiveTouch), 'sap.m.Switch.prototype._ontouchmove(): missing touchEnd');

	//	find the active touch
	oTouch = fnTouch.find(oEvent.changedTouches, this._iActiveTouch);

	//	Only respond to the active touch.
	//
	//	In android, only the handle is draggable, not the whole switch inner area.
	if (!oTouch || (this._bAndroidStyle && !this._bTargetBtn)) {
		return;
	}

	iTouchPageX = oTouch.pageX;
	iDragDistance = iTouchPageX - this._iCurrentTouchPageX;
	iLeftPos = (this._bTargetBtn && this._bAndroidStyle) ? iTouchPageX - this._iDiffX : iDragDistance + this._$Btn.position().left;
	iBtnCenter = iLeftPos + this._iBtnMp;

	//	restrict the switch handle button to a maximal and minimal left position during the dragging
	iLeftPos = (iLeftPos > this._iBtnMaxLeft) ? this._iBtnMaxLeft : (iLeftPos < this._iBtnMinLeft) ? this._iBtnMinLeft : iLeftPos;

	this._bDrag = true;
	this._iCurrentTouchPageX = iTouchPageX;

	/* **************************************************************** */
	/* the code below update the switch UI during the dragging process	*/
	/* **************************************************************** */

	if (this._iCurrentLeft === iLeftPos) {
		return;
	}

	this._iCurrentLeft = iLeftPos;

	this._$Btn.css("left", iLeftPos + "px");

	if (iBtnCenter >= this._iSwtMp) {

		if (!this._bTempState) {

			if (this._bAndroidStyle) {
				this._$Btn.attr("data-sap-ui-swt", this._sOn);
			}

			this._bTempState = true;
		}

	} else if (this._bTempState) {

		if (this._bAndroidStyle) {
			this._$Btn.attr("data-sap-ui-swt", this._sOff);
		}

		this._bTempState = false;
	}

	/* iOS require some additional UI changes */

	if (jQuery.os.ios) {
		iTextIndent = parseInt(this._$TextOn.css("text-indent"), 10) + iDragDistance;

		// restrict the switch text "ON" to a maximal and minimal text indent during the dragging
		iTextIndent = (iTextIndent > this._iTextOnIndentMax) ? this._iTextOnIndentMax : (iTextIndent < this._iTextOnIndentMin) ? this._iTextOnIndentMin : iTextIndent;

		this._$TextOn.css({
			width: iLeftPos + this._iBtnWidth + this._iOffsetX,
			textIndent: iTextIndent
		});

		this._$TextOff.width(this._iSwtWidth - (iLeftPos + this._iOffsetX));
	}
};

/**
 * Handle the touch end event on the switch.
 *
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.m.Switch.prototype._ontouchend = function(oEvent) {
	var aProp = ["_bTempState", "_iStarTouchPageX", "_iCurrentTouchPageX", "_iDiffX", "_bTargetBtn", "_bDrag", "_iActiveTouch"],
		iLen = aProp.length,
		fnTouch = sap.m.touch,
		i;

	jQuery.sap.assert(typeof this._iActiveTouch !== "undefined", 'sap.m.Switch.prototype._ontouchend(): expect to already be touching');

	// if the touch we're tracking isn't changing here, ignore this touch end event
	if (!fnTouch.find(oEvent.changedTouches, this._iActiveTouch)) {

		// In most cases, our active touch will be in the touches collection,
		// but we can't assert that because occasionally two touch end events can
		// occur at almost the same time with both having empty touches lists.
		return;
	}

	// this is touch end for the touch we're monitoring
	jQuery.sap.assert(!fnTouch.find(oEvent.touches, this._iActiveTouch), 'sap.m.Switch.prototype._ontouchend(): touch ended also still active');

	// remove active state
	this._$Swt.removeClass("sapMSwtPressed");

	// change the state
	(this._bDrag) ? this.setState(this._bTempState, true) :	this.setState(!this._bTempState, true);

	// remove unused properties
	for (i = 0; i < iLen; i++) {
		if (this.hasOwnProperty(aProp[i])) {
			delete this[aProp[i]];
		}
	}
};

/**
 * Handle the touch cancel event on the switch.
 *
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.m.Switch.prototype._ontouchcancel = function(oEvent) {
	this._ontouchend(oEvent);
};

/* ============================================================ */
/*                      end: event handlers						*/
/* ============================================================ */


/* =========================================================== */
/*                      begin: internal methods                */
/* =========================================================== */

/**
 * Bind events.
 *
 * @private
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 */
sap.m.Switch.prototype._bindEvents = function() {
	var i;

	for (i = 0; i < this._aVEvents.length; i++) {
		this[this._aEvents[i]] = this[this._aVEvents[i]];
	}

	return this;
};

/**
 * Unbind events.
 *
 * @private
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 */
sap.m.Switch.prototype._unbindEvents = function() {
	var i;

	for (i = 0; i < this._aVEvents.length; i++) {
		this[this._aEvents[i]] = null;
	}

	return this;
};

/* =========================================================== */
/*                      end: internal methods                  */
/* =========================================================== */


/* =========================================================== */
/*                   begin: API method                         */
/* =========================================================== */

/**
 * Change the switch state between on and off.
 *
 * @param {boolean} bState
 * @public
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 */
sap.m.Switch.prototype.setState = function(bState, bTriggerEvent) {
	var bState,
		sState,
		bNewState,
		a,
		i;

	if (!this.getEnabled() && bTriggerEvent) {
		return this;
	}

	bNewState = !(this.getState() === bState);

	if (bNewState) {
		this.setProperty("state", bState, true); // validation and suppress re-rendering
	}

	if (!(this._$Swt instanceof jQuery)) {
		return this;
	}

	bState = this.getState();
	sState = bState ? this._sOn : this._sOff;

	if (bNewState) {
		if (this._bAndroidStyle) {
			this._$Btn.attr("data-sap-ui-swt", sState);
		}

		this._$Checkbox.attr({
			checked: bState,
			value: sState
		});

		(bState) ? this._$Swt.removeClass("sapMSwtOff").addClass("sapMSwtOn") :	this._$Swt.removeClass("sapMSwtOn").addClass("sapMSwtOff");

		if (bTriggerEvent) {
			if (this._bTransition) {
				jQuery.sap.delayedCall(this._iTransitionTime, this, function _fireChangeDelay(bState) {
					this.fireChange({state:bState});
				}, [bState]);
			} else {
				this.fireChange({state:bState});
			}
		}
	}

	if (this._bTransition) {
		this._$Swt.addClass("sapMSwtTrans");
	}

	// remove all inline style on the switch
	a = [this._$Btn];
	if (jQuery.os.ios) {
		a.push(this._$TextOn, this._$TextOff);
	}

	for (i = 0; i < a.length; i++) {
		a[i].removeAttr("style");
	}

	return this;
};

/**
 * Disable or enable the switch.
 *
 * @param {boolean} bValue
 * @public
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 */
sap.m.Switch.prototype.setEnabled = function(bValue) {
	if (this.getEnabled() === bValue) {
		return this;
	}

	this.setProperty("enabled", bValue, true);	// validation and suppress re-rendering

	if (this._$Swt instanceof jQuery) {
		(bValue) ? this._bindEvents()._$Swt.removeClass("sapMSwtDisabled") : this._unbindEvents()._$Swt.addClass("sapMSwtDisabled");
		this._$Checkbox.attr("disabled", !bValue);
	}

	return this;
};

/* =========================================================== */
/*                     end: API method                         */
/* =========================================================== */
}; // end of sap.m.Switch
if ( !jQuery.sap.isDeclared('sap.m.Text') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Text.
jQuery.sap.declare("sap.m.Text");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Text.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string (default: '')</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getWrapping wrapping} : boolean (default: true)</li>
 * <li>{@link #getTextAlign textAlign} : sap.ui.core.TextAlign (default: sap.ui.core.TextAlign.Begin)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The Text control is used to display some continuous text.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.m.Text
 */
sap.ui.core.Control.extend("sap.m.Text", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"text" : {type : "string", group : "", defaultValue : '', bindable : "bindable"},
		"textDirection" : {type : "sap.ui.core.TextDirection", group : "Appearance", defaultValue : sap.ui.core.TextDirection.Inherit},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"wrapping" : {type : "boolean", group : "Appearance", defaultValue : true},
		"textAlign" : {type : "sap.ui.core.TextAlign", group : "Appearance", defaultValue : sap.ui.core.TextAlign.Begin},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.m.Text with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Text.extend
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * Text to be displayed.
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.Text#getText
 * @function
 */


/**
 * Setter for property <code>text</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Text#setText
 * @function
 */

/**
 * Binder for property <code>text</code>.
 *
 * @param {string} sPath path to a property in the model 
 * @param {function} [fnFormatter=null] the formatter function
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way) 
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Text#bindText
 * @function
 */


/**
 * Unbinder for property <code>text</code>.
 *
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Text#unbindText
 * @function

 */

/**
 * Getter for property <code>textDirection</code>.
 * Available options for the text direction are LTR and RTL. By default the control inherits the text direction from its parent control.
 *
 * Default value is <code>Inherit</code>
 *
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * @name sap.m.Text#getTextDirection
 * @function
 */


/**
 * Setter for property <code>textDirection</code>.
 *
 * Default value is <code>Inherit</code> 
 *
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Text#setTextDirection
 * @function
 */

/**
 * Getter for property <code>visible</code>.
 * Set this property to false to make text invisible.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.Text#getVisible
 * @function
 */


/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Text#setVisible
 * @function
 */

/**
 * Getter for property <code>wrapping</code>.
 * Set this property to false to disable the automatic text wrapping.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>wrapping</code>
 * @public
 * @name sap.m.Text#getWrapping
 * @function
 */


/**
 * Setter for property <code>wrapping</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bWrapping  new value for property <code>wrapping</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Text#setWrapping
 * @function
 */

/**
 * Getter for property <code>textAlign</code>.
 * Sets the horizontal alignment of the text.
 *
 * Default value is <code>Begin</code>
 *
 * @return {sap.ui.core.TextAlign} the value of property <code>textAlign</code>
 * @public
 * @name sap.m.Text#getTextAlign
 * @function
 */


/**
 * Setter for property <code>textAlign</code>.
 *
 * Default value is <code>Begin</code> 
 *
 * @param {sap.ui.core.TextAlign} oTextAlign  new value for property <code>textAlign</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Text#setTextAlign
 * @function
 */

/**
 * Getter for property <code>width</code>.
 * By default the Text control uses the full width available. Set this property to restrict the width to a custom value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.Text#getWidth
 * @function
 */


/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Text#setWidth
 * @function
 */

// Start of sap/m/Text.js
/*
 * @see JSDoc generated by SAPUI5 Control API generator
 */
sap.m.Text.prototype.setText = function(sText) {
	this.setProperty("text", sText, true); // no re-rendering!
	var oDomRef = this.getDomRef();
	if (oDomRef) {
		var aLines = this.getText().split("\n");
		for (var i = 0; i < aLines.length; i++) {
			aLines[i] = jQuery.sap.encodeHTML(aLines[i]);
		}
		sText = aLines.join("<br>");
		oDomRef.innerHTML = sText;
	}
	return this;
};
}; // end of sap.m.Text
if ( !jQuery.sap.isDeclared('sap.m.VBox') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.VBox.
jQuery.sap.declare("sap.m.VBox");



/**
 * Constructor for a new VBox.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.FlexBox#constructor sap.m.FlexBox}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The VBox control builds the container for a vertical flexible box layout. VBox is a convenience control as it is just a specialized FlexBox control.
 * @extends sap.m.FlexBox
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.m.VBox
 */
sap.m.FlexBox.extend("sap.m.VBox", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m"
}});


/**
 * Creates a new subclass of class sap.m.VBox with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.VBox.extend
 * @function
 */


// Start of sap/m/VBox.js

}; // end of sap.m.VBox
if ( !jQuery.sap.isDeclared('sap.m.VBoxRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.VBoxRenderer");


/**
 * @class VBox renderer.
 * @static
 */
sap.m.VBoxRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.VBoxRenderer.render = function(oRm, oControl){
	sap.m.FlexBoxRenderer.render.apply(this, [oRm, oControl]);
};

}; // end of sap.m.VBoxRenderer
if ( !jQuery.sap.isDeclared('sap.m.App') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.App.
jQuery.sap.declare("sap.m.App");



/**
 * Constructor for a new App.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHomeIcon homeIcon} : any</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.App#event:orientationChange orientationChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.NavContainer#constructor sap.m.NavContainer}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * App is the root element of a UI5 mobile application. It inherits from NavContainer and thus provides its navigation capabilities.
 * It also adds certain header tags to the HTML page which are considered useful for mobile apps.
 * @extends sap.m.NavContainer
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.m.App
 */
sap.m.NavContainer.extend("sap.m.App", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"homeIcon" : {type : "any", group : "Misc", defaultValue : null}
	},
	events : {
		"orientationChange" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.App with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.App.extend
 * @function
 */

sap.m.App.M_EVENTS = {'orientationChange':'orientationChange'};


/**
 * Getter for property <code>homeIcon</code>.
 * The icon to be displayed on the home screen of iOS devices after the user does "add to home screen".
 * This icon must be in PNG format. The property can either hold the URL of one single icon which is used for all devices (and possibly scaled, which looks not perfect), or an object holding icon URLs for the different required sizes; one example is:
 * 
 * app.setHomeIcon({
 * 'phone':'phone-icon.png',
 * 'phone@2':'phone-retina.png',
 * 'tablet':'tablet-icon.png',
 * 'tablet@2':'tablet-retina.png'
 * });
 * 
 * The respective image sizes are 57/114 px for the phone and 72/144 px for the tablet.
 * If an object is given but the required size is missing from the object, the largest given URL will be used.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>homeIcon</code>
 * @public
 * @name sap.m.App#getHomeIcon
 * @function
 */


/**
 * Setter for property <code>homeIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oHomeIcon  new value for property <code>homeIcon</code>
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.App#setHomeIcon
 * @function
 */

/**
 * Fired when the orientation (portrait/landscape) of the device is changed. 
 *
 * @name sap.m.App#orientationChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.landscape Whether the device is in landscape orientation.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'orientationChange' event of this <code>sap.m.App</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.App</code>.<br/> itself. 
 *  
 * Fired when the orientation (portrait/landscape) of the device is changed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.App</code>.<br/> itself.
 *
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.App#attachOrientationChange
 * @function
 */


/**
 * Detach event handler <code>fnFunction</code> from the 'orientationChange' event of this <code>sap.m.App</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.App#detachOrientationChange
 * @function
 */


/**
 * Fire event orientationChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'landscape' of type <code>boolean</code> Whether the device is in landscape orientation.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.App#fireOrientationChange
 * @function
 */

// Start of sap/m/App.js
sap.m.App.prototype.init = function() {
	sap.m.NavContainer.prototype.init.apply(this, arguments);

	this.addStyleClass("sapMApp");

	jQuery(jQuery.proxy(function(){
		jQuery.sap.initMobile({
			viewport: !this._debugZoomAndScroll,
			statusBar: "default",
			hideBrowser: true,
			preventScroll: !this._debugZoomAndScroll,
			homeIcon: this.getHomeIcon(),
			rootId: this.getId()
		});
		jQuery(window).bind("resize", jQuery.proxy(this._handleOrientationChange, this));
	},this));
};


sap.m.App.prototype.onAfterRendering = function() {
	if (!this._bParentHeightSet) { // set all parent elements to 100% height this *should* be done by the application in CSS, but people tend to forget it...
		var ref = this.getDomRef().parentNode;
		while (ref && ref !== document.documentElement) {
			if (!ref.style.height) ref.style.height = "100%";
			ref = ref.parentNode;
		}
		this._bParentHeightSet = true;
	}
};


/**
 * Termination of the App control
 * @private
 */
sap.m.App.prototype.exit = function() {
	jQuery(window).unbind("resize", this._handleOrientationChange);
	
	if (this._sInitTimer) {
		jQuery.sap.clearDelayedCall(this._sInitTimer);
	}
};

sap.m.App.prototype._handleOrientationChange = function() {
	var $window = jQuery(window);
	var isLandscape = $window.width() > $window.height();
	if (this._oldIsLandscape !== isLandscape) {
		this.fireOrientationChange({landscape: isLandscape});
		this._oldIsLandscape = isLandscape;
	}
};

// TODO: later, introduce tabs as a kind of separation between histories


}; // end of sap.m.App
if ( !jQuery.sap.isDeclared('sap.m.CustomListItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.CustomListItem.
jQuery.sap.declare("sap.m.CustomListItem");



/**
 * Constructor for a new CustomListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * sap.m.CustomListItem Control
 * @extends sap.m.ListItemBase
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.m.CustomListItem
 */
sap.m.ListItemBase.extend("sap.m.CustomListItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content", bindable : "bindable"}
	}
}});


/**
 * Creates a new subclass of class sap.m.CustomListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.CustomListItem.extend
 * @function
 */

	
/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content of this list item
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.CustomListItem#getContent
 * @function
 */

/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.CustomListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CustomListItem#insertContent
 * @function
 */


/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.CustomListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CustomListItem#addContent
 * @function
 */


/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.m.CustomListItem#removeContent
 * @function
 */


/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.CustomListItem#removeAllContent
 * @function
 */


/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.CustomListItem#indexOfContent
 * @function
 */


/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.CustomListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CustomListItem#destroyContent
 * @function
 */

/**
 * Binder for aggregation <code>content</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.m.CustomListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CustomListItem#bindContent
 * @function
 */


/**
 * Unbinder for aggregation <code>content</code>.
 *
 * @return {sap.m.CustomListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CustomListItem#unbindContent
 * @function
 */

// Start of sap/m/CustomListItem.js


}; // end of sap.m.CustomListItem
if ( !jQuery.sap.isDeclared('sap.m.DisplayListItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.DisplayListItem.
jQuery.sap.declare("sap.m.DisplayListItem");



/**
 * Constructor for a new DisplayListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getLabel label} : string</li>
 * <li>{@link #getValue value} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The display list item consists of a label and a value.
 * @extends sap.m.ListItemBase
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.m.DisplayListItem
 */
sap.m.ListItemBase.extend("sap.m.DisplayListItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"label" : {type : "string", group : "Misc", defaultValue : null},
		"value" : {type : "string", group : "Data", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.m.DisplayListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.DisplayListItem.extend
 * @function
 */


/**
 * Getter for property <code>label</code>.
 * List item label
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>label</code>
 * @public
 * @name sap.m.DisplayListItem#getLabel
 * @function
 */


/**
 * Setter for property <code>label</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLabel  new value for property <code>label</code>
 * @return {sap.m.DisplayListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.DisplayListItem#setLabel
 * @function
 */

/**
 * Getter for property <code>value</code>.
 * List item value
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>value</code>
 * @public
 * @name sap.m.DisplayListItem#getValue
 * @function
 */


/**
 * Setter for property <code>value</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sValue  new value for property <code>value</code>
 * @return {sap.m.DisplayListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.DisplayListItem#setValue
 * @function
 */

// Start of sap/m/DisplayListItem.js
///**
// * This file defines behavior for the control,
// */
//sap.m.DisplayListItem.prototype.init = function(){
//   // do something for initialization...
//};

}; // end of sap.m.DisplayListItem
if ( !jQuery.sap.isDeclared('sap.m.InputListItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.InputListItem.
jQuery.sap.declare("sap.m.InputListItem");



/**
 * Constructor for a new InputListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getLabel label} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * List item should be used for a label and an input field.
 * @extends sap.m.ListItemBase
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.m.InputListItem
 */
sap.m.ListItemBase.extend("sap.m.InputListItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"label" : {type : "string", group : "Misc", defaultValue : null}
	},
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content", bindable : "bindable"}
	}
}});


/**
 * Creates a new subclass of class sap.m.InputListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.InputListItem.extend
 * @function
 */


/**
 * Getter for property <code>label</code>.
 * Label of the list item
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>label</code>
 * @public
 * @name sap.m.InputListItem#getLabel
 * @function
 */


/**
 * Setter for property <code>label</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLabel  new value for property <code>label</code>
 * @return {sap.m.InputListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputListItem#setLabel
 * @function
 */
	
/**
 * Getter for aggregation <code>content</code>.<br/>
 * Content controls can be added
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.InputListItem#getContent
 * @function
 */

/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.InputListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputListItem#insertContent
 * @function
 */


/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.InputListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputListItem#addContent
 * @function
 */


/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.m.InputListItem#removeContent
 * @function
 */


/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.InputListItem#removeAllContent
 * @function
 */


/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.InputListItem#indexOfContent
 * @function
 */


/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.InputListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputListItem#destroyContent
 * @function
 */

/**
 * Binder for aggregation <code>content</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.m.InputListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputListItem#bindContent
 * @function
 */


/**
 * Unbinder for aggregation <code>content</code>.
 *
 * @return {sap.m.InputListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputListItem#unbindContent
 * @function
 */

// Start of sap/m/InputListItem.js

}; // end of sap.m.InputListItem
